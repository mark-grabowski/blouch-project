// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_blouchOU_v1_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'blouchOU_v1', line 154, column 2 to column 21)",
                                                      " (in 'blouchOU_v1', line 156, column 2 to column 51)",
                                                      " (in 'blouchOU_v1', line 158, column 2 to column 13)",
                                                      " (in 'blouchOU_v1', line 159, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 166, column 2 to column 23)",
                                                      " (in 'blouchOU_v1', line 167, column 2 to column 24)",
                                                      " (in 'blouchOU_v1', line 168, column 2 to column 19)",
                                                      " (in 'blouchOU_v1', line 169, column 2 to column 22)",
                                                      " (in 'blouchOU_v1', line 170, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 171, column 2 to column 122)",
                                                      " (in 'blouchOU_v1', line 179, column 4 to column 32)",
                                                      " (in 'blouchOU_v1', line 180, column 4 to column 17)",
                                                      " (in 'blouchOU_v1', line 177, column 6 to line 181, column 5)",
                                                      " (in 'blouchOU_v1', line 174, column 4 to column 108)",
                                                      " (in 'blouchOU_v1', line 175, column 4 to column 54)",
                                                      " (in 'blouchOU_v1', line 172, column 58 to line 176, column 5)",
                                                      " (in 'blouchOU_v1', line 172, column 2 to line 181, column 5)",
                                                      " (in 'blouchOU_v1', line 183, column 2 to column 76)",
                                                      " (in 'blouchOU_v1', line 187, column 2 to column 78)",
                                                      " (in 'blouchOU_v1', line 240, column 2 to column 22)",
                                                      " (in 'blouchOU_v1', line 242, column 2 to column 22)",
                                                      " (in 'blouchOU_v1', line 244, column 2 to column 22)",
                                                      " (in 'blouchOU_v1', line 245, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 246, column 2 to column 11)",
                                                      " (in 'blouchOU_v1', line 247, column 2 to column 11)",
                                                      " (in 'blouchOU_v1', line 248, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 252, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 253, column 2 to column 22)",
                                                      " (in 'blouchOU_v1', line 254, column 2 to column 25)",
                                                      " (in 'blouchOU_v1', line 255, column 2 to column 23)",
                                                      " (in 'blouchOU_v1', line 258, column 2 to column 16)",
                                                      " (in 'blouchOU_v1', line 260, column 2 to column 22)",
                                                      " (in 'blouchOU_v1', line 265, column 2 to column 70)",
                                                      " (in 'blouchOU_v1', line 266, column 2 to column 125)",
                                                      " (in 'blouchOU_v1', line 274, column 4 to column 35)",
                                                      " (in 'blouchOU_v1', line 275, column 4 to column 23)",
                                                      " (in 'blouchOU_v1', line 272, column 6 to line 276, column 5)",
                                                      " (in 'blouchOU_v1', line 269, column 4 to column 111)",
                                                      " (in 'blouchOU_v1', line 270, column 4 to column 63)",
                                                      " (in 'blouchOU_v1', line 267, column 58 to line 271, column 5)",
                                                      " (in 'blouchOU_v1', line 267, column 2 to line 276, column 5)",
                                                      " (in 'blouchOU_v1', line 278, column 2 to column 33)",
                                                      " (in 'blouchOU_v1', line 279, column 2 to column 83)",
                                                      " (in 'blouchOU_v1', line 280, column 2 to column 66)",
                                                      " (in 'blouchOU_v1', line 281, column 2 to column 64)",
                                                      " (in 'blouchOU_v1', line 282, column 2 to column 32)",
                                                      " (in 'blouchOU_v1', line 197, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 197, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 197, column 2 to column 16)",
                                                      " (in 'blouchOU_v1', line 198, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 198, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 198, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 199, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 199, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 199, column 2 to column 19)",
                                                      " (in 'blouchOU_v1', line 200, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 200, column 2 to column 15)",
                                                      " (in 'blouchOU_v1', line 201, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 201, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 201, column 2 to column 16)",
                                                      " (in 'blouchOU_v1', line 202, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 202, column 12 to column 13)",
                                                      " (in 'blouchOU_v1', line 202, column 2 to column 19)",
                                                      " (in 'blouchOU_v1', line 206, column 2 to column 25)",
                                                      " (in 'blouchOU_v1', line 208, column 2 to column 36)",
                                                      " (in 'blouchOU_v1', line 209, column 2 to column 32)",
                                                      " (in 'blouchOU_v1', line 217, column 2 to column 66)",
                                                      " (in 'blouchOU_v1', line 220, column 2 to column 119)",
                                                      " (in 'blouchOU_v1', line 226, column 4 to column 29)",
                                                      " (in 'blouchOU_v1', line 227, column 4 to column 11)",
                                                      " (in 'blouchOU_v1', line 225, column 6 to line 228, column 3)",
                                                      " (in 'blouchOU_v1', line 222, column 4 to column 104)",
                                                      " (in 'blouchOU_v1', line 223, column 4 to column 45)",
                                                      " (in 'blouchOU_v1', line 221, column 58 to line 224, column 3)",
                                                      " (in 'blouchOU_v1', line 221, column 2 to line 228, column 3)",
                                                      " (in 'blouchOU_v1', line 229, column 2 to column 30)",
                                                      " (in 'blouchOU_v1', line 232, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 234, column 2 to column 38)",
                                                      " (in 'blouchOU_v1', line 132, column 2 to column 8)",
                                                      " (in 'blouchOU_v1', line 133, column 2 to column 8)",
                                                      " (in 'blouchOU_v1', line 134, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 134, column 2 to column 14)",
                                                      " (in 'blouchOU_v1', line 135, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 135, column 2 to column 24)",
                                                      " (in 'blouchOU_v1', line 136, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 136, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 136, column 2 to column 25)",
                                                      " (in 'blouchOU_v1', line 137, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 137, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 137, column 2 to column 28)",
                                                      " (in 'blouchOU_v1', line 138, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 138, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 138, column 2 to column 25)",
                                                      " (in 'blouchOU_v1', line 139, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 139, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 139, column 2 to column 28)",
                                                      " (in 'blouchOU_v1', line 140, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 140, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 140, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 141, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 141, column 2 to column 19)",
                                                      " (in 'blouchOU_v1', line 142, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 142, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 142, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 143, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 143, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 143, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 144, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 144, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 144, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 145, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 145, column 2 to column 28)",
                                                      " (in 'blouchOU_v1', line 146, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 146, column 2 to column 30)",
                                                      " (in 'blouchOU_v1', line 147, column 2 to column 21)",
                                                      " (in 'blouchOU_v1', line 148, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 159, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 166, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 166, column 11 to column 14)",
                                                      " (in 'blouchOU_v1', line 167, column 9 to column 12)",
                                                      " (in 'blouchOU_v1', line 168, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 168, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 169, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 169, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 170, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 170, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 244, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 252, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 252, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 253, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 253, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 254, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 254, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 255, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 255, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 10, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 10, column 13 to column 14)",
                                                      " (in 'blouchOU_v1', line 10, column 4 to column 20)",
                                                      " (in 'blouchOU_v1', line 11, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 11, column 13 to column 14)",
                                                      " (in 'blouchOU_v1', line 11, column 4 to column 18)",
                                                      " (in 'blouchOU_v1', line 12, column 4 to column 62)",
                                                      " (in 'blouchOU_v1', line 19, column 6 to column 52)",
                                                      " (in 'blouchOU_v1', line 18, column 9 to line 20, column 7)",
                                                      " (in 'blouchOU_v1', line 17, column 6 to column 28)",
                                                      " (in 'blouchOU_v1', line 16, column 31 to line 18, column 5)",
                                                      " (in 'blouchOU_v1', line 16, column 9 to line 20, column 7)",
                                                      " (in 'blouchOU_v1', line 14, column 6 to column 21)",
                                                      " (in 'blouchOU_v1', line 13, column 26 to line 15, column 7)",
                                                      " (in 'blouchOU_v1', line 13, column 4 to line 20, column 7)",
                                                      " (in 'blouchOU_v1', line 22, column 4 to column 14)",
                                                      " (in 'blouchOU_v1', line 9, column 109 to line 23, column 5)",
                                                      " (in 'blouchOU_v1', line 28, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 28, column 13 to column 14)",
                                                      " (in 'blouchOU_v1', line 28, column 4 to column 20)",
                                                      " (in 'blouchOU_v1', line 29, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 29, column 13 to column 16)",
                                                      " (in 'blouchOU_v1', line 29, column 4 to column 20)",
                                                      " (in 'blouchOU_v1', line 31, column 4 to column 35)",
                                                      " (in 'blouchOU_v1', line 39, column 6 to column 49)",
                                                      " (in 'blouchOU_v1', line 40, column 6 to column 42)",
                                                      " (in 'blouchOU_v1', line 38, column 9 to line 41, column 7)",
                                                      " (in 'blouchOU_v1', line 37, column 6 to column 57)",
                                                      " (in 'blouchOU_v1', line 36, column 31 to line 38, column 5)",
                                                      " (in 'blouchOU_v1', line 36, column 9 to line 41, column 7)",
                                                      " (in 'blouchOU_v1', line 34, column 6 to column 50)",
                                                      " (in 'blouchOU_v1', line 33, column 26 to line 35, column 7)",
                                                      " (in 'blouchOU_v1', line 33, column 4 to line 41, column 7)",
                                                      " (in 'blouchOU_v1', line 43, column 4 to column 14)",
                                                      " (in 'blouchOU_v1', line 27, column 114 to line 44, column 5)",
                                                      " (in 'blouchOU_v1', line 50, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 50, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 51, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 51, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 51, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 52, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 52, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 52, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 53, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 53, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 53, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 54, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 54, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 54, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 55, column 2 to column 10)",
                                                      " (in 'blouchOU_v1', line 56, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 56, column 2 to column 20)",
                                                      " (in 'blouchOU_v1', line 57, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 57, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 57, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 60, column 4 to column 28)",
                                                      " (in 'blouchOU_v1', line 59, column 2 to line 60, column 28)",
                                                      " (in 'blouchOU_v1', line 76, column 6 to column 74)",
                                                      " (in 'blouchOU_v1', line 74, column 8 to line 77, column 5)",
                                                      " (in 'blouchOU_v1', line 62, column 6 to column 42)",
                                                      " (in 'blouchOU_v1', line 63, column 6 to column 32)",
                                                      " (in 'blouchOU_v1', line 64, column 6 to column 85)",
                                                      " (in 'blouchOU_v1', line 65, column 6 to column 45)",
                                                      " (in 'blouchOU_v1', line 66, column 6 to column 62)",
                                                      " (in 'blouchOU_v1', line 69, column 6 to column 100)",
                                                      " (in 'blouchOU_v1', line 61, column 28 to line 73, column 5)",
                                                      " (in 'blouchOU_v1', line 61, column 4 to line 77, column 5)",
                                                      " (in 'blouchOU_v1', line 81, column 2 to column 13)",
                                                      " (in 'blouchOU_v1', line 48, column 175 to line 82, column 3)",
                                                      " (in 'blouchOU_v1', line 88, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 88, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 88, column 2 to column 19)",
                                                      " (in 'blouchOU_v1', line 89, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 89, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 89, column 2 to column 19)",
                                                      " (in 'blouchOU_v1', line 90, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 90, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 90, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 91, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 91, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 91, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 92, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 92, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 92, column 2 to column 25)",
                                                      " (in 'blouchOU_v1', line 93, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 93, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 93, column 2 to column 31)",
                                                      " (in 'blouchOU_v1', line 94, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 94, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 94, column 2 to column 17)",
                                                      " (in 'blouchOU_v1', line 95, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 95, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 95, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 96, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 96, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 96, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 97, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 97, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 97, column 2 to column 34)",
                                                      " (in 'blouchOU_v1', line 98, column 9 to column 10)",
                                                      " (in 'blouchOU_v1', line 98, column 11 to column 12)",
                                                      " (in 'blouchOU_v1', line 98, column 2 to column 16)",
                                                      " (in 'blouchOU_v1', line 99, column 2 to column 26)",
                                                      " (in 'blouchOU_v1', line 100, column 2 to column 26)",
                                                      " (in 'blouchOU_v1', line 101, column 2 to column 27)",
                                                      " (in 'blouchOU_v1', line 102, column 2 to column 27)",
                                                      " (in 'blouchOU_v1', line 104, column 4 to column 48)",
                                                      " (in 'blouchOU_v1', line 105, column 4 to column 37)",
                                                      " (in 'blouchOU_v1', line 103, column 29 to line 106, column 5)",
                                                      " (in 'blouchOU_v1', line 103, column 2 to line 106, column 5)",
                                                      " (in 'blouchOU_v1', line 109, column 4 to column 52)",
                                                      " (in 'blouchOU_v1', line 110, column 4 to column 67)",
                                                      " (in 'blouchOU_v1', line 108, column 29 to line 111, column 5)",
                                                      " (in 'blouchOU_v1', line 108, column 2 to line 111, column 5)",
                                                      " (in 'blouchOU_v1', line 112, column 2 to column 18)",
                                                      " (in 'blouchOU_v1', line 113, column 2 to column 15)",
                                                      " (in 'blouchOU_v1', line 114, column 2 to column 16)",
                                                      " (in 'blouchOU_v1', line 116, column 2 to column 42)",
                                                      " (in 'blouchOU_v1', line 118, column 2 to column 50)",
                                                      " (in 'blouchOU_v1', line 124, column 2 to column 27)",
                                                      " (in 'blouchOU_v1', line 86, column 151 to line 125, column 3)"};
template <typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T4__>,
stan::value_type_t<T5__>>, -1, -1>
design_matrix(const int& N, const int& evol, const T2__& a,
              const T3__& T_term_arg__, const T4__& direct_cov_arg__,
              const T5__& random_cov_arg__, const int& Z,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>>;
  const auto& T_term = to_ref(T_term_arg__);
  const auto& direct_cov = to_ref(direct_cov_arg__);
  const auto& random_cov = to_ref(random_cov_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 136;
    validate_non_negative_index("rho", "N", N);
    current_statement__ = 137;
    validate_non_negative_index("rho", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> rho;
    rho = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(rho, DUMMY_VAR__);
    
    current_statement__ = 139;
    validate_non_negative_index("X", "N", N);
    current_statement__ = 140;
    validate_non_negative_index("X", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> X;
    X = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(X, DUMMY_VAR__);
    
    current_statement__ = 142;
    assign(rho, nil_index_list(),
      to_matrix(
        subtract(1,
          elt_divide(subtract(1, stan::math::exp(multiply(-a, T_term))),
            multiply(a, T_term)))), "assigning variable rho");
    current_statement__ = 150;
    if (logical_eq(sum(random_cov), 0)) {
      current_statement__ = 148;
      assign(X, nil_index_list(), direct_cov, "assigning variable X");
    } else {
      current_statement__ = 147;
      if (logical_eq(sum(direct_cov), 0)) {
        current_statement__ = 145;
        assign(X, nil_index_list(), elt_multiply(random_cov, rho),
          "assigning variable X");
      } else {
        current_statement__ = 143;
        assign(X, nil_index_list(),
          append_col(direct_cov, elt_multiply(random_cov, rho)),
          "assigning variable X");
      }
    }
    current_statement__ = 151;
    return X;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct design_matrix_functor__ {
template <typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T4__>,
stan::value_type_t<T5__>>, -1, -1>
operator()(const int& N, const int& evol, const T2__& a, const T3__& T_term,
           const T4__& direct_cov, const T5__& random_cov, const int& Z,
           std::ostream* pstream__)  const 
{
return design_matrix(N, evol, a, T_term, direct_cov, random_cov, Z,
         pstream__);
}
};
template <typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T4__>,
stan::value_type_t<T5__>>, -1, -1>
design_matrix_evol(const int& N, const int& evol, const T2__& a,
                   const T3__& T_term_arg__, const T4__& direct_cov_arg__,
                   const T5__& random_cov_arg__, const int& Z,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>>;
  const auto& T_term = to_ref(T_term_arg__);
  const auto& direct_cov = to_ref(direct_cov_arg__);
  const auto& random_cov = to_ref(random_cov_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 153;
    validate_non_negative_index("rho", "N", N);
    current_statement__ = 154;
    validate_non_negative_index("rho", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> rho;
    rho = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(rho, DUMMY_VAR__);
    
    current_statement__ = 156;
    validate_non_negative_index("X", "N", N);
    current_statement__ = 157;
    validate_non_negative_index("X", "Z + 1", (Z + 1));
    Eigen::Matrix<local_scalar_t__, -1, -1> X;
    X = Eigen::Matrix<local_scalar_t__, -1, -1>(N, (Z + 1));
    stan::math::fill(X, DUMMY_VAR__);
    
    current_statement__ = 159;
    assign(rho, nil_index_list(), to_matrix(rep_vector(1, N)),
      "assigning variable rho");
    current_statement__ = 168;
    if (logical_eq(sum(random_cov), 0)) {
      current_statement__ = 166;
      assign(X, nil_index_list(), append_col(rep_vector(1, N), direct_cov),
        "assigning variable X");
    } else {
      current_statement__ = 165;
      if (logical_eq(sum(direct_cov), 0)) {
        current_statement__ = 163;
        assign(X, nil_index_list(),
          append_col(rep_vector(1, N), elt_multiply(random_cov, rho)),
          "assigning variable X");
      } else {
        current_statement__ = 160;
        assign(X, nil_index_list(), append_col(rep_vector(1, N), direct_cov),
          "assigning variable X");
        current_statement__ = 161;
        assign(X, nil_index_list(),
          append_col(stan::model::deep_copy(X),
            elt_multiply(random_cov, rho)), "assigning variable X");
      }
    }
    current_statement__ = 169;
    return X;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct design_matrix_evol_functor__ {
template <typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T4__>,
stan::value_type_t<T5__>>, -1, -1>
operator()(const int& N, const int& evol, const T2__& a, const T3__& T_term,
           const T4__& direct_cov, const T5__& random_cov, const int& Z,
           std::ostream* pstream__)  const 
{
return design_matrix_evol(N, evol, a, T_term, direct_cov, random_cov, Z,
         pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T6__, typename T7__, typename T8__, typename T9__, typename T10__,
typename T11__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T6__, stan::promote_args_t<T7__, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::value_type_t<T10__>,
stan::value_type_t<T11__>>>, -1, -1>
varcov_model(const int& N, const T1__& tij_arg__, const T2__& tja_arg__,
             const T3__& ta_arg__, const T4__& random_cov_arg__,
             const int& Z, const T6__& sigma2_y, const T7__& a,
             const T8__& x0_arg__, const T9__& sigma_squared_x_arg__,
             const T10__& beta1_arg__, const T11__& T_term_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          T6__, stan::promote_args_t<T7__,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>,
          stan::value_type_t<T10__>,
          stan::value_type_t<T11__>>>;
  const auto& tij = to_ref(tij_arg__);
  const auto& tja = to_ref(tja_arg__);
  const auto& ta = to_ref(ta_arg__);
  const auto& random_cov = to_ref(random_cov_arg__);
  const auto& x0 = to_ref(x0_arg__);
  const auto& sigma_squared_x = to_ref(sigma_squared_x_arg__);
  const auto& beta1 = to_ref(beta1_arg__);
  const auto& T_term = to_ref(T_term_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 171;
    validate_non_negative_index("sigma2s", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> sigma2s;
    sigma2s = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(sigma2s, DUMMY_VAR__);
    
    current_statement__ = 173;
    validate_non_negative_index("ti", "N", N);
    current_statement__ = 174;
    validate_non_negative_index("ti", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> ti;
    ti = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(ti, DUMMY_VAR__);
    
    current_statement__ = 176;
    validate_non_negative_index("term0", "N", N);
    current_statement__ = 177;
    validate_non_negative_index("term0", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> term0;
    term0 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(term0, DUMMY_VAR__);
    
    current_statement__ = 179;
    validate_non_negative_index("term1", "N", N);
    current_statement__ = 180;
    validate_non_negative_index("term1", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> term1;
    term1 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(term1, DUMMY_VAR__);
    
    current_statement__ = 182;
    validate_non_negative_index("term2", "N", N);
    current_statement__ = 183;
    validate_non_negative_index("term2", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> term2;
    term2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(term2, DUMMY_VAR__);
    
    local_scalar_t__ s1;
    s1 = DUMMY_VAR__;
    
    current_statement__ = 186;
    validate_non_negative_index("beta1sq", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, 1> beta1sq;
    beta1sq = Eigen::Matrix<local_scalar_t__, -1, 1>(Z);
    stan::math::fill(beta1sq, DUMMY_VAR__);
    
    current_statement__ = 188;
    validate_non_negative_index("Vt", "N", N);
    current_statement__ = 189;
    validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
    Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vt, DUMMY_VAR__);
    
    current_statement__ = 192;
    for (int i = 1; i <= Z; ++i) {
      current_statement__ = 191;
      assign(beta1sq, cons_list(index_uni(i), nil_index_list()),
        pow(beta1[(i - 1)], 2), "assigning variable beta1sq");}
    current_statement__ = 202;
    if (logical_neq(sum(random_cov), 0)) {
      current_statement__ = 195;
      s1 = sum(multiply(sigma_squared_x, beta1sq));
      current_statement__ = 196;
      assign(ti, nil_index_list(), rep_matrix(T_term, N),
        "assigning variable ti");
      current_statement__ = 197;
      assign(term0, nil_index_list(),
        elt_multiply(
          multiply(((s1 + sigma2_y) / (2 * a)),
            subtract(1, stan::math::exp(multiply((-2 * a), ta)))),
          stan::math::exp(multiply(-a, tij))), "assigning variable term0");
      current_statement__ = 198;
      assign(term1, nil_index_list(),
        elt_divide(subtract(1, stan::math::exp(multiply(-a, ti))),
          multiply(a, ti)), "assigning variable term1");
      current_statement__ = 199;
      assign(term2, nil_index_list(),
        elt_divide(
          elt_multiply(stan::math::exp(multiply(-a, tja)),
            subtract(1, stan::math::exp(multiply(-a, ti)))), multiply(a, ti)),
        "assigning variable term2");
      current_statement__ = 200;
      assign(Vt, nil_index_list(),
        add(term0,
          multiply(s1,
            subtract(elt_multiply(elt_multiply(ta, term1), transpose(term1)),
              elt_multiply(
                elt_divide(subtract(1, stan::math::exp(multiply(-a, ta))), a),
                add(term2, transpose(term2)))))), "assigning variable Vt");
    } else {
      current_statement__ = 193;
      assign(Vt, nil_index_list(),
        multiply((sigma2_y / (2 * a)),
          elt_multiply(subtract(1, stan::math::exp(multiply((-2 * a), ta))),
            stan::math::exp(multiply(-a, tij)))), "assigning variable Vt");
    }
    current_statement__ = 203;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct varcov_model_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T6__, typename T7__, typename T8__, typename T9__, typename T10__,
typename T11__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, stan::value_type_t<T4__>,
T6__, stan::promote_args_t<T7__, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::value_type_t<T10__>,
stan::value_type_t<T11__>>>, -1, -1>
operator()(const int& N, const T1__& tij, const T2__& tja, const T3__& ta,
           const T4__& random_cov, const int& Z, const T6__& sigma2_y,
           const T7__& a, const T8__& x0, const T9__& sigma_squared_x,
           const T10__& beta1, const T11__& T_term, std::ostream* pstream__)  const 
{
return varcov_model(N, tij, tja, ta, random_cov, Z, sigma2_y, a, x0,
         sigma_squared_x, beta1, T_term, pstream__);
}
};
template <typename T2__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T7__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>>>, -1, -1>
varcov_measurement(const int& N, const int& Z, const T2__& ta_arg__,
                   const T3__& direct_cov_arg__,
                   const T4__& mv_direct_cov_arg__,
                   const T5__& mv_random_cov_arg__,
                   const T6__& sigma_squared_x_arg__, const T7__& beta_arg__,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>>>;
  const auto& ta = to_ref(ta_arg__);
  const auto& direct_cov = to_ref(direct_cov_arg__);
  const auto& mv_direct_cov = to_ref(mv_direct_cov_arg__);
  const auto& mv_random_cov = to_ref(mv_random_cov_arg__);
  const auto& sigma_squared_x = to_ref(sigma_squared_x_arg__);
  const auto& beta = to_ref(beta_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 205;
    validate_non_negative_index("Vxtr", "N", N);
    current_statement__ = 206;
    validate_non_negative_index("Vxtr", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vxtr;
    Vxtr = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vxtr, DUMMY_VAR__);
    
    current_statement__ = 208;
    validate_non_negative_index("Vxtd", "N", N);
    current_statement__ = 209;
    validate_non_negative_index("Vxtd", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vxtd;
    Vxtd = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vxtd, DUMMY_VAR__);
    
    current_statement__ = 211;
    validate_non_negative_index("Vxt", "N", N);
    current_statement__ = 212;
    validate_non_negative_index("Vxt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vxt;
    Vxt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vxt, DUMMY_VAR__);
    
    current_statement__ = 214;
    validate_non_negative_index("Vx", "N", N);
    current_statement__ = 215;
    validate_non_negative_index("Vx", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vx;
    Vx = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vx, DUMMY_VAR__);
    
    current_statement__ = 217;
    validate_non_negative_index("Vu_given_x", "N", N);
    current_statement__ = 218;
    validate_non_negative_index("Vu_given_x", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vu_given_x;
    Vu_given_x = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vu_given_x, DUMMY_VAR__);
    
    current_statement__ = 220;
    validate_non_negative_index("beta2_Vu_given_x", "N", N);
    current_statement__ = 221;
    validate_non_negative_index("beta2_Vu_given_x", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> beta2_Vu_given_x;
    beta2_Vu_given_x = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(beta2_Vu_given_x, DUMMY_VAR__);
    
    current_statement__ = 223;
    validate_non_negative_index("Vu", "N", N);
    current_statement__ = 224;
    validate_non_negative_index("Vu", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vu;
    Vu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vu, DUMMY_VAR__);
    
    current_statement__ = 226;
    validate_non_negative_index("Vur", "N", N);
    current_statement__ = 227;
    validate_non_negative_index("Vur", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vur;
    Vur = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vur, DUMMY_VAR__);
    
    current_statement__ = 229;
    validate_non_negative_index("Vud", "N", N);
    current_statement__ = 230;
    validate_non_negative_index("Vud", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vud;
    Vud = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vud, DUMMY_VAR__);
    
    current_statement__ = 232;
    validate_non_negative_index("sigma_squared_x_rep", "N", N);
    current_statement__ = 233;
    validate_non_negative_index("sigma_squared_x_rep", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> sigma_squared_x_rep;
    sigma_squared_x_rep = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(sigma_squared_x_rep, DUMMY_VAR__);
    
    current_statement__ = 235;
    validate_non_negative_index("P", "N", N);
    current_statement__ = 236;
    validate_non_negative_index("P", "Z", Z);
    Eigen::Matrix<local_scalar_t__, -1, -1> P;
    P = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
    stan::math::fill(P, DUMMY_VAR__);
    
    current_statement__ = 238;
    assign(Vur, nil_index_list(), rep_matrix(0, N, N),
      "assigning variable Vur");
    current_statement__ = 239;
    assign(Vud, nil_index_list(), rep_matrix(0, N, N),
      "assigning variable Vud");
    current_statement__ = 240;
    assign(Vxtd, nil_index_list(), rep_matrix(0, N, N),
      "assigning variable Vxtd");
    current_statement__ = 241;
    assign(Vxtr, nil_index_list(), rep_matrix(0, N, N),
      "assigning variable Vxtr");
    current_statement__ = 245;
    if (logical_neq(sum(mv_random_cov), 0)) {
      current_statement__ = 242;
      assign(Vur, nil_index_list(), diag_matrix(to_vector(mv_random_cov)),
        "assigning variable Vur");
      current_statement__ = 243;
      assign(Vxtr, nil_index_list(),
        multiply(ta,
          rvalue(sigma_squared_x,
            cons_list(index_uni(1),
              cons_list(index_uni(1), nil_index_list())), "sigma_squared_x")),
        "assigning variable Vxtr");
    } 
    current_statement__ = 249;
    if (logical_neq(sum(mv_direct_cov), 0)) {
      current_statement__ = 246;
      assign(Vud, nil_index_list(),
        diag_matrix(
          to_vector(
            rvalue(mv_direct_cov,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "mv_direct_cov"))),
        "assigning variable Vud");
      current_statement__ = 247;
      assign(Vxtd, nil_index_list(),
        subtract(
          diag_matrix(
            rep_vector(
              variance(
                rvalue(direct_cov,
                  cons_list(index_omni(),
                    cons_list(index_uni(1), nil_index_list())), "direct_cov")),
              N)), Vud), "assigning variable Vxtd");
    } 
    current_statement__ = 250;
    assign(Vxt, nil_index_list(), add(Vxtd, Vxtr), "assigning variable Vxt");
    current_statement__ = 251;
    assign(Vu, nil_index_list(), add(Vud, Vur), "assigning variable Vu");
    current_statement__ = 252;
    assign(Vx, nil_index_list(), add(Vxt, Vu), "assigning variable Vx");
    current_statement__ = 253;
    assign(Vu_given_x, nil_index_list(),
      subtract(Vu, multiply(multiply(Vu, inverse(Vx)), Vu)),
      "assigning variable Vu_given_x");
    current_statement__ = 254;
    assign(beta2_Vu_given_x, nil_index_list(),
      multiply(Vu_given_x, square(beta[(1 - 1)])),
      "assigning variable beta2_Vu_given_x");
    current_statement__ = 255;
    return beta2_Vu_given_x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct varcov_measurement_functor__ {
template <typename T2__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T7__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>>>, -1, -1>
operator()(const int& N, const int& Z, const T2__& ta,
           const T3__& direct_cov, const T4__& mv_direct_cov,
           const T5__& mv_random_cov, const T6__& sigma_squared_x,
           const T7__& beta, std::ostream* pstream__)  const 
{
return varcov_measurement(N, Z, ta, direct_cov, mv_direct_cov, mv_random_cov,
         sigma_squared_x, beta, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_blouchOU_v1 final : public model_base_crtp<model_blouchOU_v1> {
 private:
  int N;
  int Z;
  Eigen::Matrix<double, -1, 1> Y;
  Eigen::Matrix<double, -1, 1> mv_response;
  Eigen::Matrix<double, -1, -1> direct_cov;
  Eigen::Matrix<double, -1, -1> mv_direct_cov;
  Eigen::Matrix<double, -1, -1> random_cov;
  Eigen::Matrix<double, -1, -1> mv_random_cov;
  Eigen::Matrix<double, -1, -1> ta;
  Eigen::Matrix<double, -1, 1> T_term;
  Eigen::Matrix<double, -1, -1> tia;
  Eigen::Matrix<double, -1, -1> tja;
  Eigen::Matrix<double, -1, -1> tij;
  Eigen::Matrix<double, -1, -1> brownian_mean;
  Eigen::Matrix<double, -1, -1> sigma_squared_x;
  double ols_intercept;
  double ols_slope;
  int X_evol_2dim__;
  int beta_evol_1dim__;
 
 public:
  ~model_blouchOU_v1() { }
  
  inline std::string model_name() const final { return "model_blouchOU_v1"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_blouchOU_v1(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_blouchOU_v1_namespace::model_blouchOU_v1";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 79;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 79;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization","Z","int",
          context__.to_vec());
      Z = std::numeric_limits<int>::min();
      
      current_statement__ = 80;
      Z = context__.vals_i("Z")[(1 - 1)];
      current_statement__ = 81;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(N));
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 82;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 82;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 82;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 83;
      validate_non_negative_index("mv_response", "N", N);
      current_statement__ = 84;
      context__.validate_dims("data initialization","mv_response","double",
          context__.to_vec(N));
      mv_response = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mv_response, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mv_response_flat__;
        current_statement__ = 84;
        assign(mv_response_flat__, nil_index_list(),
          context__.vals_r("mv_response"),
          "assigning variable mv_response_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 84;
          assign(mv_response, cons_list(index_uni(sym1__), nil_index_list()),
            mv_response_flat__[(pos__ - 1)], "assigning variable mv_response");
          current_statement__ = 84;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 85;
      validate_non_negative_index("direct_cov", "N", N);
      current_statement__ = 86;
      validate_non_negative_index("direct_cov", "Z", Z);
      current_statement__ = 87;
      context__.validate_dims("data initialization","direct_cov","double",
          context__.to_vec(N, Z));
      direct_cov = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(direct_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> direct_cov_flat__;
        current_statement__ = 87;
        assign(direct_cov_flat__, nil_index_list(),
          context__.vals_r("direct_cov"),
          "assigning variable direct_cov_flat__");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 87;
            assign(direct_cov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              direct_cov_flat__[(pos__ - 1)], "assigning variable direct_cov");
            current_statement__ = 87;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 88;
      validate_non_negative_index("mv_direct_cov", "N", N);
      current_statement__ = 89;
      validate_non_negative_index("mv_direct_cov", "Z", Z);
      current_statement__ = 90;
      context__.validate_dims("data initialization","mv_direct_cov","double",
          context__.to_vec(N, Z));
      mv_direct_cov = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(mv_direct_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mv_direct_cov_flat__;
        current_statement__ = 90;
        assign(mv_direct_cov_flat__, nil_index_list(),
          context__.vals_r("mv_direct_cov"),
          "assigning variable mv_direct_cov_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 90;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 90;
            assign(mv_direct_cov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              mv_direct_cov_flat__[(pos__ - 1)],
              "assigning variable mv_direct_cov");
            current_statement__ = 90;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 91;
      validate_non_negative_index("random_cov", "N", N);
      current_statement__ = 92;
      validate_non_negative_index("random_cov", "Z", Z);
      current_statement__ = 93;
      context__.validate_dims("data initialization","random_cov","double",
          context__.to_vec(N, Z));
      random_cov = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(random_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> random_cov_flat__;
        current_statement__ = 93;
        assign(random_cov_flat__, nil_index_list(),
          context__.vals_r("random_cov"),
          "assigning variable random_cov_flat__");
        current_statement__ = 93;
        pos__ = 1;
        current_statement__ = 93;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 93;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 93;
            assign(random_cov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              random_cov_flat__[(pos__ - 1)], "assigning variable random_cov");
            current_statement__ = 93;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 94;
      validate_non_negative_index("mv_random_cov", "N", N);
      current_statement__ = 95;
      validate_non_negative_index("mv_random_cov", "Z", Z);
      current_statement__ = 96;
      context__.validate_dims("data initialization","mv_random_cov","double",
          context__.to_vec(N, Z));
      mv_random_cov = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(mv_random_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mv_random_cov_flat__;
        current_statement__ = 96;
        assign(mv_random_cov_flat__, nil_index_list(),
          context__.vals_r("mv_random_cov"),
          "assigning variable mv_random_cov_flat__");
        current_statement__ = 96;
        pos__ = 1;
        current_statement__ = 96;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 96;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 96;
            assign(mv_random_cov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              mv_random_cov_flat__[(pos__ - 1)],
              "assigning variable mv_random_cov");
            current_statement__ = 96;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 97;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 98;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 99;
      context__.validate_dims("data initialization","ta","double",
          context__.to_vec(N, N));
      ta = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 99;
        assign(ta_flat__, nil_index_list(), context__.vals_r("ta"),
          "assigning variable ta_flat__");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 99;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 99;
            assign(ta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ta_flat__[(pos__ - 1)], "assigning variable ta");
            current_statement__ = 99;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 100;
      validate_non_negative_index("T_term", "N", N);
      current_statement__ = 101;
      context__.validate_dims("data initialization","T_term","double",
          context__.to_vec(N));
      T_term = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(T_term, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> T_term_flat__;
        current_statement__ = 101;
        assign(T_term_flat__, nil_index_list(), context__.vals_r("T_term"),
          "assigning variable T_term_flat__");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 101;
          assign(T_term, cons_list(index_uni(sym1__), nil_index_list()),
            T_term_flat__[(pos__ - 1)], "assigning variable T_term");
          current_statement__ = 101;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 102;
      validate_non_negative_index("tia", "N", N);
      current_statement__ = 103;
      validate_non_negative_index("tia", "N", N);
      current_statement__ = 104;
      context__.validate_dims("data initialization","tia","double",
          context__.to_vec(N, N));
      tia = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tia, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tia_flat__;
        current_statement__ = 104;
        assign(tia_flat__, nil_index_list(), context__.vals_r("tia"),
          "assigning variable tia_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 104;
            assign(tia,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tia_flat__[(pos__ - 1)], "assigning variable tia");
            current_statement__ = 104;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 105;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 106;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 107;
      context__.validate_dims("data initialization","tja","double",
          context__.to_vec(N, N));
      tja = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tja, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tja_flat__;
        current_statement__ = 107;
        assign(tja_flat__, nil_index_list(), context__.vals_r("tja"),
          "assigning variable tja_flat__");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 107;
            assign(tja,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tja_flat__[(pos__ - 1)], "assigning variable tja");
            current_statement__ = 107;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 108;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 109;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 110;
      context__.validate_dims("data initialization","tij","double",
          context__.to_vec(N, N));
      tij = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tij, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 110;
        assign(tij_flat__, nil_index_list(), context__.vals_r("tij"),
          "assigning variable tij_flat__");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 110;
            assign(tij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tij_flat__[(pos__ - 1)], "assigning variable tij");
            current_statement__ = 110;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 111;
      validate_non_negative_index("brownian_mean", "Z", Z);
      current_statement__ = 112;
      context__.validate_dims("data initialization","brownian_mean","double",
          context__.to_vec(1, Z));
      brownian_mean = Eigen::Matrix<double, -1, -1>(1, Z);
      stan::math::fill(brownian_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> brownian_mean_flat__;
        current_statement__ = 112;
        assign(brownian_mean_flat__, nil_index_list(),
          context__.vals_r("brownian_mean"),
          "assigning variable brownian_mean_flat__");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 112;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 112;
            assign(brownian_mean,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              brownian_mean_flat__[(pos__ - 1)],
              "assigning variable brownian_mean");
            current_statement__ = 112;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 113;
      validate_non_negative_index("sigma_squared_x", "Z", Z);
      current_statement__ = 114;
      context__.validate_dims("data initialization","sigma_squared_x",
          "double",context__.to_vec(1, Z));
      sigma_squared_x = Eigen::Matrix<double, -1, -1>(1, Z);
      stan::math::fill(sigma_squared_x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_squared_x_flat__;
        current_statement__ = 114;
        assign(sigma_squared_x_flat__, nil_index_list(),
          context__.vals_r("sigma_squared_x"),
          "assigning variable sigma_squared_x_flat__");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 114;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 114;
            assign(sigma_squared_x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              sigma_squared_x_flat__[(pos__ - 1)],
              "assigning variable sigma_squared_x");
            current_statement__ = 114;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 115;
      context__.validate_dims("data initialization","ols_intercept","double",
          context__.to_vec());
      ols_intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 115;
      ols_intercept = context__.vals_r("ols_intercept")[(1 - 1)];
      current_statement__ = 116;
      context__.validate_dims("data initialization","ols_slope","double",
          context__.to_vec());
      ols_slope = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 116;
      ols_slope = context__.vals_r("ols_slope")[(1 - 1)];
      current_statement__ = 117;
      validate_non_negative_index("beta", "Z", Z);
      current_statement__ = 118;
      validate_non_negative_index("X_evol", "N", N);
      current_statement__ = 119;
      X_evol_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 119;
      X_evol_2dim__ = (Z + 1);
      current_statement__ = 119;
      validate_non_negative_index("X_evol", "Z + 1", X_evol_2dim__);
      current_statement__ = 120;
      beta_evol_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 120;
      beta_evol_1dim__ = (Z + 1);
      current_statement__ = 120;
      validate_non_negative_index("beta_evol", "Z + 1", beta_evol_1dim__);
      current_statement__ = 121;
      validate_non_negative_index("V_ev", "N", N);
      current_statement__ = 122;
      validate_non_negative_index("V_ev", "N", N);
      current_statement__ = 123;
      validate_non_negative_index("V_me_ev", "N", N);
      current_statement__ = 124;
      validate_non_negative_index("V_me_ev", "N", N);
      current_statement__ = 125;
      validate_non_negative_index("Vt_ev", "N", N);
      current_statement__ = 126;
      validate_non_negative_index("Vt_ev", "N", N);
      current_statement__ = 127;
      validate_non_negative_index("pred_mean", "N", N);
      current_statement__ = 128;
      validate_non_negative_index("X_opt", "N", N);
      current_statement__ = 129;
      validate_non_negative_index("X_opt", "Z", Z);
      current_statement__ = 130;
      validate_non_negative_index("V_final", "N", N);
      current_statement__ = 131;
      validate_non_negative_index("V_final", "N", N);
      current_statement__ = 132;
      validate_non_negative_index("V_me_final", "N", N);
      current_statement__ = 133;
      validate_non_negative_index("V_me_final", "N", N);
      current_statement__ = 134;
      validate_non_negative_index("Vt_final", "N", N);
      current_statement__ = 135;
      validate_non_negative_index("Vt_final", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += Z;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_blouchOU_v1_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      current_statement__ = 1;
      a = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        a = stan::math::lb_constrain(a, 0, lp__);
      } else {
        current_statement__ = 1;
        a = stan::math::lb_constrain(a, 0);
      }
      local_scalar_t__ sigma2_y;
      sigma2_y = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma2_y = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma2_y = stan::math::lub_constrain(sigma2_y, 0, (variance(Y) * 4),
                     lp__);
      } else {
        current_statement__ = 2;
        sigma2_y = stan::math::lub_constrain(sigma2_y, 0, (variance(Y) * 4));
      }
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 3;
      alpha = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(Z);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 4;
      beta = in__.vector(Z);
      Eigen::Matrix<local_scalar_t__, -1, -1> X_evol;
      X_evol = Eigen::Matrix<local_scalar_t__, -1, -1>(N, X_evol_2dim__);
      stan::math::fill(X_evol, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_evol;
      beta_evol = Eigen::Matrix<local_scalar_t__, -1, 1>(beta_evol_1dim__);
      stan::math::fill(beta_evol, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> V_ev;
      V_ev = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(V_ev, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> V_me_ev;
      V_me_ev = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(V_me_ev, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Vt_ev;
      Vt_ev = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(Vt_ev, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(Vt_ev, nil_index_list(),
        varcov_model(N, tij, tja, ta, random_cov, Z, sigma2_y, a,
          brownian_mean, sigma_squared_x, beta, T_term, pstream__),
        "assigning variable Vt_ev");
      current_statement__ = 17;
      if ((primitive_value(logical_neq(sum(mv_direct_cov), 0)) ||
          primitive_value(logical_neq(sum(mv_random_cov), 0)))) {
        current_statement__ = 14;
        assign(V_me_ev, nil_index_list(),
          varcov_measurement(N, Z, ta, direct_cov, mv_direct_cov,
            mv_random_cov, sigma_squared_x, beta, pstream__),
          "assigning variable V_me_ev");
        current_statement__ = 15;
        assign(V_ev, nil_index_list(),
          add(add(Vt_ev, V_me_ev), diag_matrix(mv_response)),
          "assigning variable V_ev");
      } else {
        current_statement__ = 11;
        assign(V_me_ev, nil_index_list(), rep_matrix(0, N, N),
          "assigning variable V_me_ev");
        current_statement__ = 12;
        assign(V_ev, nil_index_list(), Vt_ev, "assigning variable V_ev");
      }
      current_statement__ = 18;
      assign(X_evol, nil_index_list(),
        design_matrix_evol(N, 1, a, T_term, direct_cov, random_cov,
          Z, pstream__), "assigning variable X_evol");
      current_statement__ = 19;
      assign(beta_evol, nil_index_list(),
        multiply(
          inverse(
            multiply(multiply(transpose(X_evol), inverse(V_ev)), X_evol)),
          multiply(multiply(transpose(X_evol), inverse(V_ev)), Y)),
        "assigning variable beta_evol");
      {
        current_statement__ = 47;
        validate_non_negative_index("V", "N", N);
        current_statement__ = 48;
        validate_non_negative_index("V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> V;
        V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(V, DUMMY_VAR__);
        
        current_statement__ = 50;
        validate_non_negative_index("Vt", "N", N);
        current_statement__ = 51;
        validate_non_negative_index("Vt", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
        Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(Vt, DUMMY_VAR__);
        
        current_statement__ = 53;
        validate_non_negative_index("V_me", "N", N);
        current_statement__ = 54;
        validate_non_negative_index("V_me", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> V_me;
        V_me = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(V_me, DUMMY_VAR__);
        
        current_statement__ = 56;
        validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 58;
        validate_non_negative_index("X", "N", N);
        current_statement__ = 59;
        validate_non_negative_index("X", "Z", Z);
        Eigen::Matrix<local_scalar_t__, -1, -1> X;
        X = Eigen::Matrix<local_scalar_t__, -1, -1>(N, Z);
        stan::math::fill(X, DUMMY_VAR__);
        
        current_statement__ = 61;
        validate_non_negative_index("L_V", "N", N);
        current_statement__ = 62;
        validate_non_negative_index("L_V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_V;
        L_V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(L_V, DUMMY_VAR__);
        
        current_statement__ = 64;
        lp_accum__.add(lognormal_lpdf<propto__>(a, 1.0, 1.0));
        current_statement__ = 65;
        lp_accum__.add(normal_lpdf<propto__>(alpha, ols_intercept, 0.5));
        current_statement__ = 66;
        lp_accum__.add(normal_lpdf<propto__>(beta, ols_slope, 0.4));
        current_statement__ = 67;
        assign(X, nil_index_list(),
          design_matrix(N, 0, a, T_term, direct_cov, random_cov,
            Z, pstream__), "assigning variable X");
        current_statement__ = 68;
        assign(Vt, nil_index_list(),
          varcov_model(N, tij, tja, ta, random_cov, Z, sigma2_y, a,
            brownian_mean, sigma_squared_x, beta, T_term, pstream__),
          "assigning variable Vt");
        current_statement__ = 75;
        if ((primitive_value(logical_neq(sum(mv_direct_cov), 0)) ||
            primitive_value(logical_neq(sum(mv_random_cov), 0)))) {
          current_statement__ = 72;
          assign(V_me, nil_index_list(),
            varcov_measurement(N, Z, ta, direct_cov, mv_direct_cov,
              mv_random_cov, sigma_squared_x, beta, pstream__),
            "assigning variable V_me");
          current_statement__ = 73;
          assign(V, nil_index_list(),
            add(add(Vt, V_me), diag_matrix(mv_response)),
            "assigning variable V");
        } else {
          current_statement__ = 69;
          assign(V_me, nil_index_list(), rep_matrix(0, N, N),
            "assigning variable V_me");
          current_statement__ = 70;
          assign(V, nil_index_list(), Vt, "assigning variable V");
        }
        current_statement__ = 76;
        assign(L_V, nil_index_list(), cholesky_decompose(V),
          "assigning variable L_V");
        current_statement__ = 77;
        assign(mu, nil_index_list(), add(multiply(X, beta), alpha),
          "assigning variable mu");
        current_statement__ = 78;
        lp_accum__.add(multi_normal_cholesky_lpdf<propto__>(Y, mu, L_V));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_blouchOU_v1_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = in__.scalar();
      current_statement__ = 1;
      a = stan::math::lb_constrain(a, 0);
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma2_y = in__.scalar();
      current_statement__ = 2;
      sigma2_y = stan::math::lub_constrain(sigma2_y, 0, (variance(Y) * 4));
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = in__.scalar();
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(Z);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      beta = in__.vector(Z);
      Eigen::Matrix<double, -1, -1> X_evol;
      X_evol = Eigen::Matrix<double, -1, -1>(N, X_evol_2dim__);
      stan::math::fill(X_evol, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta_evol;
      beta_evol = Eigen::Matrix<double, -1, 1>(beta_evol_1dim__);
      stan::math::fill(beta_evol, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> V_ev;
      V_ev = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V_ev, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> V_me_ev;
      V_me_ev = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V_me_ev, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Vt_ev;
      Vt_ev = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(Vt_ev, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(a);
      vars__.emplace_back(sigma2_y);
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      assign(Vt_ev, nil_index_list(),
        varcov_model(N, tij, tja, ta, random_cov, Z, sigma2_y, a,
          brownian_mean, sigma_squared_x, beta, T_term, pstream__),
        "assigning variable Vt_ev");
      current_statement__ = 17;
      if ((primitive_value(logical_neq(sum(mv_direct_cov), 0)) ||
          primitive_value(logical_neq(sum(mv_random_cov), 0)))) {
        current_statement__ = 14;
        assign(V_me_ev, nil_index_list(),
          varcov_measurement(N, Z, ta, direct_cov, mv_direct_cov,
            mv_random_cov, sigma_squared_x, beta, pstream__),
          "assigning variable V_me_ev");
        current_statement__ = 15;
        assign(V_ev, nil_index_list(),
          add(add(Vt_ev, V_me_ev), diag_matrix(mv_response)),
          "assigning variable V_ev");
      } else {
        current_statement__ = 11;
        assign(V_me_ev, nil_index_list(), rep_matrix(0, N, N),
          "assigning variable V_me_ev");
        current_statement__ = 12;
        assign(V_ev, nil_index_list(), Vt_ev, "assigning variable V_ev");
      }
      current_statement__ = 18;
      assign(X_evol, nil_index_list(),
        design_matrix_evol(N, 1, a, T_term, direct_cov, random_cov,
          Z, pstream__), "assigning variable X_evol");
      current_statement__ = 19;
      assign(beta_evol, nil_index_list(),
        multiply(
          inverse(
            multiply(multiply(transpose(X_evol), inverse(V_ev)), X_evol)),
          multiply(multiply(transpose(X_evol), inverse(V_ev)), Y)),
        "assigning variable beta_evol");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= X_evol_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(X_evol,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "X_evol"));
          }}
        for (int sym1__ = 1; sym1__ <= beta_evol_1dim__; ++sym1__) {
          vars__.emplace_back(beta_evol[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(V_ev,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "V_ev"));}
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(V_me_ev,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "V_me_ev"));
          }}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(Vt_ev,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "Vt_ev"));
          }}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> pred_mean;
      pred_mean = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(pred_mean, std::numeric_limits<double>::quiet_NaN());
      
      double grand_mean;
      grand_mean = std::numeric_limits<double>::quiet_NaN();
      
      double sst;
      sst = std::numeric_limits<double>::quiet_NaN();
      
      double sse;
      sse = std::numeric_limits<double>::quiet_NaN();
      
      double r_squared;
      r_squared = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, -1> X_opt;
      X_opt = Eigen::Matrix<double, -1, -1>(N, Z);
      stan::math::fill(X_opt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> V_final;
      V_final = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V_final, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> V_me_final;
      V_me_final = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V_me_final, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Vt_final;
      Vt_final = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(Vt_final, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      hl = (stan::math::log(2) / a);
      current_statement__ = 32;
      vy = (sigma2_y / (2 * a));
      current_statement__ = 33;
      assign(X_opt, nil_index_list(),
        design_matrix(N, 0, a, T_term, direct_cov, random_cov, Z, pstream__),
        "assigning variable X_opt");
      current_statement__ = 34;
      assign(Vt_final, nil_index_list(),
        varcov_model(N, tij, tja, ta, random_cov, Z, sigma2_y, a,
          brownian_mean, sigma_squared_x, beta, T_term, pstream__),
        "assigning variable Vt_final");
      current_statement__ = 41;
      if ((primitive_value(logical_neq(sum(mv_direct_cov), 0)) ||
          primitive_value(logical_neq(sum(mv_random_cov), 0)))) {
        current_statement__ = 38;
        assign(V_me_final, nil_index_list(),
          varcov_measurement(N, Z, ta, direct_cov, mv_direct_cov,
            mv_random_cov, sigma_squared_x, beta, pstream__),
          "assigning variable V_me_final");
        current_statement__ = 39;
        assign(V_final, nil_index_list(),
          add(add(Vt_final, V_me_final), diag_matrix(mv_response)),
          "assigning variable V_final");
      } else {
        current_statement__ = 35;
        assign(V_me_final, nil_index_list(), rep_matrix(0, N, N),
          "assigning variable V_me_final");
        current_statement__ = 36;
        assign(V_final, nil_index_list(), Vt_final,
          "assigning variable V_final");
      }
      current_statement__ = 42;
      assign(pred_mean, nil_index_list(), add(multiply(X_opt, beta), alpha),
        "assigning variable pred_mean");
      current_statement__ = 43;
      grand_mean = (multiply(
                      multiply(transpose(rep_vector(1, N)), inverse(V_final)),
                      Y) / sum(inverse(V_final)));
      current_statement__ = 44;
      sst = multiply(
              multiply(transpose(subtract(Y, grand_mean)), inverse(V_final)),
              subtract(Y, grand_mean));
      current_statement__ = 45;
      sse = multiply(
              multiply(transpose(subtract(Y, pred_mean)), inverse(V_final)),
              subtract(Y, pred_mean));
      current_statement__ = 46;
      r_squared = ((sst - sse) / sst);
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "vy", vy, 0);
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "hl", hl, 0);
      vars__.emplace_back(vy);
      vars__.emplace_back(hl);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(pred_mean[(sym1__ - 1)]);}
      vars__.emplace_back(grand_mean);
      vars__.emplace_back(sst);
      vars__.emplace_back(sse);
      vars__.emplace_back(r_squared);
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(X_opt,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X_opt"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V_final,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "V_final"));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V_me_final,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "V_me_final"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(Vt_final,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Vt_final"));
        }}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = context__.vals_r("a")[(1 - 1)];
      double a_free__;
      a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a_free__ = stan::math::lb_free(a, 0);
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma2_y = context__.vals_r("sigma2_y")[(1 - 1)];
      double sigma2_y_free__;
      sigma2_y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma2_y_free__ = stan::math::lub_free(sigma2_y, 0, (variance(Y) * 4));
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(Z);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 4;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
          current_statement__ = 4;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(a_free__);
      vars__.emplace_back(sigma2_y_free__);
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("a");
    names__.emplace_back("sigma2_y");
    names__.emplace_back("alpha");
    names__.emplace_back("beta");
    names__.emplace_back("X_evol");
    names__.emplace_back("beta_evol");
    names__.emplace_back("V_ev");
    names__.emplace_back("V_me_ev");
    names__.emplace_back("Vt_ev");
    names__.emplace_back("vy");
    names__.emplace_back("hl");
    names__.emplace_back("pred_mean");
    names__.emplace_back("grand_mean");
    names__.emplace_back("sst");
    names__.emplace_back("sse");
    names__.emplace_back("r_squared");
    names__.emplace_back("X_opt");
    names__.emplace_back("V_final");
    names__.emplace_back("V_me_final");
    names__.emplace_back("Vt_final");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Z)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(X_evol_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(beta_evol_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(Z)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "sigma2_y");
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= X_evol_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_evol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= beta_evol_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_evol" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_me_ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt_ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "hl");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_mean" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "grand_mean");
      param_names__.emplace_back(std::string() + "sst");
      param_names__.emplace_back(std::string() + "sse");
      param_names__.emplace_back(std::string() + "r_squared");
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_opt" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_me_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "sigma2_y");
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= X_evol_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_evol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= beta_evol_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_evol" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_me_ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt_ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "hl");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_mean" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "grand_mean");
      param_names__.emplace_back(std::string() + "sst");
      param_names__.emplace_back(std::string() + "sse");
      param_names__.emplace_back(std::string() + "r_squared");
      for (int sym1__ = 1; sym1__ <= Z; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_opt" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_me_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << Z << "},\"block\":\"parameters\"},{\"name\":\"X_evol\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << X_evol_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_evol\",\"type\":{\"name\":\"vector\",\"length\":" << beta_evol_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"V_ev\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"V_me_ev\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"Vt_ev\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"pred_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"grand_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sst\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sse\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"r_squared\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"X_opt\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"V_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"V_me_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Vt_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << Z << "},\"block\":\"parameters\"},{\"name\":\"X_evol\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << X_evol_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_evol\",\"type\":{\"name\":\"vector\",\"length\":" << beta_evol_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"V_ev\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"V_me_ev\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"Vt_ev\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"pred_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"grand_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sst\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sse\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"r_squared\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"X_opt\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << Z << "},\"block\":\"generated_quantities\"},{\"name\":\"V_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"V_me_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Vt_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_blouchOU_v1_namespace::model_blouchOU_v1;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU_v1_namespace::profiles__;
}
#endif
#endif
