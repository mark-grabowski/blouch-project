[{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-Models-Prediction","text":"load R packages used setup data Blouch, make figures post-analysis, etc. includes Rstan, R interface Stan. used Rstan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\") #library(blouch)  library(blouch) load_all() #> ℹ Loading blouch ## Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)  #remotes::install_github(\"stan-dev/rstan\", ref = \"develop\", subdir = \"rstan/rstan\")"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"OU-Models-Prediction","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"Setup","what":"Combine data and tree","title":"OU-Models-Prediction","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"classical-regression","dir":"Articles","previous_headings":"","what":"Classical Regression","title":"OU-Models-Prediction","text":"assign one taxa fossil species predicted, use Classical Regression predict unknown value based combination phylogeny allometry. regression Y - brain size X body size, predicting fossil X (body size) based Y (brain size). Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata$dat$Status<-\"Extant\" #Label all species as extant ruminant.trdata$dat$Status[1]<-\"Extinct\" #Make one extinct n.fos<-1  #Classical Regression - Predicting X using regression of Y on X ruminant.trdata$dat$body_mass_g_log_mean[1]<-0 #Assign this species fake body mass ruminant.trdata$dat$body_se_squared[1]<-0 #And ME  ruminant.extant.trdata<-filter(ruminant.trdata, (Status == \"Extant\")) #Only non-fossil species  #Mean Standardized based on whether fossil is included in dataset  #Classical regression - predicting brain size - X ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean[-n.fos]) ruminant.extant.trdata$dat$bodycentered<-ruminant.extant.trdata$dat$body_mass_g_log_mean-mean(ruminant.extant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"rescale-tree","dir":"Articles","previous_headings":"Classical Regression","what":"Rescale Tree","title":"OU-Models-Prediction","text":"Next, rescale tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1  l.tree<-max(branching.times(ruminant.extant.trdata$phy)) ruminant.extant.trdata$phy$edge.length<-ruminant.extant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.extant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"Classical Regression","what":"Running Blouch Data Setup Function","title":"OU-Models-Prediction","text":"finally setting dataset run Blouch, using blouchOUPredict.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models. first trait adapting towards second adaptive model.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUPredict.setup.v1(ruminant.extant.trdata,ruminant.trdata,names.traits,classical=1) #> [1] \"Fossil Species # 1\"  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"explore-priors","dir":"Articles","previous_headings":"","what":"Explore Priors","title":"OU-Models-Prediction","text":"Priors must set manually Stan Blouch code (e.g. blouchOUPredict_v1.stan), use priors analysis OU-Models vignette. Go back look vignette need explore effect priors - use default values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"direct-effect-model-for-prediction","dir":"Articles","previous_headings":"","what":"Direct Effect Model for Prediction","title":"OU-Models-Prediction","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. using model predict unknown values assuming allometric relationship may valid prediction adaptive relationship.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"run-model","dir":"Articles","previous_headings":"Direct Effect Model for Prediction","what":"Run Model","title":"OU-Models-Prediction","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.fos.direct<- rstan::sampling(stanmodels$blouchOUPredict_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),save_warmup=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Direct Effect Model for Prediction","what":"Parameter Estimates","title":"OU-Models-Prediction","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. alpha intercept beta slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y, root mean square error predictions including effects phylogeny adpatation predictions RMSE, root mean square error based prediction using regression line RMSE_mu, finally fossil/unknown prediction mean(s) X_pred_fos_means. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"print(fit.fos.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\",\"RMSE\",\"RMSE_mu\",\"X_pred_fos_means\")) #> Inference for Stan model: blouchOUPredict_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> a                    5.74    0.27 8.94  0.40  1.34  2.73  6.03 30.85  1101    1 #> hl                   0.42    0.02 0.62  0.02  0.11  0.25  0.52  1.74  1408    1 #> alpha                5.07    0.00 0.04  4.99  5.04  5.06  5.09  5.15  1636    1 #> beta[1]              0.57    0.00 0.02  0.53  0.56  0.57  0.58  0.61  2285    1 #> r_squared            0.96    0.00 0.00  0.95  0.96  0.96  0.97  0.97  1163    1 #> sigma2_y             0.15    0.01 0.23  0.02  0.04  0.07  0.16  0.81  1076    1 #> RMSE                 0.29    0.00 0.03  0.24  0.28  0.29  0.31  0.35  3140    1 #> RMSE_mu              0.27    0.00 0.02  0.26  0.26  0.26  0.27  0.32  1251    1 #> X_pred_fos_means[1] -0.47    0.00 0.17 -0.82 -0.59 -0.47 -0.36 -0.13  3231    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 14:59:50 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  posterior.fit.fos.direct <- rstan::extract(fit.fos.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"Direct Effect Model for Prediction","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Prediction","text":"can look procedures using standard trace density plots Rstan","code":"par(mfrow = c(1,3))    traceplot(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) #3 X 8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-Models-Prediction","text":"Let’s make plots results ### Load Plot Packages","code":"library(ggsci) library(ggplot2) library(plotly) #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"data-setup-for-plots","dir":"Articles","previous_headings":"Plots","what":"Data Setup for Plots","title":"OU-Models-Prediction","text":"","code":"old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  fos.index<-which(ruminant.trdata$dat$Status==\"Extinct\") print(paste(\"Fossil Species #\",fos.index)) #> [1] \"Fossil Species # 1\" extant.index<-which(ruminant.trdata$dat$Status==\"Extant\")  body.predictions<-apply(posterior.fit.fos.direct$X_pred_fos_means,2,mean) body.predictions.extant<-apply(posterior.fit.fos.direct$X_pred_extant_means,2,mean)  extant.data<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[-fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[-fos.index],log_body_pred = body.predictions.extant,log_body = ruminant.trdata$dat$bodycentered[-fos.index],Status=\"Extant\")  fos.predictions<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[fos.index], log_body_pred = body.predictions[fos.index],log_body=NA,Status=\"Extinct\")           merged.data<-rbind(extant.data,fos.predictions)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"make-plots","dir":"Articles","previous_headings":"Plots","what":"Make Plots","title":"OU-Models-Prediction","text":"","code":"brbo.plot<-ggplot(merged.data,aes(y=log_brain))+ geom_point(aes(x=log_body_pred,color=Status),size=2.5,alpha=0.8)+ geom_point(aes(x=log_body),size=2.0,alpha=0.4)+ geom_abline(intercept=mean(posterior.fit.fos.direct$alpha),slope = mean(posterior.fit.fos.direct$beta),lty=2)+ theme_bw()+ theme(legend.position=\"bottom\")+ #5X5 ylab(\"log Brain Mass (g)\")+   xlab(\"log Body Mass (g)\")  #+theme(legend. position = \"none\") brbo.plot+scale_color_aaas() #> Warning: Removed 1 rows containing missing values (geom_point). #Export 5.25X5 PDF"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"inverse-regression","dir":"Articles","previous_headings":"","what":"Inverse Regression","title":"OU-Models-Prediction","text":"assign one taxa fossil species predicted, use Inverse Regression predict unknown value based combination phylogeny allometry. regression Y - brain size X body size, predicting fossil Y (brain mass) based X (body mass). Finally mean scale X data (body mass) average across species 0.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"combine-data-and-tree-1","dir":"Articles","previous_headings":"Inverse Regression","what":"Combine data and tree","title":"OU-Models-Prediction","text":"","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  ruminant.trdata #Full dataset #> $phy  #>  #> Phylogenetic tree with 43 tips and 42 internal nodes. #>  #> Tip labels: #>   Antilocapra_americana, Addax_nasomaculatus, Aepyceros_melampus, Alcelaphus_buselaphus_buselaphus, Antidorcas_marsupialis, Antilope_cervicapra, ... #> Node labels: #>   MF, MF, MF, MF, MF, MF, ... #>  #> Rooted; includes branch lengths. #>  #> $dat  #> # A tibble: 43 × 10 #>    brain_mass_g_log_… brain_se_squared n_brain body_mass_g_log_… body_se_squared #>                 <dbl>            <dbl>   <int>             <dbl>           <dbl> #>  1               4.80         0.0109         1             11.0          0.0426  #>  2               5.30         0.00547        2             11.6          0.0213  #>  3               5.15         0.000995      11             10.9          0.00387 #>  4               5.69         0.00219        5             11.9          0.00852 #>  5               4.91         0.000842      13             10.5          0.00328 #>  6               4.77         0.0109         1             10.4          0.0426  #>  7               4.42         0.0109         1              9.43         0.0426  #>  8               4.42         0.00365        3              9.58         0.0213  #>  9               3.52         0.00137        8              8.46         0.00533 #> 10               5.72         0.0109         1             11.9          0.0426  #> # … with 33 more rows, and 5 more variables: n_body <int>, #> #   neocortex_area_mm2_log_mean <dbl>, neocortex_se_squared <dbl>, #> #   n_neocortex <int>, diet <fct>  ruminant.trdata$dat$Status<-\"Extant\" #Label all species as extant ruminant.trdata$dat$Status[1]<-\"Extinct\" #Make one extinct n.fos<-1  #Inverse Regression - Predicting Y using regression of Y on X ruminant.trdata$dat$brain_mass_g_log_mean[1]<-0 #Assign this species fake body mass ruminant.trdata$dat$brain_se_squared[1]<-0 #And ME  ruminant.extant.trdata<-filter(ruminant.trdata, (Status == \"Extant\")) #Only non-fossil species  #Mean Standardized based on whether fossil is included in dataset ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean[-n.fos]) ruminant.extant.trdata$dat$bodycentered<-ruminant.extant.trdata$dat$body_mass_g_log_mean-mean(ruminant.extant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"rescale-tree-1","dir":"Articles","previous_headings":"Inverse Regression","what":"Rescale Tree","title":"OU-Models-Prediction","text":"Next, rescale Tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1  l.tree<-max(branching.times(ruminant.extant.trdata$phy)) ruminant.extant.trdata$phy$edge.length<-ruminant.extant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.extant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"running-blouch-data-setup-function-1","dir":"Articles","previous_headings":"Inverse Regression","what":"Running Blouch Data Setup Function","title":"OU-Models-Prediction","text":"finally setting dataset run Blouch, using blouchOUPredict.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUPredict.setup.v1(ruminant.extant.trdata,ruminant.trdata,names.traits,classical=0) #> [1] \"Fossil Species # 1\"  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"direct-effect-model-for-prediction-1","dir":"Articles","previous_headings":"","what":"Direct EFfect Model for Prediction","title":"OU-Models-Prediction","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. using model predict unknown values assuming allometric relationship may valid prediction adaptive relationship.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"run-model-1","dir":"Articles","previous_headings":"Direct EFfect Model for Prediction","what":"Run Model","title":"OU-Models-Prediction","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.fos.direct<- rstan::sampling(stanmodels$blouchOUPredict_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),save_warmup=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"parameter-estimates-1","dir":"Articles","previous_headings":"Direct EFfect Model for Prediction","what":"Parameter Estimates","title":"OU-Models-Prediction","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. alpha intercept beta slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y, root mean square error predictions including effects phylogeny adpatation predictions RMSE, root mean square error based prediction using regression line RMSE_mu, finally fossil/unknown prediction mean(s) Y_pred_fos_means. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"print(fit.fos.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\",\"RMSE\",\"RMSE_mu\",\"Y_pred_fos_means\")) #> Inference for Stan model: blouchOUPredict_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>                     mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a                   5.71    0.25 8.86 0.41 1.43 2.82 6.05 31.01  1276    1 #> hl                  0.40    0.01 0.53 0.02 0.11 0.25 0.48  1.68  1845    1 #> alpha               5.06    0.00 0.04 4.99 5.04 5.06 5.08  5.14  1827    1 #> beta[1]             0.57    0.00 0.02 0.53 0.56 0.57 0.58  0.61  2936    1 #> r_squared           0.96    0.00 0.00 0.95 0.96 0.96 0.97  0.97  1274    1 #> sigma2_y            0.15    0.01 0.21 0.02 0.04 0.08 0.15  0.77  1177    1 #> RMSE                0.21    0.00 0.02 0.17 0.20 0.21 0.23  0.26  3106    1 #> RMSE_mu             0.15    0.00 0.01 0.15 0.15 0.15 0.16  0.18  1231    1 #> Y_pred_fos_means[1] 5.09    0.00 0.12 4.85 5.01 5.09 5.17  5.35  3719    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:06:05 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  posterior.fit.fos.direct <- rstan::extract(fit.fos.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"Direct EFfect Model for Prediction","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Prediction","text":"can look procedures using standard trace density plots Rstan","code":"par(mfrow = c(1,3))    traceplot(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) #3 X 8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"inverse-regression-plots","dir":"Articles","previous_headings":"","what":"Inverse Regression Plots","title":"OU-Models-Prediction","text":"Let’s make plots results","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"load-plot-packages","dir":"Articles","previous_headings":"Inverse Regression Plots","what":"Load Plot Packages","title":"OU-Models-Prediction","text":"","code":"library(ggsci) library(ggplot2) #library(plotly)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"data-setup-for-plots-1","dir":"Articles","previous_headings":"Inverse Regression Plots","what":"Data setup for plots","title":"OU-Models-Prediction","text":"","code":"old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  fos.index<-which(ruminant.trdata$dat$Status==\"Extinct\") print(paste(\"Fossil Species #\",fos.index)) #> [1] \"Fossil Species # 1\" extant.index<-which(ruminant.trdata$dat$Status==\"Extant\")  brain.predictions<-apply(posterior.fit.fos.direct$Y_pred_fos_means,2,mean) brain.predictions.extant<-apply(posterior.fit.fos.direct$Y_pred_extant_means,2,mean)  extant.data<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[-fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[-fos.index],log_brain_pred = brain.predictions.extant,log_body = ruminant.trdata$dat$bodycentered[-fos.index],Status=\"Extant\")  fos.predictions<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[fos.index], log_brain= NA, log_brain_pred = brain.predictions[fos.index],log_body=ruminant.trdata$dat$bodycentered[fos.index],Status=\"Extinct\")           merged.data<-rbind(extant.data,fos.predictions)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"make-plots-1","dir":"Articles","previous_headings":"Inverse Regression Plots","what":"Make Plots","title":"OU-Models-Prediction","text":"unknown/fossil prediction red, known values grey, predicted known values blue.","code":"brbo.plot<-ggplot(merged.data,aes(x=log_body))+ geom_point(aes(y=log_brain),size=2.0,alpha=0.4)+ geom_point(aes(y=log_brain_pred,color=Status),size=2.5,alpha=0.8)+ geom_abline(intercept=mean(posterior.fit.fos.direct$alpha),slope = mean(posterior.fit.fos.direct$beta),lty=2)+ theme_bw()+ theme(legend.position=\"bottom\")+ #5X5 xlab(\"log Body Mass (g)\")+   ylab(\"log Brain Mass (g)\")  #+theme(legend. position = \"none\") brbo.plot+scale_color_aaas() #> Warning: Removed 1 rows containing missing values (geom_point). #Export 5.25X5 PDF"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"OU-Models-Prediction","text":"Grabowski, M., K. L. Voje, T. F. Hansen. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Gronau, Q. F., H. Singmann, E.-J. Wagenmakers. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software 92:1–29. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Labra, ., J. Pienaar, T. F. Hansen. 2009. Evolution thermal physiology Liolaemus lizards: adaptation, phylogenetic inertia, niche tracking. . Nat. 174:204–220. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4. Toljagić, O., K. L. Voje, M. Matschiner, L. H. Liow, T. F. Hansen. 2017. Millions Years Behind: Slow Adaptation Ruminants Grasslands. Systematic Biology 67:145–157. Uyeda, J. C., L. J. Harmon. 2020. R Package treeplyr.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-Models-Regimes","text":"load R packages used setup data Blouch, make figures post-analysis, etc. includes Rstan, R interface Stan. used Rstan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\")  library(blouch) load_all() #> ℹ Loading blouch ## Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"OU-Models-Regimes","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"regime-setup","dir":"Articles","previous_headings":"Setup","what":"Regime Setup","title":"OU-Models-Regimes","text":"Stealing code Slouch tutorial, regimes shown painted phylogeny ","code":"## Inspect the internal node regimes ## These have order n+1, n+2, n+3 ... internal_regimes <- factor(phy$node.label)  ## Concatenate tip and internal regimes. These will have order 1,2,3 ... regimes <- c(neocortex$diet, internal_regimes)  ## Pick out the regimes of the edges, in the order of phy$edge edge_regimes <- factor(regimes[phy$edge[,2]])  plot(phy,       edge.color = c(\"Black\", \"Orange\", \"blue\")[edge_regimes],       edge.width = 3, cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"Setup","what":"Combine data and tree","title":"OU-Models-Regimes","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages. Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset  #Mean Scale ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"rescale-tree","dir":"Articles","previous_headings":"Setup","what":"Rescale Tree","title":"OU-Models-Regimes","text":"Next, rescale rree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"Setup","what":"Running Blouch Data Setup Function","title":"OU-Models-Regimes","text":"finally setting dataset run Blouch, using blouchOURegimes.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. Note categorical data come first list traits. list produced function data formatted run direct effect (constraint) models adaptive models. See Grabowski et al. (2016) models. first trait adapting towards second adaptive model.","code":"#source(\"/Volumes/GoogleDrive/My Drive/Shared with Macbook/Current Projects/Blouch project/Stan Functions/blouch v1/Blouch Setup Files/blouchOUReg.setup.v1.R\")  #names.traits<-c(\"diet\",\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"diet\",\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUReg.setup.v1(ruminant.trdata,names.traits)  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"explore-priors","dir":"Articles","previous_headings":"","what":"Explore Priors","title":"OU-Models-Regimes","text":"Priors must set manually Stan Blouch code (e.g. blouchOUReg_v1.stan), use priors analysis OU-Models vignette. Go back look vignette need explore effect priors - use default values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"direct-effect-models","dir":"Articles","previous_headings":"","what":"Direct Effect Models","title":"OU-Models-Regimes","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Now lets simple analysis. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"run-model","dir":"Articles","previous_headings":"Direct Effect Models","what":"Run Model","title":"OU-Models-Regimes","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.direct<- rstan::sampling(stanmodels$blouchOUReg_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Direct Effect Models","what":"Parameter Estimates","title":"OU-Models-Regimes","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. beta[1,2,3] intercepts/effects three regimes, fourth, beta[4] slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"#Lets look at the parameter estimates print(fit.direct,pars = c(\"a\",\"hl\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOUReg_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a         3.23    0.22 6.09 0.28 0.79 1.51 3.08 19.17   788    1 #> hl        0.67    0.02 0.73 0.04 0.22 0.46 0.88  2.46   989    1 #> beta[1]   5.22    0.00 0.16 4.99 5.12 5.19 5.29  5.63  1659    1 #> beta[2]   5.22    0.01 0.23 4.87 5.08 5.17 5.32  5.79  1635    1 #> beta[3]   5.00    0.00 0.06 4.88 4.97 5.00 5.04  5.12  2198    1 #> beta[4]   0.57    0.00 0.02 0.52 0.55 0.57 0.58  0.61  1597    1 #> vy        0.02    0.00 0.02 0.01 0.01 0.02 0.02  0.06  1356    1 #> r_squared 0.96    0.00 0.01 0.95 0.96 0.96 0.96  0.97   836    1 #> sigma2_y  0.09    0.01 0.16 0.02 0.03 0.05 0.08  0.48   764    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:16:41 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.direct <- rstan::extract(fit.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"Direct Effect Models","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Regimes","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"OU-Models-Regimes","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"run-model-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Run Model","title":"OU-Models-Regimes","text":"code mostly , data type sent Stan different format stan_constraint_data .","code":"fit.adaptive<- rstan::sampling(stanmodels$blouchOUReg_v1,data = stan_adaptive_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"parameter-estimates-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Parameter Estimates","title":"OU-Models-Regimes","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. beta[1,2,3] intercepts/effects three regimes, fourth, beta[4] optimal slope adaptive relationship brain mass body mass. beta_evol[1,2,3] repeat previous results regime beta_evol[4] evolutionary slope brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"#Lets look at the parameter estimates print(fit.adaptive,pars = c(\"a\",\"hl\",\"beta\",\"beta_evol\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOUReg_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>               mean se_mean    sd  2.5%   25%   50%   75%  97.5% n_eff Rhat #> a            46.37    0.50 24.59 16.15 29.59 40.25 57.07 111.26  2426    1 #> hl            0.02    0.00  0.01  0.01  0.01  0.02  0.02   0.04  2640    1 #> beta[1]       5.12    0.00  0.05  5.03  5.09  5.12  5.16   5.23  3504    1 #> beta[2]       5.09    0.00  0.07  4.96  5.04  5.09  5.13   5.21  2849    1 #> beta[3]       5.00    0.00  0.04  4.92  4.98  5.00  5.03   5.08  3125    1 #> beta[4]       0.59    0.00  0.02  0.55  0.57  0.59  0.60   0.64  3062    1 #> beta_evol[1]  5.13    0.00  0.00  5.13  5.13  5.13  5.13   5.13  3393    1 #> beta_evol[2]  5.08    0.00  0.00  5.08  5.08  5.08  5.08   5.08  4220    1 #> beta_evol[3]  5.00    0.00  0.00  5.00  5.00  5.00  5.01   5.01  4052    1 #> beta_evol[4]  0.58    0.00  0.00  0.58  0.58  0.58  0.58   0.58  3241    1 #> vy            0.00    0.00  0.00  0.00  0.00  0.00  0.01   0.02  4235    1 #> r_squared     0.97    0.00  0.00  0.96  0.96  0.97  0.97   0.97  1621    1 #> sigma2_y      0.49    0.01  0.51  0.01  0.12  0.31  0.72   1.91  2660    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:25:06 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.adapive <- rstan::extract(fit.adaptive)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Regimes","text":"can look procedures using standard trace density plots Rstan  look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\"))"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"OU-Models-Regimes","text":"using Direct Effect Adaptive model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package. find data BF_att likely model assumes direct effect model rather af adaptive model.","code":"lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.adaptive<-bridge_sampler(fit.adaptive,silent=TRUE) BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.adaptive) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.adaptive: 96.48407"},{"path":[]},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"load-plot-packages","dir":"Articles","previous_headings":"Plots","what":"Load Plot Packages","title":"OU-Models-Regimes","text":"Let’s make plots results","code":"library(ggsci) library(ggplot2)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"direct-effect-plot","dir":"Articles","previous_headings":"Plots","what":"Direct Effect Plot","title":"OU-Models-Regimes","text":"diet data three regimes, order: Levels: Br Gr MF. results plotted suggest third regime effect relative brain mass compared two.","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.direct$beta[,1]),slope = mean(ext.fit.direct$beta[,4]),lty=1)+   geom_abline(intercept=mean(ext.fit.direct$beta[,2]),slope = mean(ext.fit.direct$beta[,4]),lty=2)+   geom_abline(intercept=mean(ext.fit.direct$beta[,3]),slope = mean(ext.fit.direct$beta[,4]),lty=3)+   geom_point(data=ruminant.trdata$dat,mapping=aes(color=diet), size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Direct Effect Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"adaptive-plot","dir":"Articles","previous_headings":"Plots","what":"Adaptive Plot","title":"OU-Models-Regimes","text":"diet data three regimes, order: Levels: Br Gr MF. results plotted suggest third regime might effect adaptive relationship brain mass body mass compared two.","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,1]),slope = mean(ext.fit.adapive$beta[,4]),lty=1)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,2]),slope = mean(ext.fit.adapive$beta[,4]),lty=2)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,3]),slope = mean(ext.fit.adapive$beta[,4]),lty=3)+   geom_point(data=ruminant.trdata$dat,mapping=aes(color=diet), size=2.0,alpha=0.8)+   theme_bw()+  theme(legend.position=\"bottom\")+   ggtitle(\"Adaptive Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"OU-Models-Regimes","text":"Grabowski, M., K. L. Voje, T. F. Hansen. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Gronau, Q. F., H. Singmann, E.-J. Wagenmakers. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software 92:1–29. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Labra, ., J. Pienaar, T. F. Hansen. 2009. Evolution thermal physiology Liolaemus lizards: adaptation, phylogenetic inertia, niche tracking. . Nat. 174:204–220. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4. Toljagić, O., K. L. Voje, M. Matschiner, L. H. Liow, T. F. Hansen. 2017. Millions Years Behind: Slow Adaptation Ruminants Grasslands. Systematic Biology 67:145–157. Uyeda, J. C., L. J. Harmon. 2020. R Package treeplyr.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-models","text":"load R packages used setup data Blouch, make figures post-analysis, etc. includes Rstan, R interface Stan. used Rstan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\")  library(blouch) load_all() #> ℹ Loading blouch ## Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"OU-models","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"Setup","what":"Combine data and tree","title":"OU-models","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages. Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset  #Mean Scale ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"rescale-tree","dir":"Articles","previous_headings":"Setup","what":"Rescale Tree","title":"OU-models","text":"Next, rescale rree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"Setup","what":"Running Blouch Data Setup Function","title":"OU-models","text":"finally setting dataset run Blouch, using blouchOU.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models, adaptive models, OU1 models. See Grabowski et al. (2016) models. first trait adapting towards second adaptive model.","code":"source(\"/Users/markgrabowski/Documents/Academic/Research/R Packages/blouch/R/blouchOU.setup.v1.R\") #names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOU.setup.v1(ruminant.trdata,names.traits)  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]] stan_OU1_data<-stan_data[[3]]"},{"path":[]},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"slope-and-intercept","dir":"Articles","previous_headings":"Explore Priors","what":"Slope and intercept","title":"OU-models","text":"Priors must set manually Stan Blouch code (e.g. blouchOU_v1.stan). big deal, explore data leads weak stong prors beforehand. use default priors Blouch appropriate smaller range datasets. First let’s look priors intercept slope look given dispersion data. Blouch setup use OLS slope intercept mean parameter values normal distribution prior, just want figure appropriate standard deviation slope intercept terms. example using OLS intercept slope regression brain body dataset mean prior values, look standard deviation (0.5 1.0 ) affects region explored Blouch.  first prior far wide, let’s use stronger prior (0.5 0.4 ).  looks pretty good. enter priors Blouch, open Blouch Stan code (e.g. blouchOU_v1.stan) change Priors code within model block. block code blouchOU_v1.st set intercept (alpha) slope (beta) best priors found .","code":"library(ggsci) library(ggplot2) intercept_test<-rnorm(100,stan_adaptive_data$ols_intercept,0.5) #slope_test<-rnorm(100,ols.slope,0.5) slope_test<-rnorm(100,stan_adaptive_data$ols_slope,1.0)  slope.prior.plot<-ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   geom_point()+   geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   theme_bw()+   ggtitle(\"Priors for Intercept and Slope\")+   ylab(\"log Neocortex Area (mm2)\") + xlab(\"log Brain Mass (g)\")+   scale_color_npg()  slope.prior.plot intercept_test<-rnorm(100,stan_adaptive_data$ols_intercept,0.5) #slope_test<-rnorm(100,ols.slope,0.5) slope_test<-rnorm(100,stan_adaptive_data$ols_slope,0.4)  slope.prior.plot<-ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   geom_point()+   geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   theme_bw()+   ggtitle(\"Priors for Intercept and Slope\")+   ylab(\"log Neocortex Area (mm2)\") + xlab(\"log Brain Mass (g)\")+   scale_color_npg()  slope.prior.plot"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"priors-block","dir":"Articles","previous_headings":"Explore Priors","what":"Priors block","title":"OU-models","text":"//Priors ~ lognormal(1.0,1.0); //sigma2_y ~ exponential(0.1); alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"half-life","dir":"Articles","previous_headings":"Explore Priors","what":"Half-life","title":"OU-models","text":"Since tree scaled unit length = 1, original phylogeny ~27 Ma, like half-life prior allow quick adaptation (e.g < 1 Ma, equals < 0.04 tree units), slow adaptation (e.g. > 27 Ma, equals 1 tree units). Thus, 10% quantile distrubution 0.04 90% 1. can explore changing parameters priors affect half-life using code . values 1.0 1.0 two parameters sufficient example analysis, given data parameters explored best values determined.   looks pretty good. enter priors, open Blouch Stan code change Priors code within model block. set priors , log mean log sd values .","code":"########################################### #Log-normal prior for half-life - based on alpha par.alpha <- list(meanlog=1.0, sdlog=1.0)   samp <- rlnorm(10000, mean=par.alpha$meanlog, sd=par.alpha$sdlog) samp<-samp[samp>=0]  hist(samp, breaks=10000, main=\"Prior density of alpha\",xlim=c(0,3)) #abline(v=(c(log(2)/0.07142857,log(2)/1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  min(samp) #> [1] 0.07236748 max(samp) #> [1] 106.4072 log(2)/min(samp) #> [1] 9.578159 log(2)/max(samp) #> [1] 0.006514101  quantiles <- c(0, 0.01, 0.025,0.10, 0.25, 0.5, 0.75,0.90,0.95, 0.975, 0.99, 1) #hls <- rlnorm(10000, meanlog=log(2)/par.alpha$meanlog, sdlog=log(2)/par.alpha$sdlog) #hls<-hls[hls>=0] qs <- quantile(log(2)/samp, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life round(qs, 2) #>    0%    1%  2.5%   10%   25%   50%   75%   90%   95% 97.5%   99%  100%  #>  0.01  0.03  0.04  0.07  0.13  0.26  0.50  0.93  1.31  1.79  2.64  9.58  hist((log(2)/samp), breaks=10000, main=\"Prior density of half-life\",xlim=c(0,3)) abline(v=(c(0.04,1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (27 Ma) - ########################################"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"priors-block-1","dir":"Articles","previous_headings":"Explore Priors","what":"Priors Block","title":"OU-models","text":"//Priors ~ lognormal(1.0,1.0); //= log(2)/half-life //sigma2_y ~ exponential(0.1); // alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope parameter set sigma2_y parameter, default case simply uniform distribution lower limt 0 upper limit equal 4 times variance Y. Stan, uniform priors defined parmeters block given limits block: parameters { real <lower = 0> ; real <lower = 0, upper = variance(Y)*4> sigma2_y; //Added limit variance real alpha; //OU alpha vector[Z] beta; //OU beta Priors code within model block, given prior distribution. //Priors ~ lognormal(1.0,1.0); //= log(2)/half-life //sigma2_y ~ exponential(0.1); // alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"sigma2_y","dir":"Articles","previous_headings":"Explore Priors","what":"Sigma2_y","title":"OU-models","text":"wanted explore sigma2_y prior compares expectations use code , example use uniform prior discussed .","code":"library(extraDistr) ########################################### #Normal - based on alpha par.sigma2y <- list(sigma=1.0)  samp <- rhcauchy(10000, sigma=par.sigma2y$sigma)  hist(samp, breaks=10000, main=\"Prior density of Sigma2y\",xlim=c(0,3)) #abline(v=(c(log(2)/0.07142857,log(2)/1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  min(samp) #> [1] 0.0002841916 max(samp) #> [1] 5008.52 log(2)/min(samp) #> [1] 2439.014 log(2)/max(samp) #> [1] 0.0001383936  quantiles <- c(0, 0.01, 0.025,0.10, 0.25, 0.5, 0.75, 0.90, 0.975, 0.99, 1) #hls <- rlnorm(10000, meanlog=log(2)/par.alpha$meanlog, sdlog=log(2)/par.alpha$sdlog) #hls<-hls[hls>=0] qs <- quantile(samp, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life round(qs, 2) #>      0%      1%    2.5%     10%     25%     50%     75%     90%   97.5%     99%  #>    0.00    0.02    0.04    0.15    0.41    0.99    2.36    6.34   26.09   66.65  #>    100%  #> 5008.52  hist(samp/(2*2), breaks=10000, main=\"Prior density of Vy\",xlim=c(0,3)) #abline(v=(c(0.07142857,1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  ########################################"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-effect-model","dir":"Articles","previous_headings":"","what":"Direct Effect Model","title":"OU-models","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Now lets simple analysis. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model","dir":"Articles","previous_headings":"Direct Effect Model","what":"Run Model","title":"OU-models","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.direct<- rstan::sampling(stanmodels$blouchOU_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Direct Effect Model","what":"Parameter Estimates","title":"OU-models","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. alpha intercept beta slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"#Lets look at the parameter estimates print(fit.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOU_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a         5.74    0.26 8.45 0.37 1.40 2.92 6.29 31.51  1036    1 #> hl        0.41    0.01 0.52 0.02 0.11 0.24 0.50  1.85  1522    1 #> alpha     5.05    0.00 0.04 4.97 5.03 5.05 5.08  5.13  1886    1 #> beta[1]   0.57    0.00 0.02 0.53 0.56 0.57 0.58  0.61  2051    1 #> vy        0.02    0.00 0.01 0.01 0.01 0.01 0.02  0.05  1963    1 #> r_squared 0.96    0.00 0.00 0.95 0.96 0.96 0.96  0.97  1190    1 #> sigma2_y  0.16    0.01 0.23 0.02 0.05 0.08 0.16  0.79   931    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:32:29 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.direct <- rstan::extract(fit.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"Direct Effect Model","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"alpha\",\"beta[1]\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"alpha\",\"beta[1]\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"OU-models","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Run Model","title":"OU-models","text":"code mostly , data type sent Stan different format stan_constraint_data .","code":"fit.adaptive<- rstan::sampling(stanmodels$blouchOU_v1,data = stan_adaptive_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Parameter Estimates","title":"OU-models","text":", lets look parameter estimates alpha intercept beta optimal slope adaptive regression brain mass body mass, beta_evol slope evolutionary regression. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"print(fit.adaptive,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOU_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>               mean se_mean    sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> a            42.06    0.50 21.50 15.99 27.26 37.10 50.99 98.81  1818    1 #> hl            0.02    0.00  0.01  0.01  0.01  0.02  0.03  0.04  2055    1 #> alpha         5.06    0.00  0.03  5.00  5.04  5.06  5.08  5.12  2630    1 #> beta[1]       0.59    0.00  0.02  0.55  0.57  0.58  0.60  0.63  2610    1 #> beta_evol[1]  5.06    0.00  0.00  5.05  5.06  5.06  5.06  5.06  4043    1 #> beta_evol[2]  0.57    0.00  0.00  0.57  0.57  0.57  0.57  0.57  2525    1 #> vy            0.01    0.00  0.00  0.00  0.00  0.00  0.01  0.02  3358    1 #> r_squared     0.96    0.00  0.00  0.95  0.96  0.96  0.96  0.97  1831    1 #> sigma2_y      0.47    0.01  0.48  0.01  0.12  0.31  0.66  1.83  1884    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:37:55 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.adaptive <- rstan::extract(fit.adaptive)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"explore trance density plots","code":"par(mfrow = c(1,3))  traceplot(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) stan_dens(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"OU-models","text":"using Direct Effect Adaptive model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package. Looking , can read results data X times likely model assumes direct effect model rather af adaptive model.","code":"lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.adaptive<-bridge_sampler(fit.adaptive,silent=TRUE) BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.adaptive) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.adaptive: 32.45303"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"brownian-model","dir":"Articles","previous_headings":"","what":"Brownian Model","title":"OU-models","text":"Blouch can also fit Brownian motion model data, can compared models using Bayes Factors. Note possible Blouch, assuming data follows model evolution, rather testing using Direct Effect Adaptive models . use stan_constraint_data type new Stan function. Note priors intercept slope set previously, sigma2_y longer upper range values declaration.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model-2","dir":"Articles","previous_headings":"Brownian Model","what":"Run Model","title":"OU-models","text":"","code":"fit.BM<- rstan::sampling(stanmodels$blouchBM_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates-2","dir":"Articles","previous_headings":"Brownian Model","what":"Parameter Estimates","title":"OU-models","text":"Parameters follow , beta Brownian slope.","code":"print(fit.BM,pars = c(\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchBM_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> alpha     5.05       0 0.08 4.90 5.00 5.05 5.10  5.21  2970    1 #> beta[1]   0.56       0 0.02 0.51 0.54 0.56 0.57  0.60  3156    1 #> r_squared 0.99       0 0.01 0.98 0.99 0.99 0.99  0.99  2431    1 #> sigma2_y  0.03       0 0.01 0.01 0.02 0.02 0.03  0.05  2814    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:40:34 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.BM <- rstan::extract(fit.BM)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters-2","dir":"Articles","previous_headings":"Brownian Model","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"explore trance density plots   Looking Good!","code":"par(mfrow = c(1,3))  traceplot(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) stan_dens(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-vs--bm-model-comparison-using-bf","dir":"Articles","previous_headings":"","what":"Direct vs. BM Model Comparison using BF","title":"OU-models","text":"using type model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package. Looking , can read results data X times likely model assumes direct effect model rather af Brownian-motion model.","code":"library(bridgesampling) lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.BM<-bridge_sampler(fit.BM,silent=TRUE)  BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.BM) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.BM: 1.27957"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"ou1","dir":"Articles","previous_headings":"","what":"OU1","title":"OU-models","text":"Finally, Blouch can fit model single intercept/optimum, half-life can interpreted measure phylogenetic effect (see Hansen et al. 2008). model little different previous models predictors.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model-3","dir":"Articles","previous_headings":"OU1","what":"Run Model","title":"OU-models","text":"","code":"fit.OU1<- rstan::sampling(stanmodels$blouchOU1_v1,data = stan_OU1_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates-3","dir":"Articles","previous_headings":"OU1","what":"Parameter Estimates","title":"OU-models","text":"Lets look parameter estimates Parameters , alpha phylogenetically informed intercept hl estimate phylogenetic effect. can see half-life many multiples tree length, meaning brain mass evolving Brownian-motion process predictors included model. See Hansen et al. (2008) Labra et al. (2009) effect, half-life = 0, influence past, species independent, half-life = infinity, centralizing tendency, trait evolves Brown- ian motion (Labra et al. 2009).","code":"print(fit.OU1,pars = c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma2_y\")) #> Inference for Stan model: blouchOU1_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean    sd 2.5%  25%  50%   75% 97.5% n_eff Rhat #> a         0.25    0.01  0.31 0.01 0.05 0.13  0.33  1.10  3126    1 #> hl       12.44    0.37 17.64 0.63 2.09 5.14 14.11 70.07  2229    1 #> alpha     5.11    0.00  0.36 4.41 4.87 5.12  5.36  5.82  6362    1 #> vy        7.68    0.23 10.94 0.60 1.46 3.17  8.55 42.06  2288    1 #> sigma2_y  0.97    0.01  0.32 0.52 0.75 0.91  1.11  1.75  2502    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 15 15:42:43 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #pairs(fit.OU1,pars = c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma\",\"sigma2_y\"))  #For downstream analysis and plots ext.fit.OU1 <- rstan::extract(fit.OU1)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters-3","dir":"Articles","previous_headings":"OU1","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.OU1,c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma2_y\")) stan_dens(fit.OU1,c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma2_y\"))"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-models","text":"Let’s make plots results","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"load-plot-packages","dir":"Articles","previous_headings":"Plots","what":"Load Plot Packages","title":"OU-models","text":"","code":"library(ggsci) library(ggplot2)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-effect-plot","dir":"Articles","previous_headings":"Plots","what":"Direct Effect Plot","title":"OU-models","text":"","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.direct$alpha),slope = mean(ext.fit.direct$beta[,1]),lty=1)+   geom_point(size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Direct Effect Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"adaptive-plot","dir":"Articles","previous_headings":"Plots","what":"Adaptive Plot","title":"OU-models","text":"","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.adaptive$alpha),slope = mean(ext.fit.adaptive$beta[,1]),lty=1)+   geom_abline(intercept=mean(ext.fit.adaptive$alpha),slope = mean(ext.fit.adaptive$beta_evol[,2]),lty=2)+   geom_point(size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Adaptive Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"OU-models","text":"Grabowski, M., K. L. Voje, T. F. Hansen. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Gronau, Q. F., H. Singmann, E.-J. Wagenmakers. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software 92:1–29. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Labra, ., J. Pienaar, T. F. Hansen. 2009. Evolution thermal physiology Liolaemus lizards: adaptation, phylogenetic inertia, niche tracking. . Nat. 174:204–220. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4. Toljagić, O., K. L. Voje, M. Matschiner, L. H. Liow, T. F. Hansen. 2017. Millions Years Behind: Slow Adaptation Ruminants Grasslands. Systematic Biology 67:145–157. Uyeda, J. C., L. J. Harmon. 2020. R Package treeplyr.","code":""},{"path":"https://github.com/mark-grabowski/blouch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Grabowski. Author, maintainer.","code":""},{"path":"https://github.com/mark-grabowski/blouch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grabowski M (2021). blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH). R package version 1.0.0, https://github.com/mark-grabowski/blouch.","code":"@Manual{,   title = {blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)},   author = {Mark Grabowski},   year = {2021},   note = {R package version 1.0.0},   url = {https://github.com/mark-grabowski/blouch}, }"},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"blouch","dir":"","previous_headings":"","what":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH) fits adaptive models continuous trait evolution Bayesian framework based categorical continuous predictors, incorporates measurement error following approach Hansen et al. (2008). Blouch can also make phylogenetically informed predictions known unknown traits clade, given dataset comparative measurements phylogeny including taxa interest. Blouch Bayesian version frequentist brother, Slouch (Kopperud et al. 2020), available . front-end component Blouch written R (R Core Team, 2015), nuts bolts written language Stan (Carpenter et al., 2017), allows estimation Bayesian models using Markov chain Monte Carlo (MCMC) methods based Hamilton Monte Carlo sampler.","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"just getting started blouch recommend starting tutorial vignettes available package website. Blouch based article currently review: Grabowski, M (review). Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH).","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"instalation-instructions","dir":"","previous_headings":"","what":"Instalation Instructions","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"install R Stan functions associated Blouch github, first install package devtools: install blouch","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"mark-grabowski/blouch\") library(blouch)"},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Please visit package website .","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Carpenter, B., . Gelman, M. D. Hoffman, D. Lee, B. Goodrich, M. Betancourt, M. Brubaker, J. Guo, P. Li, . Riddell. 2017. Stan: Probabilistic Programming Language. Journal Statistical Software 76:1–32. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4.","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'blouch' package. — blouch-package","title":"The 'blouch' package. — blouch-package","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH)","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouch-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'blouch' package. — blouch-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.26.4. https://mc-stan.org","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"R setup file blouchOU_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"","code":"blouchOU.setup.v1(trdata, names.traits)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr names.traits Vector trait names","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"object class list use blouchOU_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"R setup file blouchOUPredict_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"","code":"blouchOUPredict.setup.v1(trdata, trdata.fos, names.traits, classical)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr - extant species trdata.fos Data formatted make.treedata function R Pacakge treeplyr - extant fossil names.traits Vector trait names classical Numeric denoting whether classical regression (=1) inverse regression (=0) used prediction","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"object class list use blouchOUPredict_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"R setup file blouchOUReg_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"","code":"blouchOUReg.setup.v1(trdata, names.traits)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr names.traits Vector trait names","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"object class list use blouchOUReg_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/news/index.html","id":"blouch-100","dir":"Changelog","previous_headings":"","what":"blouch 1.0.0","title":"blouch 1.0.0","text":"Added NEWS.md file track changes package.","code":""}]
