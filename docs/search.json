[{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/mark-grabowski/blouch/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-Models-Prediction","text":"load R packages used setup data Blouch, make figures post-analysis, etc. includes RStan (Stan Development Team, 2021), R interface Stan. used RStan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\") #library(blouch)  library(blouch) load_all() #> ℹ Loading blouch ## Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)  #remotes::install_github(\"stan-dev/rstan\", ref = \"develop\", subdir = \"rstan/rstan\")"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"OU-Models-Prediction","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"Setup","what":"Combine data and tree","title":"OU-Models-Prediction","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"classical-regression","dir":"Articles","previous_headings":"","what":"Classical Regression","title":"OU-Models-Prediction","text":"assign one taxa fossil species predicted, use Classical Regression predict unknown value based combination phylogeny allometry. regression Y - brain size X body size, predicting fossil X (body size) based Y (brain size). Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata$dat$Status<-\"Extant\" #Label all species as extant ruminant.trdata$dat$Status[1]<-\"Extinct\" #Make one extinct n.fos<-1  #Classical Regression - Predicting X using regression of Y on X ruminant.trdata$dat$body_mass_g_log_mean[1]<-0 #Assign this species fake body mass ruminant.trdata$dat$body_se_squared[1]<-0 #And ME  ruminant.extant.trdata<-filter(ruminant.trdata, (Status == \"Extant\")) #Only non-fossil species  #Mean Standardized based on whether fossil is included in dataset  #Classical regression - predicting brain size - X ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean[-n.fos]) ruminant.extant.trdata$dat$bodycentered<-ruminant.extant.trdata$dat$body_mass_g_log_mean-mean(ruminant.extant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"rescale-tree","dir":"Articles","previous_headings":"Classical Regression","what":"Rescale Tree","title":"OU-Models-Prediction","text":"Next, rescale tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1  l.tree<-max(branching.times(ruminant.extant.trdata$phy)) ruminant.extant.trdata$phy$edge.length<-ruminant.extant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.extant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"Classical Regression","what":"Running Blouch Data Setup Function","title":"OU-Models-Prediction","text":"finally setting dataset run Blouch, using blouchOUPredict.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models. first trait adapting towards second adaptive model.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUPredict.setup.v1(ruminant.extant.trdata,ruminant.trdata,names.traits,classical=1) #> [1] \"Fossil Species # 1\"  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"explore-priors","dir":"Articles","previous_headings":"","what":"Explore Priors","title":"OU-Models-Prediction","text":"Priors must set manually Stan Blouch code (e.g. blouchOUPredict_v1.stan), use priors analysis OU-Models vignette. Go back look vignette need explore effect priors - use default values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"direct-effect-model-for-prediction","dir":"Articles","previous_headings":"","what":"Direct Effect Model for Prediction","title":"OU-Models-Prediction","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. using model predict unknown values assuming allometric relationship may valid prediction adaptive relationship.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"run-model","dir":"Articles","previous_headings":"Direct Effect Model for Prediction","what":"Run Model","title":"OU-Models-Prediction","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.fos.direct<- rstan::sampling(stanmodels$blouchOUPredict_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),save_warmup=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Direct Effect Model for Prediction","what":"Parameter Estimates","title":"OU-Models-Prediction","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. alpha intercept beta slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y, root mean square error predictions including effects phylogeny adpatation predictions RMSE, root mean square error based prediction using regression line RMSE_mu, finally fossil/unknown prediction mean(s) X_pred_fos_means. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"print(fit.fos.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\",\"RMSE\",\"RMSE_mu\",\"X_pred_fos_means\")) #> Inference for Stan model: blouchOUPredict_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> a                    5.66    0.26 8.57  0.40  1.43  2.79  6.25 28.51  1066    1 #> hl                   0.40    0.01 0.53  0.02  0.11  0.25  0.48  1.74  1746    1 #> alpha                5.07    0.00 0.04  5.00  5.04  5.06  5.09  5.14  1144    1 #> beta[1]              0.57    0.00 0.02  0.53  0.56  0.57  0.58  0.61  2450    1 #> r_squared            0.96    0.00 0.00  0.95  0.96  0.96  0.97  0.97  1005    1 #> sigma2_y             0.15    0.01 0.21  0.02  0.04  0.07  0.15  0.76   958    1 #> RMSE                 0.29    0.00 0.03  0.25  0.28  0.29  0.31  0.35  3018    1 #> RMSE_mu              0.27    0.00 0.02  0.26  0.26  0.26  0.27  0.31   611    1 #> X_pred_fos_means[1] -0.48    0.00 0.17 -0.82 -0.59 -0.47 -0.36 -0.15  3402    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:19:35 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  posterior.fit.fos.direct <- rstan::extract(fit.fos.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"Direct Effect Model for Prediction","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Prediction","text":"can look procedures using standard trace density plots Rstan","code":"par(mfrow = c(1,3))    traceplot(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) #3 X 8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-Models-Prediction","text":"Let’s make plots results ### Load Plot Packages","code":"library(ggsci) library(ggplot2) library(plotly) #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"data-setup-for-plots","dir":"Articles","previous_headings":"Plots","what":"Data Setup for Plots","title":"OU-Models-Prediction","text":"","code":"old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  fos.index<-which(ruminant.trdata$dat$Status==\"Extinct\") print(paste(\"Fossil Species #\",fos.index)) #> [1] \"Fossil Species # 1\" extant.index<-which(ruminant.trdata$dat$Status==\"Extant\")  body.predictions<-apply(posterior.fit.fos.direct$X_pred_fos_means,2,mean) body.predictions.extant<-apply(posterior.fit.fos.direct$X_pred_extant_means,2,mean)  extant.data<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[-fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[-fos.index],log_body_pred = body.predictions.extant,log_body = ruminant.trdata$dat$bodycentered[-fos.index],Status=\"Extant\")  fos.predictions<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[fos.index], log_body_pred = body.predictions[fos.index],log_body=NA,Status=\"Extinct\")           merged.data<-rbind(extant.data,fos.predictions)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"make-plots","dir":"Articles","previous_headings":"Plots","what":"Make Plots","title":"OU-Models-Prediction","text":"","code":"brbo.plot<-ggplot(merged.data,aes(y=log_brain))+ geom_point(aes(x=log_body_pred,color=Status),size=2.5,alpha=0.8)+ geom_point(aes(x=log_body),size=2.0,alpha=0.4)+ geom_abline(intercept=mean(posterior.fit.fos.direct$alpha),slope = mean(posterior.fit.fos.direct$beta),lty=2)+ theme_bw()+ theme(legend.position=\"bottom\")+ #5X5 ylab(\"log Brain Mass (g)\")+   xlab(\"log Body Mass (g)\")  #+theme(legend. position = \"none\") brbo.plot+scale_color_aaas() #> Warning: Removed 1 rows containing missing values (geom_point). #Export 5.25X5 PDF"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"inverse-regression","dir":"Articles","previous_headings":"","what":"Inverse Regression","title":"OU-Models-Prediction","text":"assign one taxa fossil species predicted, use Inverse Regression predict unknown value based combination phylogeny allometry. regression Y - brain size X body size, predicting fossil Y (brain mass) based X (body mass). Finally mean scale X data (body mass) average across species 0.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"combine-data-and-tree-1","dir":"Articles","previous_headings":"Inverse Regression","what":"Combine data and tree","title":"OU-Models-Prediction","text":"","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  ruminant.trdata #Full dataset #> $phy  #>  #> Phylogenetic tree with 43 tips and 42 internal nodes. #>  #> Tip labels: #>   Antilocapra_americana, Addax_nasomaculatus, Aepyceros_melampus, Alcelaphus_buselaphus_buselaphus, Antidorcas_marsupialis, Antilope_cervicapra, ... #> Node labels: #>   MF, MF, MF, MF, MF, MF, ... #>  #> Rooted; includes branch lengths. #>  #> $dat  #> # A tibble: 43 × 10 #>    brain_mass_g_log_… brain_se_squared n_brain body_mass_g_log_… body_se_squared #>                 <dbl>            <dbl>   <int>             <dbl>           <dbl> #>  1               4.80         0.0109         1             11.0          0.0426  #>  2               5.30         0.00547        2             11.6          0.0213  #>  3               5.15         0.000995      11             10.9          0.00387 #>  4               5.69         0.00219        5             11.9          0.00852 #>  5               4.91         0.000842      13             10.5          0.00328 #>  6               4.77         0.0109         1             10.4          0.0426  #>  7               4.42         0.0109         1              9.43         0.0426  #>  8               4.42         0.00365        3              9.58         0.0213  #>  9               3.52         0.00137        8              8.46         0.00533 #> 10               5.72         0.0109         1             11.9          0.0426  #> # … with 33 more rows, and 5 more variables: n_body <int>, #> #   neocortex_area_mm2_log_mean <dbl>, neocortex_se_squared <dbl>, #> #   n_neocortex <int>, diet <fct>  ruminant.trdata$dat$Status<-\"Extant\" #Label all species as extant ruminant.trdata$dat$Status[1]<-\"Extinct\" #Make one extinct n.fos<-1  #Inverse Regression - Predicting Y using regression of Y on X ruminant.trdata$dat$brain_mass_g_log_mean[1]<-0 #Assign this species fake body mass ruminant.trdata$dat$brain_se_squared[1]<-0 #And ME  ruminant.extant.trdata<-filter(ruminant.trdata, (Status == \"Extant\")) #Only non-fossil species  #Mean Standardized based on whether fossil is included in dataset ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean[-n.fos]) ruminant.extant.trdata$dat$bodycentered<-ruminant.extant.trdata$dat$body_mass_g_log_mean-mean(ruminant.extant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"rescale-tree-1","dir":"Articles","previous_headings":"Inverse Regression","what":"Rescale Tree","title":"OU-Models-Prediction","text":"Next, rescale Tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1  l.tree<-max(branching.times(ruminant.extant.trdata$phy)) ruminant.extant.trdata$phy$edge.length<-ruminant.extant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.extant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"running-blouch-data-setup-function-1","dir":"Articles","previous_headings":"Inverse Regression","what":"Running Blouch Data Setup Function","title":"OU-Models-Prediction","text":"finally setting dataset run Blouch, using blouchOUPredict.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUPredict.setup.v1(ruminant.extant.trdata,ruminant.trdata,names.traits,classical=0) #> [1] \"Fossil Species # 1\"  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"direct-effect-model-for-prediction-1","dir":"Articles","previous_headings":"","what":"Direct EFfect Model for Prediction","title":"OU-Models-Prediction","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. using model predict unknown values assuming allometric relationship may valid prediction adaptive relationship.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"run-model-1","dir":"Articles","previous_headings":"Direct EFfect Model for Prediction","what":"Run Model","title":"OU-Models-Prediction","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.fos.direct<- rstan::sampling(stanmodels$blouchOUPredict_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),save_warmup=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"parameter-estimates-1","dir":"Articles","previous_headings":"Direct EFfect Model for Prediction","what":"Parameter Estimates","title":"OU-Models-Prediction","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. alpha intercept beta slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y, root mean square error predictions including effects phylogeny adpatation predictions RMSE, root mean square error based prediction using regression line RMSE_mu, finally fossil/unknown prediction mean(s) Y_pred_fos_means. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"print(fit.fos.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\",\"RMSE\",\"RMSE_mu\",\"Y_pred_fos_means\")) #> Inference for Stan model: blouchOUPredict_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>                     mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a                   6.12    0.36 9.68 0.41 1.43 2.95 6.47 33.68   730    1 #> hl                  0.39    0.01 0.53 0.02 0.11 0.23 0.48  1.69  1990    1 #> alpha               5.07    0.00 0.04 4.99 5.04 5.06 5.09  5.15  1954    1 #> beta[1]             0.57    0.00 0.02 0.53 0.56 0.57 0.58  0.61  2115    1 #> r_squared           0.96    0.00 0.00 0.95 0.96 0.96 0.97  0.97  1177    1 #> sigma2_y            0.16    0.01 0.26 0.02 0.04 0.08 0.16  0.88   609    1 #> RMSE                0.21    0.00 0.03 0.17 0.20 0.21 0.23  0.27  3623    1 #> RMSE_mu             0.15    0.00 0.01 0.15 0.15 0.15 0.16  0.18  1084    1 #> Y_pred_fos_means[1] 5.09    0.00 0.12 4.85 5.01 5.09 5.17  5.34  3688    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:25:10 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  posterior.fit.fos.direct <- rstan::extract(fit.fos.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"Direct EFfect Model for Prediction","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Prediction","text":"can look procedures using standard trace density plots Rstan","code":"par(mfrow = c(1,3))    traceplot(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) #3 X 8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"inverse-regression-plots","dir":"Articles","previous_headings":"","what":"Inverse Regression Plots","title":"OU-Models-Prediction","text":"Let’s make plots results","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"load-plot-packages","dir":"Articles","previous_headings":"Inverse Regression Plots","what":"Load Plot Packages","title":"OU-Models-Prediction","text":"","code":"library(ggsci) library(ggplot2) #library(plotly)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"data-setup-for-plots-1","dir":"Articles","previous_headings":"Inverse Regression Plots","what":"Data setup for plots","title":"OU-Models-Prediction","text":"","code":"old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  fos.index<-which(ruminant.trdata$dat$Status==\"Extinct\") print(paste(\"Fossil Species #\",fos.index)) #> [1] \"Fossil Species # 1\" extant.index<-which(ruminant.trdata$dat$Status==\"Extant\")  brain.predictions<-apply(posterior.fit.fos.direct$Y_pred_fos_means,2,mean) brain.predictions.extant<-apply(posterior.fit.fos.direct$Y_pred_extant_means,2,mean)  extant.data<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[-fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[-fos.index],log_brain_pred = brain.predictions.extant,log_body = ruminant.trdata$dat$bodycentered[-fos.index],Status=\"Extant\")  fos.predictions<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[fos.index], log_brain= NA, log_brain_pred = brain.predictions[fos.index],log_body=ruminant.trdata$dat$bodycentered[fos.index],Status=\"Extinct\")           merged.data<-rbind(extant.data,fos.predictions)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"make-plots-1","dir":"Articles","previous_headings":"Inverse Regression Plots","what":"Make Plots","title":"OU-Models-Prediction","text":"unknown/fossil prediction red, known values grey, predicted known values blue.","code":"brbo.plot<-ggplot(merged.data,aes(x=log_body))+ geom_point(aes(y=log_brain),size=2.0,alpha=0.4)+ geom_point(aes(y=log_brain_pred,color=Status),size=2.5,alpha=0.8)+ geom_abline(intercept=mean(posterior.fit.fos.direct$alpha),slope = mean(posterior.fit.fos.direct$beta),lty=2)+ theme_bw()+ theme(legend.position=\"bottom\")+ #5X5 xlab(\"log Body Mass (g)\")+   ylab(\"log Brain Mass (g)\")  #+theme(legend. position = \"none\") brbo.plot+scale_color_aaas() #> Warning: Removed 1 rows containing missing values (geom_point). #Export 5.25X5 PDF"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"OU-Models-Prediction","text":"Grabowski, M., K. L. Voje, T. F. Hansen. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Gronau, Q. F., H. Singmann, E.-J. Wagenmakers. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software 92:1–29. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Labra, ., J. Pienaar, T. F. Hansen. 2009. Evolution thermal physiology Liolaemus lizards: adaptation, phylogenetic inertia, niche tracking. . Nat. 174:204–220. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4. Stan Development Team. 2021. RStan: R interface Stan. R package version 2.21.3, https://mc-stan.org/. Toljagić, O., K. L. Voje, M. Matschiner, L. H. Liow, T. F. Hansen. 2017. Millions Years Behind: Slow Adaptation Ruminants Grasslands. Systematic Biology 67:145–157. Uyeda, J. C., L. J. Harmon. 2020. R Package treeplyr.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-Models-Regimes","text":"load R packages used setup data Blouch, make figures post-analysis, etc. includes RStan (Stan Development Team, 2021), R interface Stan. used RStan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\")  library(blouch) load_all() #> ℹ Loading blouch ## Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"OU-Models-Regimes","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"regime-setup","dir":"Articles","previous_headings":"Setup","what":"Regime Setup","title":"OU-Models-Regimes","text":"Stealing code Slouch tutorial, regimes shown painted phylogeny ","code":"## Inspect the internal node regimes ## These have order n+1, n+2, n+3 ... internal_regimes <- factor(phy$node.label)  ## Concatenate tip and internal regimes. These will have order 1,2,3 ... regimes <- c(neocortex$diet, internal_regimes)  ## Pick out the regimes of the edges, in the order of phy$edge edge_regimes <- factor(regimes[phy$edge[,2]])  plot(phy,       edge.color = c(\"Black\", \"Orange\", \"blue\")[edge_regimes],       edge.width = 3, cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"Setup","what":"Combine data and tree","title":"OU-Models-Regimes","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages. Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset  #Mean Scale ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"rescale-tree","dir":"Articles","previous_headings":"Setup","what":"Rescale Tree","title":"OU-Models-Regimes","text":"Next, rescale rree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"Setup","what":"Running Blouch Data Setup Function","title":"OU-Models-Regimes","text":"finally setting dataset run Blouch, using blouchOURegimes.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. Note categorical data come first list traits. list produced function data formatted run direct effect (constraint) models adaptive models. See Grabowski et al. (2016) models. first trait adapting towards second adaptive model.","code":"#source(\"/Volumes/GoogleDrive/My Drive/Shared with Macbook/Current Projects/Blouch project/Stan Functions/blouch v1/Blouch Setup Files/blouchOUReg.setup.v1.R\")  #names.traits<-c(\"diet\",\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"diet\",\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUReg.setup.v1(ruminant.trdata,names.traits)  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"explore-priors","dir":"Articles","previous_headings":"","what":"Explore Priors","title":"OU-Models-Regimes","text":"Priors must set manually Stan Blouch code (e.g. blouchOUReg_v1.stan), use priors analysis OU-Models vignette. Go back look vignette need explore effect priors - use default values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"direct-effect-models","dir":"Articles","previous_headings":"","what":"Direct Effect Models","title":"OU-Models-Regimes","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Now lets simple analysis. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"run-model","dir":"Articles","previous_headings":"Direct Effect Models","what":"Run Model","title":"OU-Models-Regimes","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.direct<- rstan::sampling(stanmodels$blouchOUReg_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Direct Effect Models","what":"Parameter Estimates","title":"OU-Models-Regimes","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. beta[1,2,3] intercepts/effects three regimes, fourth, beta[4] slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"#Lets look at the parameter estimates print(fit.direct,pars = c(\"a\",\"hl\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOUReg_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a         3.07    0.20 5.63 0.27 0.78 1.51 3.14 16.55   828    1 #> hl        0.67    0.02 0.73 0.04 0.22 0.46 0.89  2.54  1341    1 #> beta[1]   5.22    0.00 0.17 4.99 5.12 5.19 5.29  5.66  1436    1 #> beta[2]   5.21    0.00 0.22 4.85 5.08 5.17 5.30  5.74  1965    1 #> beta[3]   5.00    0.00 0.06 4.89 4.97 5.00 5.04  5.12  2470    1 #> beta[4]   0.57    0.00 0.02 0.52 0.55 0.57 0.58  0.61  2192    1 #> vy        0.02    0.00 0.02 0.01 0.01 0.02 0.02  0.06  1861    1 #> r_squared 0.96    0.00 0.01 0.95 0.96 0.96 0.96  0.97   969    1 #> sigma2_y  0.09    0.01 0.14 0.02 0.03 0.05 0.08  0.41   763    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:35:29 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.direct <- rstan::extract(fit.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"Direct Effect Models","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Regimes","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"OU-Models-Regimes","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"run-model-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Run Model","title":"OU-Models-Regimes","text":"code mostly , data type sent Stan different format stan_constraint_data .","code":"fit.adaptive<- rstan::sampling(stanmodels$blouchOUReg_v1,data = stan_adaptive_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"parameter-estimates-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Parameter Estimates","title":"OU-Models-Regimes","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. beta[1,2,3] intercepts/effects three regimes, fourth, beta[4] optimal slope adaptive relationship brain mass body mass. beta_evol[1,2,3] repeat previous results regime beta_evol[4] evolutionary slope brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"#Lets look at the parameter estimates print(fit.adaptive,pars = c(\"a\",\"hl\",\"beta\",\"beta_evol\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOUReg_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>               mean se_mean    sd  2.5%   25%   50%   75%  97.5% n_eff Rhat #> a            46.27    0.49 23.76 16.22 29.66 40.69 56.29 107.08  2361    1 #> hl            0.02    0.00  0.01  0.01  0.01  0.02  0.02   0.04  2500    1 #> beta[1]       5.13    0.00  0.05  5.03  5.09  5.13  5.16   5.23  3327    1 #> beta[2]       5.09    0.00  0.06  4.96  5.04  5.08  5.13   5.21  3100    1 #> beta[3]       5.00    0.00  0.04  4.92  4.98  5.00  5.03   5.08  3332    1 #> beta[4]       0.59    0.00  0.02  0.55  0.57  0.59  0.60   0.63  3163    1 #> beta_evol[1]  5.13    0.00  0.00  5.13  5.13  5.13  5.13   5.13  3049    1 #> beta_evol[2]  5.08    0.00  0.00  5.08  5.08  5.08  5.08   5.08  3737    1 #> beta_evol[3]  5.00    0.00  0.00  5.00  5.00  5.00  5.01   5.01  3965    1 #> beta_evol[4]  0.58    0.00  0.00  0.58  0.58  0.58  0.58   0.58  3144    1 #> vy            0.01    0.00  0.00  0.00  0.00  0.00  0.01   0.02  4087    1 #> r_squared     0.97    0.00  0.00  0.96  0.96  0.97  0.97   0.97  1692    1 #> sigma2_y      0.49    0.01  0.48  0.01  0.13  0.33  0.68   1.80  2488    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:44:06 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.adapive <- rstan::extract(fit.adaptive)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Regimes","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\"))"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"OU-Models-Regimes","text":"using Direct Effect Adaptive model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package. find data BF_att likely model assumes direct effect model rather af adaptive model.","code":"lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.adaptive<-bridge_sampler(fit.adaptive,silent=TRUE) BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.adaptive) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.adaptive: 96.75605"},{"path":[]},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"load-plot-packages","dir":"Articles","previous_headings":"Plots","what":"Load Plot Packages","title":"OU-Models-Regimes","text":"Let’s make plots results","code":"library(ggsci) library(ggplot2)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"direct-effect-plot","dir":"Articles","previous_headings":"Plots","what":"Direct Effect Plot","title":"OU-Models-Regimes","text":"diet data three regimes, order: Levels: Br Gr MF. results plotted suggest third regime effect relative brain mass compared two.","code":"mypal = pal_npg(\"nrc\", alpha = 0.7)(3)  ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered,color=diet,group=diet))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.direct$beta[,1]),slope = mean(ext.fit.direct$beta[,4]),lty=1,color=mypal[1])+   geom_abline(intercept=mean(ext.fit.direct$beta[,2]),slope = mean(ext.fit.direct$beta[,4]),lty=1,color=mypal[2])+   geom_abline(intercept=mean(ext.fit.direct$beta[,3]),slope = mean(ext.fit.direct$beta[,4]),lty=1,color=mypal[3])+   geom_point(data=ruminant.trdata$dat,mapping=aes(color=diet), size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Direct Effect Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"adaptive-plot","dir":"Articles","previous_headings":"Plots","what":"Adaptive Plot","title":"OU-Models-Regimes","text":"diet data three regimes, order: Levels: Br Gr MF. results plotted suggest third regime might effect adaptive relationship brain mass body mass compared two.","code":"mypal = pal_npg(\"nrc\", alpha = 0.7)(3)  ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered,color=diet,group=diet))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,1]),slope = mean(ext.fit.adapive$beta[,4]),lty=1,color=mypal[1])+   geom_abline(intercept=mean(ext.fit.adapive$beta[,2]),slope = mean(ext.fit.adapive$beta[,4]),lty=1,color=mypal[2])+   geom_abline(intercept=mean(ext.fit.adapive$beta[,3]),slope = mean(ext.fit.adapive$beta[,4]),lty=1,color=mypal[3])+ #  geom_point(data=ruminant.trdata$dat,mapping=aes(color=diet), size=2.0,alpha=0.8)+   geom_point(data=ruminant.trdata$dat,size=2.0,alpha=0.8)+   theme_bw()+  theme(legend.position=\"bottom\")+   ggtitle(\"Adaptive Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"OU-Models-Regimes","text":"Grabowski, M., K. L. Voje, T. F. Hansen. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Gronau, Q. F., H. Singmann, E.-J. Wagenmakers. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software 92:1–29. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Labra, ., J. Pienaar, T. F. Hansen. 2009. Evolution thermal physiology Liolaemus lizards: adaptation, phylogenetic inertia, niche tracking. . Nat. 174:204–220. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4. Stan Development Team. 2021. RStan: R interface Stan. R package version 2.21.3, https://mc-stan.org/. Toljagić, O., K. L. Voje, M. Matschiner, L. H. Liow, T. F. Hansen. 2017. Millions Years Behind: Slow Adaptation Ruminants Grasslands. Systematic Biology 67:145–157. Uyeda, J. C., L. J. Harmon. 2020. R Package treeplyr.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-models","text":"load R packages used setup data Blouch, make figures post-analysis, etc. includes RStan (Stan Development Team, 2021), R interface Stan. used RStan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\")  library(blouch) load_all() #> ℹ Loading blouch ## Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"OU-models","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"combine-data-and-tree","dir":"Articles","previous_headings":"Setup","what":"Combine data and tree","title":"OU-models","text":"Next use treeplyr package (Uyeda Harmon, 2014) make.treedata function combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages. Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset  #Mean Scale ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"rescale-tree","dir":"Articles","previous_headings":"Setup","what":"Rescale Tree","title":"OU-models","text":"Next, rescale rree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"Setup","what":"Running Blouch Data Setup Function","title":"OU-models","text":"finally setting dataset run Blouch, using blouchOU.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models, adaptive models, OU1 models. See Grabowski et al. (2016) models. first trait adapting towards second adaptive model.","code":"source(\"/Users/markgrabowski/Documents/Academic/Research/R Packages/blouch/R/blouchOU.setup.v1.R\") #names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOU.setup.v1(ruminant.trdata,names.traits)  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]] stan_OU1_data<-stan_data[[3]]"},{"path":[]},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"slope-and-intercept","dir":"Articles","previous_headings":"Explore Priors","what":"Slope and intercept","title":"OU-models","text":"Priors must set manually Stan Blouch code (e.g. blouchOU_v1.stan). big deal, explore data leads weak stong prors beforehand. use default priors Blouch appropriate smaller range datasets. First let’s look priors intercept slope look given dispersion data. Blouch setup use OLS slope intercept mean parameter values normal distribution prior, just want figure appropriate standard deviation slope intercept terms. example using OLS intercept slope regression brain body dataset mean prior values, look standard deviation (0.5 1.0 ) affects region explored Blouch.  first prior far wide, let’s use stronger prior (0.5 0.4 ).  looks pretty good. enter priors Blouch, open Blouch Stan code (e.g. blouchOU_v1.stan) change Priors code within model block. block code blouchOU_v1.st set intercept (alpha) slope (beta) best priors found .","code":"library(ggsci) library(ggplot2) intercept_test<-rnorm(100,stan_adaptive_data$ols_intercept,0.5) #slope_test<-rnorm(100,ols.slope,0.5) slope_test<-rnorm(100,stan_adaptive_data$ols_slope,1.0)  slope.prior.plot<-ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   geom_point()+   geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   theme_bw()+   ggtitle(\"Priors for Intercept and Slope\")+   ylab(\"log Neocortex Area (mm2)\") + xlab(\"log Brain Mass (g)\")+   scale_color_npg()  slope.prior.plot intercept_test<-rnorm(100,stan_adaptive_data$ols_intercept,0.5) #slope_test<-rnorm(100,ols.slope,0.5) slope_test<-rnorm(100,stan_adaptive_data$ols_slope,0.4)  slope.prior.plot<-ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   geom_point()+   geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   theme_bw()+   ggtitle(\"Priors for Intercept and Slope\")+   ylab(\"log Neocortex Area (mm2)\") + xlab(\"log Brain Mass (g)\")+   scale_color_npg()  slope.prior.plot"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"priors-block","dir":"Articles","previous_headings":"Explore Priors","what":"Priors block","title":"OU-models","text":"//Priors ~ lognormal(1.0,1.0); //sigma2_y ~ exponential(0.1); alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"half-life","dir":"Articles","previous_headings":"Explore Priors","what":"Half-life","title":"OU-models","text":"Since tree scaled unit length = 1, original phylogeny ~27 Ma, like half-life prior allow quick adaptation (e.g < 1 Ma, equals < 0.04 tree units), slow adaptation (e.g. > 27 Ma, equals 1 tree units). Thus, 10% quantile distrubution 0.04 90% 1. can explore changing parameters priors affect half-life using code . values 1.0 1.0 two parameters sufficient example analysis, given data parameters explored best values determined.   looks pretty good. enter priors, open Blouch Stan code change Priors code within model block. set priors , log mean log sd values .","code":"########################################### #Log-normal prior for half-life - based on alpha par.alpha <- list(meanlog=1.0, sdlog=1.0)   samp <- rlnorm(10000, mean=par.alpha$meanlog, sd=par.alpha$sdlog) samp<-samp[samp>=0]  hist(samp, breaks=10000, main=\"Prior density of alpha\",xlim=c(0,3)) #abline(v=(c(log(2)/0.07142857,log(2)/1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  min(samp) #> [1] 0.044341 max(samp) #> [1] 144.8103 log(2)/min(samp) #> [1] 15.6322 log(2)/max(samp) #> [1] 0.004786587  quantiles <- c(0, 0.01, 0.025,0.10, 0.25, 0.5, 0.75,0.90,0.95, 0.975, 0.99, 1) #hls <- rlnorm(10000, meanlog=log(2)/par.alpha$meanlog, sdlog=log(2)/par.alpha$sdlog) #hls<-hls[hls>=0] qs <- quantile(log(2)/samp, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life round(qs, 2) #>    0%    1%  2.5%   10%   25%   50%   75%   90%   95% 97.5%   99%  100%  #>  0.00  0.03  0.04  0.07  0.13  0.25  0.50  0.92  1.31  1.82  2.74 15.63  hist((log(2)/samp), breaks=10000, main=\"Prior density of half-life\",xlim=c(0,3)) abline(v=(c(0.04,1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (27 Ma) - ########################################"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"priors-block-1","dir":"Articles","previous_headings":"Explore Priors","what":"Priors Block","title":"OU-models","text":"//Priors ~ lognormal(1.0,1.0); //= log(2)/half-life //sigma2_y ~ exponential(0.1); // alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope parameter set sigma2_y parameter, default case simply uniform distribution lower limt 0 upper limit equal 4 times variance Y. Stan, uniform priors defined parmeters block given limits block: parameters { real <lower = 0> ; real <lower = 0, upper = variance(Y)*4> sigma2_y; //Added limit variance real alpha; //OU alpha vector[Z] beta; //OU beta Priors code within model block, given prior distribution. //Priors ~ lognormal(1.0,1.0); //= log(2)/half-life //sigma2_y ~ exponential(0.1); // alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"sigma2_y","dir":"Articles","previous_headings":"Explore Priors","what":"Sigma2_y","title":"OU-models","text":"wanted explore sigma2_y prior compares expectations use code , example use uniform prior discussed .","code":"library(extraDistr) ########################################### #Normal - based on alpha par.sigma2y <- list(sigma=1.0)  samp <- rhcauchy(10000, sigma=par.sigma2y$sigma)  hist(samp, breaks=10000, main=\"Prior density of Sigma2y\",xlim=c(0,3)) #abline(v=(c(log(2)/0.07142857,log(2)/1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  min(samp) #> [1] 0.0001948322 max(samp) #> [1] 17032.5 log(2)/min(samp) #> [1] 3557.663 log(2)/max(samp) #> [1] 4.069557e-05  quantiles <- c(0, 0.01, 0.025,0.10, 0.25, 0.5, 0.75, 0.90, 0.975, 0.99, 1) #hls <- rlnorm(10000, meanlog=log(2)/par.alpha$meanlog, sdlog=log(2)/par.alpha$sdlog) #hls<-hls[hls>=0] qs <- quantile(samp, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life round(qs, 2) #>       0%       1%     2.5%      10%      25%      50%      75%      90%  #>     0.00     0.02     0.04     0.16     0.43     1.01     2.40     6.40  #>    97.5%      99%     100%  #>    22.75    56.37 17032.50  hist(samp/(2*2), breaks=10000, main=\"Prior density of Vy\",xlim=c(0,3)) #abline(v=(c(0.07142857,1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  ########################################"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-effect-model","dir":"Articles","previous_headings":"","what":"Direct Effect Model","title":"OU-models","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Now lets simple analysis. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model","dir":"Articles","previous_headings":"Direct Effect Model","what":"Run Model","title":"OU-models","text":"run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code.","code":"fit.direct<- rstan::sampling(stanmodels$blouchOU_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Direct Effect Model","what":"Parameter Estimates","title":"OU-models","text":"Stan prints lot info, lets just look parameter estimates store important stuff later. alpha intercept beta slope direct effect relationship brain mass body mass. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"#Lets look at the parameter estimates print(fit.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOU_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a         5.60    0.28 8.53 0.41 1.38 2.84 6.15 29.70   954    1 #> hl        0.40    0.01 0.48 0.02 0.11 0.24 0.50  1.68  1691    1 #> alpha     5.05    0.00 0.04 4.97 5.03 5.05 5.08  5.14  1813    1 #> beta[1]   0.57    0.00 0.02 0.53 0.55 0.57 0.58  0.61  1956    1 #> vy        0.02    0.00 0.01 0.01 0.01 0.01 0.02  0.05  2597    1 #> r_squared 0.96    0.00 0.00 0.95 0.96 0.96 0.96  0.97  1167    1 #> sigma2_y  0.15    0.01 0.22 0.02 0.05 0.08 0.16  0.77   846    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:50:38 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.direct <- rstan::extract(fit.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"Direct Effect Model","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"alpha\",\"beta[1]\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"alpha\",\"beta[1]\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"OU-models","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Run Model","title":"OU-models","text":"code mostly , data type sent Stan different format stan_constraint_data .","code":"fit.adaptive<- rstan::sampling(stanmodels$blouchOU_v1,data = stan_adaptive_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Parameter Estimates","title":"OU-models","text":", lets look parameter estimates alpha intercept beta optimal slope adaptive regression brain mass body mass, beta_evol slope evolutionary regression. parameters rate adaptation (), phylogenetic half life (hl), equilibrium variance OU process vy, r_squared, standard deviation random changes sigma2_y. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"print(fit.adaptive,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOU_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>               mean se_mean    sd  2.5%   25%   50%   75%  97.5% n_eff Rhat #> a            42.64    0.53 23.14 15.21 26.90 37.32 51.71 102.06  1880    1 #> hl            0.02    0.00  0.01  0.01  0.01  0.02  0.03   0.05  2249    1 #> alpha         5.06    0.00  0.03  4.99  5.04  5.06  5.08   5.12  2899    1 #> beta[1]       0.59    0.00  0.02  0.55  0.57  0.59  0.60   0.63  2951    1 #> beta_evol[1]  5.06    0.00  0.00  5.05  5.06  5.06  5.06   5.06  4587    1 #> beta_evol[2]  0.57    0.00  0.00  0.57  0.57  0.57  0.57   0.57  2779    1 #> vy            0.01    0.00  0.00  0.00  0.00  0.00  0.01   0.02  3299    1 #> r_squared     0.96    0.00  0.00  0.95  0.96  0.96  0.96   0.97  1731    1 #> sigma2_y      0.47    0.01  0.50  0.01  0.12  0.30  0.64   1.94  1802    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:56:02 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.adaptive <- rstan::extract(fit.adaptive)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"Adaptive Model","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"explore trance density plots","code":"par(mfrow = c(1,3))  traceplot(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) stan_dens(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"OU-models","text":"using Direct Effect Adaptive model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package. Looking , can read results data X times likely model assumes direct effect model rather af adaptive model.","code":"lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.adaptive<-bridge_sampler(fit.adaptive,silent=TRUE) BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.adaptive) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.adaptive: 32.67914"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"brownian-model","dir":"Articles","previous_headings":"","what":"Brownian Model","title":"OU-models","text":"Blouch can also fit Brownian motion model data, can compared models using Bayes Factors. Note possible Blouch, assuming data follows model evolution, rather testing using Direct Effect Adaptive models . use stan_constraint_data type new Stan function. Note priors intercept slope set previously, sigma2_y longer upper range values declaration.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model-2","dir":"Articles","previous_headings":"Brownian Model","what":"Run Model","title":"OU-models","text":"","code":"fit.BM<- rstan::sampling(stanmodels$blouchBM_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates-2","dir":"Articles","previous_headings":"Brownian Model","what":"Parameter Estimates","title":"OU-models","text":"Parameters follow , beta Brownian slope.","code":"print(fit.BM,pars = c(\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchBM_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> alpha     5.05       0 0.08 4.89 5.00 5.05 5.11  5.22  3038    1 #> beta[1]   0.56       0 0.02 0.51 0.54 0.56 0.57  0.60  3030    1 #> r_squared 0.99       0 0.01 0.98 0.99 0.99 0.99  0.99  2436    1 #> sigma2_y  0.03       0 0.01 0.01 0.02 0.02 0.03  0.05  2716    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 09:58:50 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.BM <- rstan::extract(fit.BM)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters-2","dir":"Articles","previous_headings":"Brownian Model","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"explore trance density plots   Looking Good!","code":"par(mfrow = c(1,3))  traceplot(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) stan_dens(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-vs--bm-model-comparison-using-bf","dir":"Articles","previous_headings":"","what":"Direct vs. BM Model Comparison using BF","title":"OU-models","text":"using type model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package. Looking , can read results data X times likely model assumes direct effect model rather af Brownian-motion model.","code":"library(bridgesampling) lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.BM<-bridge_sampler(fit.BM,silent=TRUE)  BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.BM) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.BM: 1.25072"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"ou1","dir":"Articles","previous_headings":"","what":"OU1","title":"OU-models","text":"Finally, Blouch can fit model single intercept/optimum, half-life can interpreted measure phylogenetic effect (see Hansen et al. 2008). model little different previous models predictors.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"run-model-3","dir":"Articles","previous_headings":"OU1","what":"Run Model","title":"OU-models","text":"","code":"fit.OU1<- rstan::sampling(stanmodels$blouchOU1_v1,data = stan_OU1_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"parameter-estimates-3","dir":"Articles","previous_headings":"OU1","what":"Parameter Estimates","title":"OU-models","text":"Lets look parameter estimates Parameters , alpha phylogenetically informed intercept hl estimate phylogenetic effect. can see half-life many multiples tree length, meaning brain mass evolving Brownian-motion process predictors included model. See Hansen et al. (2008) Labra et al. (2009) effect, half-life = 0, influence past, species independent, half-life = infinity, centralizing tendency, trait evolves Brown- ian motion (Labra et al. 2009).","code":"print(fit.OU1,pars = c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma2_y\")) #> Inference for Stan model: blouchOU1_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean    sd 2.5%  25%  50%   75% 97.5% n_eff Rhat #> a         0.25    0.01  0.32 0.01 0.05 0.14  0.32  1.06  2661    1 #> hl       12.78    0.36 18.18 0.65 2.17 5.09 14.39 71.27  2621    1 #> alpha     5.12    0.00  0.36 4.42 4.88 5.12  5.37  5.83  6455    1 #> vy        8.01    0.24 11.64 0.61 1.53 3.31  9.06 45.56  2396    1 #> sigma2_y  0.97    0.01  0.33 0.54 0.76 0.91  1.12  1.77  2647    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec 29 10:00:54 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #pairs(fit.OU1,pars = c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma\",\"sigma2_y\"))  #For downstream analysis and plots ext.fit.OU1 <- rstan::extract(fit.OU1)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters-3","dir":"Articles","previous_headings":"OU1","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.OU1,c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma2_y\")) stan_dens(fit.OU1,c(\"a\",\"hl\",\"alpha\",\"vy\",\"sigma2_y\"))"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-models","text":"Let’s make plots results","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"load-plot-packages","dir":"Articles","previous_headings":"Plots","what":"Load Plot Packages","title":"OU-models","text":"","code":"library(ggsci) library(ggplot2)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-effect-plot","dir":"Articles","previous_headings":"Plots","what":"Direct Effect Plot","title":"OU-models","text":"","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.direct$alpha),slope = mean(ext.fit.direct$beta[,1]),lty=1)+   geom_point(size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Direct Effect Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"adaptive-plot","dir":"Articles","previous_headings":"Plots","what":"Adaptive Plot","title":"OU-models","text":"","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.adaptive$alpha),slope = mean(ext.fit.adaptive$beta[,1]),lty=1)+   geom_abline(intercept=mean(ext.fit.adaptive$alpha),slope = mean(ext.fit.adaptive$beta_evol[,2]),lty=2)+   geom_point(size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Adaptive Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"OU-models","text":"Grabowski, M., K. L. Voje, T. F. Hansen. 2016. Evolutionary modeling correcting observation error support 3/5 brain-body allometry primates. J. Hum. Evol. 94:106–116. Gronau, Q. F., H. Singmann, E.-J. Wagenmakers. 2020. bridgesampling: R Package Estimating Normalizing Constants. Journal Statistical Software 92:1–29. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Labra, ., J. Pienaar, T. F. Hansen. 2009. Evolution thermal physiology Liolaemus lizards: adaptation, phylogenetic inertia, niche tracking. . Nat. 174:204–220. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4. Stan Development Team. 2021. RStan: R interface Stan. R package version 2.21.3, https://mc-stan.org/. Toljagić, O., K. L. Voje, M. Matschiner, L. H. Liow, T. F. Hansen. 2017. Millions Years Behind: Slow Adaptation Ruminants Grasslands. Systematic Biology 67:145–157. Uyeda, J. C., L. J. Harmon. 2020. R Package treeplyr.","code":""},{"path":"https://github.com/mark-grabowski/blouch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Grabowski. Author, maintainer.","code":""},{"path":"https://github.com/mark-grabowski/blouch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grabowski M (2021). blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH). R package version 1.0.0, https://github.com/mark-grabowski/blouch.","code":"@Manual{,   title = {blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)},   author = {Mark Grabowski},   year = {2021},   note = {R package version 1.0.0},   url = {https://github.com/mark-grabowski/blouch}, }"},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"blouch","dir":"","previous_headings":"","what":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH) fits adaptive models continuous trait evolution Bayesian framework based categorical continuous predictors, incorporates measurement error following approach Hansen et al. (2008). Blouch can also make phylogenetically informed predictions known unknown traits clade, given dataset comparative measurements phylogeny including taxa interest. Blouch Bayesian version frequentist brother, Slouch (Kopperud et al. 2020), available . front-end component Blouch written R (R Core Team, 2015), nuts bolts written language Stan (Carpenter et al., 2017), allows estimation Bayesian models using Markov chain Monte Carlo (MCMC) methods based Hamilton Monte Carlo sampler.","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"just getting started blouch recommend starting tutorial vignettes available package website. Blouch based article currently review: Grabowski, M (review). Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH).","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"instalation-instructions","dir":"","previous_headings":"","what":"Instalation Instructions","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"install R Stan functions associated Blouch github, first install package devtools: install blouch","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"mark-grabowski/blouch\") library(blouch)"},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Please visit package website .","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Carpenter, B., . Gelman, M. D. Hoffman, D. Lee, B. Goodrich, M. Betancourt, M. Brubaker, J. Guo, P. Li, . Riddell. 2017. Stan: Probabilistic Programming Language. Journal Statistical Software 76:1–32. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4.","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'blouch' package. — blouch-package","title":"The 'blouch' package. — blouch-package","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH)","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouch-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'blouch' package. — blouch-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.26.4. https://mc-stan.org","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"R setup file blouchOU_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"","code":"blouchOU.setup.v1(trdata, names.traits)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr names.traits Vector trait names","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOU_v1.stan — blouchOU.setup.v1","text":"object class list use blouchOU_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"R setup file blouchOUPredict_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"","code":"blouchOUPredict.setup.v1(trdata, trdata.fos, names.traits, classical)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr - extant species trdata.fos Data formatted make.treedata function R Pacakge treeplyr - extant fossil names.traits Vector trait names classical Numeric denoting whether classical regression (=1) inverse regression (=0) used prediction","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOUPredict_v1.stan — blouchOUPredict.setup.v1","text":"object class list use blouchOUPredict_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"R setup file blouchOUReg_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"","code":"blouchOUReg.setup.v1(trdata, names.traits)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr names.traits Vector trait names","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOUReg_v1.stan — blouchOUReg.setup.v1","text":"object class list use blouchOUReg_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/news/index.html","id":"blouch-100","dir":"Changelog","previous_headings":"","what":"blouch 1.0.0","title":"blouch 1.0.0","text":"Added NEWS.md file track changes package.","code":""}]
