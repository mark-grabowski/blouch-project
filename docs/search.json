[{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"ou-models-with-prediction","dir":"Articles","previous_headings":"","what":"OU Models with Prediction","title":"OU-Models-Prediction","text":"vignette walks basic steps running analysis Blouch including prediction unknown/fossil values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-Models-Prediction","text":"load R packages used setup data blouch, make figures post-analysis, etc. includes Rstan, R interface Stan. used Rstan , needs set shown : https://mc-stan.org/users/interfaces/rstan","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\") #library(blouch)  #devtools::install_github(\"Mark-Grabowski/blouch\" #                         ,ref=\"master\" #                         ,auth_token = \"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\" #                         ) library(blouch) load_all() #> ℹ Loading blouch # Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE)  #remotes::install_github(\"stan-dev/rstan\", ref = \"develop\", subdir = \"rstan/rstan\")"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"scale-tree","dir":"Articles","previous_headings":"","what":"Scale Tree","title":"OU-Models-Prediction","text":"purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data. ## Data Prep use treeplyr function make.treedata combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages.","code":"## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6) ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"classical-regression","dir":"Articles","previous_headings":"","what":"Classical Regression","title":"OU-Models-Prediction","text":"assign one taxa fossil species predicted, use Classical Regression predict unknown value based combination phylogeny allometry. regression Y - brain size X body size, predicting fossil X (body size) based Y (brain size). Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata$dat$Status<-\"Extant\" #Label all species as extant ruminant.trdata$dat$Status[1]<-\"Extinct\" #Make one extinct n.fos<-1  #Classical Regression - Predicting X using regression of Y on X ruminant.trdata$dat$body_mass_g_log_mean[1]<-0 #Assign this species fake body mass ruminant.trdata$dat$body_se_squared[1]<-0 #And ME  ruminant.extant.trdata<-filter(ruminant.trdata, (Status == \"Extant\")) #Only non-fossil species  #Mean Standardized based on whether fossil is included in dataset  #Classical regression - predicting brain size - X ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean[-n.fos]) ruminant.extant.trdata$dat$bodycentered<-ruminant.extant.trdata$dat$body_mass_g_log_mean-mean(ruminant.extant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"rescale-tree","dir":"Articles","previous_headings":"","what":"Rescale Tree","title":"OU-Models-Prediction","text":"Next, rescale Tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1  l.tree<-max(branching.times(ruminant.extant.trdata$phy)) ruminant.extant.trdata$phy$edge.length<-ruminant.extant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.extant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"running-blouch-data-setup-function---1st-trait-is-adapting-to-2","dir":"Articles","previous_headings":"","what":"Running Blouch Data Setup Function - 1st trait is adapting to 2","title":"OU-Models-Prediction","text":"finally setting dataset run Blouch, using blouchOUPredict.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUPredict.setup.v1(ruminant.extant.trdata,ruminant.trdata,names.traits,classical=1) #> [1] \"Fossil Species # 1\"  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"explore-priors-slope-and-intercept","dir":"Articles","previous_headings":"","what":"Explore Priors: Slope and intercept","title":"OU-Models-Prediction","text":"Priors must set manually Stan Blouch code (e.g. blouchOUPredict_v1.stan), use priors analysis OU-Models vignette. Go back look vignette need explore effect priors - use default values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"direct-effect-model-for-prediction","dir":"Articles","previous_headings":"","what":"Direct EFfect Model for Prediction","title":"OU-Models-Prediction","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. using model predict unknown values assuming allometric relationship may valid prediction adaptive relationship. run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code. Stan prints lot info, lets just look parameter estimates store important stuff later. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"fit.fos.direct<- rstan::sampling(stanmodels$blouchOUPredict_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),save_warmup=FALSE) print(fit.fos.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\",\"RMSE\",\"RMSE_mu\",\"X_pred_fos_means\")) #> Inference for Stan model: blouchOUPredict_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>                      mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> a                    5.39    0.25 8.07  0.38  1.37  2.77  6.12 27.36  1052    1 #> hl                   0.42    0.01 0.59  0.03  0.11  0.25  0.51  1.82  1716    1 #> alpha                5.07    0.00 0.04  4.99  5.04  5.06  5.09  5.15  1551    1 #> beta[1]              0.57    0.00 0.02  0.53  0.56  0.57  0.58  0.61  1942    1 #> r_squared            0.96    0.00 0.00  0.95  0.96  0.96  0.97  0.97  1182    1 #> sigma2_y             0.14    0.01 0.20  0.02  0.04  0.07  0.15  0.71  1010    1 #> RMSE                 0.29    0.00 0.03  0.24  0.28  0.29  0.31  0.35  3010    1 #> RMSE_mu              0.27    0.00 0.02  0.26  0.26  0.26  0.27  0.32  1004    1 #> X_pred_fos_means[1] -0.48    0.00 0.17 -0.82 -0.59 -0.47 -0.36 -0.14  2879    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Dec 11 20:36:06 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  posterior.fit.fos.direct <- rstan::extract(fit.fos.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Prediction","text":"can look procedures using standard trace density plots Rstan","code":"par(mfrow = c(1,3))    traceplot(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) #3 X 8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-Models-Prediction","text":"Let’s make plots results","code":"library(ggsci) library(ggplot2) library(plotly) #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"data-setup-for-plots","dir":"Articles","previous_headings":"","what":"Data Setup for Plots","title":"OU-Models-Prediction","text":"","code":"old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  fos.index<-which(ruminant.trdata$dat$Status==\"Extinct\") print(paste(\"Fossil Species #\",fos.index)) #> [1] \"Fossil Species # 1\" extant.index<-which(ruminant.trdata$dat$Status==\"Extant\")  body.predictions<-apply(posterior.fit.fos.direct$X_pred_fos_means,2,mean) body.predictions.extant<-apply(posterior.fit.fos.direct$X_pred_extant_means,2,mean)  extant.data<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[-fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[-fos.index],log_body_pred = body.predictions.extant,log_body = ruminant.trdata$dat$bodycentered[-fos.index],Status=\"Extant\")  fos.predictions<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[fos.index], log_body_pred = body.predictions[fos.index],log_body=NA,Status=\"Extinct\")           merged.data<-rbind(extant.data,fos.predictions)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"make-plots","dir":"Articles","previous_headings":"","what":"Make Plots","title":"OU-Models-Prediction","text":"","code":"brbo.plot<-ggplot(merged.data,aes(y=log_brain))+ geom_point(aes(x=log_body_pred,color=Status),size=2.5,alpha=0.8)+ geom_point(aes(x=log_body),size=2.0,alpha=0.4)+ geom_abline(intercept=mean(posterior.fit.fos.direct$alpha),slope = mean(posterior.fit.fos.direct$beta),lty=2)+ theme_bw()+ theme(legend.position=\"bottom\")+ #5X5 ylab(\"log Brain Mass (g)\")+   xlab(\"log Body Mass (g)\")  #+theme(legend. position = \"none\") brbo.plot+scale_color_aaas() #> Warning: Removed 1 rows containing missing values (geom_point). #Export 5.25X5 PDF"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"inverse-regression","dir":"Articles","previous_headings":"","what":"Inverse Regression","title":"OU-Models-Prediction","text":"assign one taxa fossil species predicted, use Inverse Regression predict unknown value based combination phylogeny allometry. regression Y - brain size X body size, predicting fossil Y (brain mass) based X (body mass). Finally mean scale X data (body mass) average across species 0.","code":"ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  ruminant.trdata #Full dataset #> $phy  #>  #> Phylogenetic tree with 43 tips and 42 internal nodes. #>  #> Tip labels: #>   Antilocapra_americana, Addax_nasomaculatus, Aepyceros_melampus, Alcelaphus_buselaphus_buselaphus, Antidorcas_marsupialis, Antilope_cervicapra, ... #> Node labels: #>   MF, MF, MF, MF, MF, MF, ... #>  #> Rooted; includes branch lengths. #>  #> $dat  #> # A tibble: 43 × 10 #>    brain_mass_g_log_… brain_se_squared n_brain body_mass_g_log_… body_se_squared #>                 <dbl>            <dbl>   <int>             <dbl>           <dbl> #>  1               4.80         0.0109         1             11.0          0.0426  #>  2               5.30         0.00547        2             11.6          0.0213  #>  3               5.15         0.000995      11             10.9          0.00387 #>  4               5.69         0.00219        5             11.9          0.00852 #>  5               4.91         0.000842      13             10.5          0.00328 #>  6               4.77         0.0109         1             10.4          0.0426  #>  7               4.42         0.0109         1              9.43         0.0426  #>  8               4.42         0.00365        3              9.58         0.0213  #>  9               3.52         0.00137        8              8.46         0.00533 #> 10               5.72         0.0109         1             11.9          0.0426  #> # … with 33 more rows, and 5 more variables: n_body <int>, #> #   neocortex_area_mm2_log_mean <dbl>, neocortex_se_squared <dbl>, #> #   n_neocortex <int>, diet <fct>  ruminant.trdata$dat$Status<-\"Extant\" #Label all species as extant ruminant.trdata$dat$Status[1]<-\"Extinct\" #Make one extinct n.fos<-1  #Inverse Regression - Predicting Y using regression of Y on X ruminant.trdata$dat$brain_mass_g_log_mean[1]<-0 #Assign this species fake body mass ruminant.trdata$dat$brain_se_squared[1]<-0 #And ME  ruminant.extant.trdata<-filter(ruminant.trdata, (Status == \"Extant\")) #Only non-fossil species  #Mean Standardized based on whether fossil is included in dataset ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean[-n.fos]) ruminant.extant.trdata$dat$bodycentered<-ruminant.extant.trdata$dat$body_mass_g_log_mean-mean(ruminant.extant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"rescale-tree-1","dir":"Articles","previous_headings":"","what":"Rescale Tree","title":"OU-Models-Prediction","text":"Next, rescale Tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1  l.tree<-max(branching.times(ruminant.extant.trdata$phy)) ruminant.extant.trdata$phy$edge.length<-ruminant.extant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.extant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"running-blouch-data-setup-function---1st-trait-is-adapting-to-2-1","dir":"Articles","previous_headings":"","what":"Running Blouch Data Setup Function - 1st trait is adapting to 2","title":"OU-Models-Prediction","text":"finally setting dataset run Blouch, using blouchOUPredict.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUPredict.setup.v1(ruminant.extant.trdata,ruminant.trdata,names.traits,classical=0) #> [1] \"Fossil Species # 1\"  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"direct-effect-model-for-prediction-1","dir":"Articles","previous_headings":"","what":"Direct EFfect Model for Prediction","title":"OU-Models-Prediction","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. using model predict unknown values assuming allometric relationship may valid prediction adaptive relationship. run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code. Stan prints lot info, lets just look parameter estimates store important stuff later. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"fit.fos.direct<- rstan::sampling(stanmodels$blouchOUPredict_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),save_warmup=FALSE) print(fit.fos.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\",\"RMSE\",\"RMSE_mu\",\"Y_pred_fos_means\")) #> Inference for Stan model: blouchOUPredict_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>                     mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a                   5.89    0.28 9.29 0.40 1.45 2.91 6.33 29.57  1141    1 #> hl                  0.39    0.02 0.58 0.02 0.11 0.24 0.48  1.72  1145    1 #> alpha               5.07    0.00 0.04 5.00 5.04 5.06 5.08  5.15  1752    1 #> beta[1]             0.57    0.00 0.02 0.53 0.56 0.57 0.58  0.61  2351    1 #> r_squared           0.96    0.00 0.00 0.95 0.96 0.96 0.97  0.97  1220    1 #> sigma2_y            0.15    0.01 0.23 0.02 0.04 0.07 0.16  0.80   943    1 #> RMSE                0.21    0.00 0.03 0.17 0.20 0.21 0.23  0.27  3032    1 #> RMSE_mu             0.15    0.00 0.01 0.15 0.15 0.15 0.16  0.18  1138    1 #> Y_pred_fos_means[1] 5.09    0.00 0.13 4.84 5.01 5.09 5.17  5.34  3373    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Dec 11 20:41:46 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  posterior.fit.fos.direct <- rstan::extract(fit.fos.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Prediction","text":"can look procedures using standard trace density plots Rstan","code":"par(mfrow = c(1,3))    traceplot(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.fos.direct,c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"sigma2_y\")) #3 X 8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"inverse-regression-plots","dir":"Articles","previous_headings":"","what":"Inverse Regression Plots","title":"OU-Models-Prediction","text":"Let’s make plots results","code":"library(ggsci) library(ggplot2) #library(plotly)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"data-setup-for-plots-1","dir":"Articles","previous_headings":"","what":"Data setup for plots","title":"OU-Models-Prediction","text":"","code":"old.par <- par(mar = c(0, 0, 0, 0)) par(old.par)  fos.index<-which(ruminant.trdata$dat$Status==\"Extinct\") print(paste(\"Fossil Species #\",fos.index)) #> [1] \"Fossil Species # 1\" extant.index<-which(ruminant.trdata$dat$Status==\"Extant\")  brain.predictions<-apply(posterior.fit.fos.direct$Y_pred_fos_means,2,mean) brain.predictions.extant<-apply(posterior.fit.fos.direct$Y_pred_extant_means,2,mean)  extant.data<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[-fos.index],log_brain = ruminant.trdata$dat$brain_mass_g_log_mean[-fos.index],log_brain_pred = brain.predictions.extant,log_body = ruminant.trdata$dat$bodycentered[-fos.index],Status=\"Extant\")  fos.predictions<-data.frame(Genus_Species = ruminant.trdata$phy$tip.label[fos.index], log_brain= NA, log_brain_pred = brain.predictions[fos.index],log_body=ruminant.trdata$dat$bodycentered[fos.index],Status=\"Extinct\")           merged.data<-rbind(extant.data,fos.predictions)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Prediction.html","id":"make-plots-1","dir":"Articles","previous_headings":"","what":"Make Plots","title":"OU-Models-Prediction","text":"","code":"brbo.plot<-ggplot(merged.data,aes(x=log_body))+ geom_point(aes(y=log_brain),size=2.0,alpha=0.4)+ geom_point(aes(y=log_brain_pred,color=Status),size=2.5,alpha=0.8)+ geom_abline(intercept=mean(posterior.fit.fos.direct$alpha),slope = mean(posterior.fit.fos.direct$beta),lty=2)+ theme_bw()+ theme(legend.position=\"bottom\")+ #5X5 xlab(\"log Body Mass (g)\")+   ylab(\"log Brain Mass (g)\")  #+theme(legend. position = \"none\") brbo.plot+scale_color_aaas() #> Warning: Removed 1 rows containing missing values (geom_point). #Export 5.25X5 PDF"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"ou-models","dir":"Articles","previous_headings":"","what":"OU Models","title":"OU-Models-Regimes","text":"vignette walks basic streps running analysis Blouch.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-Models-Regimes","text":"load R packages used setup data blouch, make figures post-analysis, etc. includes Rstan, R interface Stan. used Rstan , needs set shown : https://mc-stan.org/users/interfaces/rstan purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.  Stealing code Slouch tutorial, regimes shown painted phylogeny  Next use treeplyr function make.treedata combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.filter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages. Finally mean scale X data (body mass) average across species 0.","code":"rm(list=ls()) library(devtools) ## Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\")  library(blouch) load_all() ## ℹ Loading blouch # Load necessary packages library(ape) library(slouch) library(rstan) ## Loading required package: StanHeaders ##  ## rstan version 2.26.4 (Stan version 2.26.1) ## For execution on a local, multicore CPU with excess RAM we recommend calling ## options(mc.cores = parallel::detectCores()). ## To avoid recompilation of unchanged Stan programs, we recommend calling ## rstan_options(auto_write = TRUE) ## For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, ## change `threads_per_chain` option: ## rstan_options(threads_per_chain = 1) library(treeplyr) ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ##  ## Attaching package: 'treeplyr' ## The following object is masked from 'package:stats': ##  ##     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE) ## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6) ## Inspect the internal node regimes ## These have order n+1, n+2, n+3 ... internal_regimes <- factor(phy$node.label)  ## Concatenate tip and internal regimes. These will have order 1,2,3 ... regimes <- c(neocortex$diet, internal_regimes)  ## Pick out the regimes of the edges, in the order of phy$edge edge_regimes <- factor(regimes[phy$edge[,2]])  plot(phy,       edge.color = c(\"Black\", \"Orange\", \"blue\")[edge_regimes],       edge.width = 3, cex = 0.6) ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset  #Mean Scale ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean) #lm(ruminant.trdata$dat$brain_mass_g_log_mean~ruminant.trdata$dat$bodycentered+ruminant.trdata$dat$diet)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"rescale-tree","dir":"Articles","previous_headings":"","what":"Rescale Tree","title":"OU-Models-Regimes","text":"Next, rescale Tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) ## [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"","what":"Running Blouch Data Setup Function","title":"OU-Models-Regimes","text":"finally setting dataset run Blouch, using blouchOURegimes.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. Note categorical data come first list traits. list produced function data formatted run direct effect (constraint) models adaptive models. See Grabowski et al. (2016) models. first trait adapting towards second.","code":"#source(\"/Volumes/GoogleDrive/My Drive/Shared with Macbook/Current Projects/Blouch project/Stan Functions/blouch v1/Blouch Setup Files/blouchOUReg.setup.v1.R\")  #names.traits<-c(\"diet\",\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"diet\",\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOUReg.setup.v1(ruminant.trdata,names.traits)  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"explore-priors-slope-and-intercept","dir":"Articles","previous_headings":"","what":"Explore Priors: Slope and intercept","title":"OU-Models-Regimes","text":"Priors must set manually Stan Blouch code (e.g. blouchOUReg_v1.stan), use priors analysis OU-Models vignette. Go back look vignette need explore effect priors - use default values.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"direct-effect-models","dir":"Articles","previous_headings":"","what":"Direct Effect Models","title":"OU-Models-Regimes","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Now lets simple analysis. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code. Stan prints lot info, lets just look parameter estimates store important stuff later. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"fit.direct<- rstan::sampling(stanmodels$blouchOUReg_v1,data = stan_constraint_data,chains = 2,iter = 100,control=list(adapt_delta=0.95),show_messages=FALSE) ## Warning: The largest R-hat is NA, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#r-hat ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#bulk-ess ## Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#tail-ess #Lets look at the parameter estimates print(fit.direct,pars = c(\"a\",\"hl\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) ## Inference for Stan model: blouchOUReg_v1. ## 2 chains, each with iter=100; warmup=50; thin=1;  ## post-warmup draws per chain=50, total post-warmup draws=100. ##  ##           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat ## a         4.81    1.60 4.53 0.38 1.75 3.88 5.44 18.61     8 1.29 ## hl        0.36    0.09 0.45 0.04 0.13 0.18 0.40  1.81    22 1.10 ## beta[1]   5.17    0.02 0.14 4.99 5.08 5.14 5.21  5.52    45 1.02 ## beta[2]   5.17    0.02 0.14 4.98 5.07 5.16 5.24  5.47    64 1.01 ## beta[3]   5.00    0.00 0.04 4.91 4.98 5.00 5.03  5.08   126 0.99 ## beta[4]   0.57    0.00 0.03 0.53 0.55 0.57 0.59  0.62    88 0.99 ## vy        0.02    0.00 0.01 0.01 0.01 0.02 0.02  0.03    32 1.02 ## r_squared 0.96    0.00 0.00 0.95 0.96 0.96 0.97  0.97    27 1.13 ## sigma2_y  0.14    0.04 0.12 0.02 0.06 0.10 0.16  0.44     9 1.29 ##  ## Samples were drawn using NUTS(diag_e) at Sat Dec 11 20:45:38 2021. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at  ## convergence, Rhat=1). #For downstream analysis and plots ext.fit.direct <- rstan::extract(fit.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Regimes","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"OU-Models-Regimes","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable. code mostly , data type sent Stan different format stan_constraint_data . Stan prints lot info, lets just look parameter estimates store important stuff later. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"fit.adaptive<- rstan::sampling(stanmodels$blouchOUReg_v1,data = stan_adaptive_data,chains = 2,iter = 100,control=list(adapt_delta=0.95),show_messages=FALSE) ## Warning: The largest R-hat is NA, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#r-hat ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#bulk-ess ## Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#tail-ess #Lets look at the parameter estimates print(fit.adaptive,pars = c(\"a\",\"hl\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) ## Inference for Stan model: blouchOUReg_v1. ## 2 chains, each with iter=100; warmup=50; thin=1;  ## post-warmup draws per chain=50, total post-warmup draws=100. ##  ##            mean se_mean    sd  2.5%   25%   50%   75%  97.5% n_eff Rhat ## a         50.70    8.13 29.05 15.75 31.31 44.03 62.06 116.09    13 1.07 ## hl         0.02    0.00  0.01  0.01  0.01  0.02  0.02   0.04    11 1.08 ## beta[1]    5.13    0.01  0.05  5.04  5.10  5.12  5.17   5.22    96 1.01 ## beta[2]    5.09    0.01  0.06  4.99  5.05  5.09  5.13   5.20    43 1.01 ## beta[3]    5.00    0.00  0.04  4.93  4.98  5.01  5.03   5.07   128 0.99 ## beta[4]    0.59    0.00  0.02  0.54  0.58  0.59  0.60   0.65   200 0.98 ## vy         0.00    0.00  0.00  0.00  0.00  0.00  0.01   0.01     8 1.13 ## r_squared  0.97    0.00  0.00  0.96  0.96  0.97  0.97   0.97    52 1.06 ## sigma2_y   0.52    0.23  0.52  0.02  0.12  0.22  0.94   1.76     5 1.17 ##  ## Samples were drawn using NUTS(diag_e) at Sat Dec 11 20:52:52 2021. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at  ## convergence, Rhat=1). #For downstream analysis and plots ext.fit.adapive <- rstan::extract(fit.adaptive)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"trace-and-density-plots-for-estimated-parameters-1","dir":"Articles","previous_headings":"","what":"Trace and Density Plots for estimated parameters","title":"OU-Models-Regimes","text":"can look procedures using standard trace density plots Rstan  look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"beta\",\"vy\",\"sigma2_y\"))"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"OU-Models-Regimes","text":"using Direct Effect Adaptive model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package (CITATION). find data 5.2 likely model assumes direct effect model rather af adaptive model.","code":"lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.adaptive<-bridge_sampler(fit.adaptive,silent=TRUE) BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.adaptive) BF_att ## Estimated Bayes factor in favor of lml.fit.direct over lml.fit.adaptive: 57.14617"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-Models-Regimes","text":"Let’s make plots results","code":"library(ggsci) library(ggplot2)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"direct-effect-plot","dir":"Articles","previous_headings":"","what":"Direct Effect Plot","title":"OU-Models-Regimes","text":"diet data three regimes, order: Levels: Br Gr MF. results plotted suggest third regime effect relative brain mass.","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.direct$beta[,1]),slope = mean(ext.fit.direct$beta[,4]),lty=1)+   geom_abline(intercept=mean(ext.fit.direct$beta[,2]),slope = mean(ext.fit.direct$beta[,4]),lty=2)+   geom_abline(intercept=mean(ext.fit.direct$beta[,3]),slope = mean(ext.fit.direct$beta[,4]),lty=3)+   geom_point(data=ruminant.trdata$dat,mapping=aes(color=diet), size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Direct Effect Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models-Regimes.html","id":"adaptive-plot","dir":"Articles","previous_headings":"","what":"Adaptive Plot","title":"OU-Models-Regimes","text":"diet data three regimes, order: Levels: Br Gr MF. results plotted suggest first regime might effect adaptive relationship brain mass body mass.","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,1]),slope = mean(ext.fit.adapive$beta[,4]),lty=1)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,2]),slope = mean(ext.fit.adapive$beta[,4]),lty=2)+   geom_abline(intercept=mean(ext.fit.adapive$beta[,3]),slope = mean(ext.fit.adapive$beta[,4]),lty=3)+   geom_point(data=ruminant.trdata$dat,mapping=aes(color=diet), size=2.0,alpha=0.8)+   theme_bw()+  theme(legend.position=\"bottom\")+   ggtitle(\"Adaptive Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"ou-models","dir":"Articles","previous_headings":"","what":"OU Models","title":"OU-models","text":"vignette walks basic streps running analysis Blouch.","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"OU-models","text":"load R packages used setup data blouch, make figures post-analysis, etc. includes Rstan, R interface Stan. used Rstan , needs set shown : https://mc-stan.org/users/interfaces/rstan purposes illustrating software, use dataset ruminant brain body sizes bundled Slouch package (Kopperud et al. 2020) corresponding phylogenetic tree (Toljagić et al. 2017). First, organize brain body data.  Next use treeplyr function make.treedata combine data tree based “species” column, taxa names. See https://github.com/uyedaj/treeplyr package.finlter data individuals brain body size, well variance brain body size included. Variance traits considered measurement error, estimation error species averages. Finally mean scale X data (body mass) average across species 0.","code":"rm(list=ls()) library(devtools) #> Loading required package: usethis #devtools::install_github(\"Mark-Grabowski/blouch\")  library(blouch) load_all() #> ℹ Loading blouch # Load necessary packages library(ape) library(slouch) library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.26.4 (Stan version 2.26.1) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) library(treeplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'treeplyr' #> The following object is masked from 'package:stats': #>  #>     reorder library(ggplot2) library(bridgesampling)  #For execution on a local, multicore CPU with excess RAM we recommend calling #options(mc.cores = parallel::detectCores()) options(mc.cores = 2) rstan_options(auto_write = TRUE) ## Load the phylogenetic tree with annotation data data(artiodactyla) phy <- artiodactyla  ## Load the neocortex dataset data(neocortex)  ## Plot the tree plot(ladderize(phy), cex = 0.6) ruminant.trdata <- make.treedata(phy, neocortex,name_column=\"species\")  ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_mass_g_log_mean)) & !(is.na(body_mass_g_log_mean))) ruminant.trdata<-filter(ruminant.trdata,!(is.na(brain_se_squared)) & !(is.na(body_se_squared)))  #ruminant.trdata #Full dataset  #Mean Scale ruminant.trdata$dat$bodycentered<-ruminant.trdata$dat$body_mass_g_log_mean-mean(ruminant.trdata$dat$body_mass_g_log_mean)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"rescale-tree","dir":"Articles","previous_headings":"","what":"Rescale Tree","title":"OU-models","text":"Next, rescale Tree Height = 1","code":"l.tree<-max(branching.times(ruminant.trdata$phy)) ruminant.trdata$phy$edge.length<-ruminant.trdata$phy$edge.length/l.tree ## rescale tree to height 1 max(branching.times(ruminant.trdata$phy)) #> [1] 1"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"running-blouch-data-setup-function","dir":"Articles","previous_headings":"","what":"Running Blouch Data Setup Function","title":"OU-models","text":"finally setting dataset run Blouch, using blouchOU.setup.v1() function. function takes data formatted treeplyr, names traits interest order shown. list produced function data formatted run direct effect (constraint) models adaptative models. See Grabowski et al. (2016) models. first trait adapting towards second.","code":"#names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"NA\",\"NA\") #With ME names.traits<-c(\"brain_mass_g_log_mean\",\"bodycentered\",\"brain_se_squared\",\"body_se_squared\") #With ME  #Data must be logged before entry into blouch.setup #names.traits = c(response, predictor, me.response, me.predictor) - classical = 0 for inverse regression stan_data<-blouchOU.setup.v1(ruminant.trdata,names.traits)  stan_constraint_data<-stan_data[[1]] stan_adaptive_data<-stan_data[[2]]"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"explore-priors-slope-and-intercept","dir":"Articles","previous_headings":"","what":"Explore Priors: Slope and intercept","title":"OU-models","text":"Priors must set manually Stan Blouch code (e.g. blouchOU_v1.stan). big deal, explore data leads weak stong prors beforehand. use default priors Blouch appropriate smaller range datasets. First lets look priors intercept slope look given dispersion data. Blouch setup use OLS slope intercept mean parameter values normal distribution prior, just want figure appropriate standard deviation slope intercept terms. using OLS intercept slope regression brain body dataset mean prior values, look standard deviation (0.5 1.0 ) affects region explored Blouch.  first prior far two wide, let’s use stronger prior (0.5 0.4 ). looks pretty good. enter priors Blouch, open Blouch Stan code (e.g. blouchOU_v1.stan) change Priors code within model block. set intercept (alpha) slope (beta) best priors found .","code":"library(ggsci) library(ggplot2) intercept_test<-rnorm(100,stan_adaptive_data$ols_intercept,0.5) #slope_test<-rnorm(100,ols.slope,0.5) slope_test<-rnorm(100,stan_adaptive_data$ols_slope,1.0)  slope.prior.plot<-ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   geom_point()+   geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   theme_bw()+   ggtitle(\"Priors for Intercept and Slope\")+   ylab(\"log Neocortex Area (mm2)\") + xlab(\"log Brain Mass (g)\")+   scale_color_npg()  slope.prior.plot intercept_test<-rnorm(100,stan_adaptive_data$ols_intercept,0.5) #slope_test<-rnorm(100,ols.slope,0.5) slope_test<-rnorm(100,stan_adaptive_data$ols_slope,0.4)  slope.prior.plot<-ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   geom_point()+   geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   theme_bw()+   ggtitle(\"Priors for Intercept and Slope\")+   ylab(\"log Neocortex Area (mm2)\") + xlab(\"log Brain Mass (g)\")+   scale_color_npg()  slope.prior.plot"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"priors-block","dir":"Articles","previous_headings":"Explore Priors: Slope and intercept","what":"Priors block","title":"OU-models","text":"//Priors ~ lognormal(1.0,1.0); //sigma2_y ~ exponential(0.1); alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope","code":""},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"explore-priors-half-life","dir":"Articles","previous_headings":"","what":"Explore Priors: Half-life","title":"OU-models","text":"Since tree scaled unit length = 1, original phylogeny ~27 Ma, like half-life prior allow quick adaptation (e.g < 1 Ma, equals < 0.04 tree units), slow adaptation (e.g. > 27 Ma, equals 1 tree units). Thus, 10% quantile distrubution 0.04 90% 1. can explore changing parameters priors affect half-life using code . values 1.25 1.25 two parameters sufficient example analysis, given data parameters explored best values determined.   looks pretty good. enter priors, open Blouch Stan code change Priors code within model block. set priors , log mean log sd ","code":"########################################### #Log-normal prior for half-life - based on alpha par.alpha <- list(meanlog=1.25, sdlog=1.25)   samp <- rlnorm(10000, mean=par.alpha$meanlog, sd=par.alpha$sdlog) samp<-samp[samp>=0]  hist(samp, breaks=10000, main=\"Prior density of alpha\",xlim=c(0,3)) #abline(v=(c(log(2)/0.07142857,log(2)/1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  min(samp) #> [1] 0.04604457 max(samp) #> [1] 238.4862 log(2)/min(samp) #> [1] 15.05383 log(2)/max(samp) #> [1] 0.002906445  quantiles <- c(0, 0.01, 0.025,0.10, 0.25, 0.5, 0.75,0.90,0.95, 0.975, 0.99, 1) #hls <- rlnorm(10000, meanlog=log(2)/par.alpha$meanlog, sdlog=log(2)/par.alpha$sdlog) #hls<-hls[hls>=0] qs <- quantile(log(2)/samp, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life round(qs, 2) #>    0%    1%  2.5%   10%   25%   50%   75%   90%   95% 97.5%   99%  100%  #>  0.00  0.01  0.02  0.04  0.09  0.20  0.47  0.98  1.57  2.26  3.69 15.05  hist((log(2)/samp), breaks=10000, main=\"Prior density of half-life\",xlim=c(0,3)) abline(v=(c(0.04,1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (27 Ma) - ########################################"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"priors-block-1","dir":"Articles","previous_headings":"","what":"Priors Block","title":"OU-models","text":"//Priors ~ lognormal(1.0,1.0); //= log(2)/half-life //sigma2_y ~ exponential(0.1); // alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope parameter set sigma2_y parameter, default case simply uniform distribution lower limt 0 upper limit equal 4 times variance Y. Stan, uniform priors defined parmeters block given limits block: parameters { real <lower = 0> ; real <lower = 0, upper = variance(Y)*4> sigma2_y; //Added limit variance real alpha; //OU alpha vector[Z] beta; //OU beta Priors code within model block, given prior distribution. //Priors ~ lognormal(1.0,1.0); //= log(2)/half-life //sigma2_y ~ exponential(0.1); // alpha ~ normal(ols_intercept,0.5); //Intercept beta ~ normal(ols_slope, 0.4); //Slope wanted explore sigma2_y prior compares expectations use code , example use uniform prior discussed .","code":"library(extraDistr) ########################################### #Normal - based on alpha par.sigma2y <- list(sigma=0.1)  samp <- rhcauchy(10000, sigma=par.sigma2y$sigma)  hist(samp, breaks=10000, main=\"Prior density of Sigma2y\",xlim=c(0,3)) #abline(v=(c(log(2)/0.07142857,log(2)/1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  min(samp) #> [1] 1.93449e-05 max(samp) #> [1] 1179.557 log(2)/min(samp) #> [1] 35831.01 log(2)/max(samp) #> [1] 0.0005876333  quantiles <- c(0, 0.01, 0.025,0.10, 0.25, 0.5, 0.75, 0.90, 0.975, 0.99, 1) #hls <- rlnorm(10000, meanlog=log(2)/par.alpha$meanlog, sdlog=log(2)/par.alpha$sdlog) #hls<-hls[hls>=0] qs <- quantile(samp, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life round(qs, 2) #>      0%      1%    2.5%     10%     25%     50%     75%     90%   97.5%     99%  #>    0.00    0.00    0.00    0.02    0.04    0.10    0.24    0.62    2.54    6.41  #>    100%  #> 1179.56  hist(samp/(2*2), breaks=10000, main=\"Prior density of Vy\",xlim=c(0,3)) #abline(v=(c(0.07142857,1)), col=\"red\", lwd=2, lty=2) #Lines for 1 Ma and length of tree (14 Ma) -  ########################################"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-effect-models","dir":"Articles","previous_headings":"","what":"Direct Effect Models","title":"OU-models","text":"Now formatted data supplied reasonable priors various distributions, can now run Blouch. Now lets simple analysis. Blouch implements model constrained evolution (Hansen & Bartoszek, 2012) known direct effect model, previously implemented Grabowski et al. (2016), can used test allometric constraints. run model using 2 chains 4000 iterations per chain. code follows standard Stan/Rstan code. Stan prints lot info, lets just look parameter estimates store important stuff later. Blouch follows format parameter estimate presentation Slouch - see Hansen et al. (2008), Grabowski et al. (2016), Kopperud et al. (2020) explanation.","code":"fit.direct<- rstan::sampling(stanmodels$blouchOU_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE) #Lets look at the parameter estimates print(fit.direct,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOU_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> a         5.39    0.27 8.51 0.41 1.43 2.68 5.65 27.67   964    1 #> hl        0.41    0.01 0.55 0.03 0.12 0.26 0.49  1.70  1920    1 #> alpha     5.06    0.00 0.04 4.97 5.03 5.06 5.08  5.14  1716    1 #> beta[1]   0.57    0.00 0.02 0.52 0.56 0.57 0.58  0.61  2518    1 #> vy        0.02    0.00 0.01 0.01 0.01 0.01 0.02  0.05  2288    1 #> r_squared 0.96    0.00 0.00 0.95 0.96 0.96 0.96  0.97  1147    1 #> sigma2_y  0.15    0.01 0.22 0.02 0.05 0.08 0.15  0.78   849    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Dec 11 20:56:41 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.direct <- rstan::extract(fit.direct)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"trace-and-density-plots-for-estimated-parameters","dir":"Articles","previous_headings":"","what":"Trace and Density Plots for estimated parameters","title":"OU-models","text":"can look procedures using standard trace density plots Rstan   look good.","code":"par(mfrow = c(1,3))  traceplot(fit.direct,c(\"a\",\"hl\",\"alpha\",\"beta[1]\",\"vy\",\"sigma2_y\")) stan_dens(fit.direct,c(\"a\",\"hl\",\"alpha\",\"beta[1]\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"adaptive-model","dir":"Articles","previous_headings":"","what":"Adaptive Model","title":"OU-models","text":"Blouch also implements model adaptive evolution introduced Hansen et al. (2008). response variable evolves according Ornstein-Uhlenbeck process towards optimal state modeled function predictor variable. code mostly , data type sent Stan different format stan_constraint_data . , lets look parameter estimates explore trance density plots","code":"fit.adaptive<- rstan::sampling(stanmodels$blouchOU_v1,data = stan_adaptive_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE) print(fit.adaptive,pars = c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchOU_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>               mean se_mean    sd  2.5%   25%   50%   75%  97.5% n_eff Rhat #> a            42.09    0.52 22.89 15.01 26.51 36.35 51.23 104.39  1927    1 #> hl            0.02    0.00  0.01  0.01  0.01  0.02  0.03   0.05  2228    1 #> alpha         5.06    0.00  0.03  4.99  5.04  5.06  5.07   5.12  2438    1 #> beta[1]       0.59    0.00  0.02  0.55  0.57  0.59  0.60   0.63  2156    1 #> beta_evol[1]  5.06    0.00  0.00  5.05  5.06  5.06  5.06   5.06  3963    1 #> beta_evol[2]  0.57    0.00  0.00  0.57  0.57  0.57  0.57   0.57  2653    1 #> vy            0.01    0.00  0.00  0.00  0.00  0.00  0.01   0.02  3295    1 #> r_squared     0.96    0.00  0.00  0.95  0.96  0.96  0.96   0.97  1621    1 #> sigma2_y      0.47    0.01  0.49  0.01  0.12  0.30  0.66   1.92  1969    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Dec 11 21:01:59 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.adaptive <- rstan::extract(fit.adaptive) par(mfrow = c(1,3))  traceplot(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) stan_dens(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"model-comparison-using-bayes-factors","dir":"Articles","previous_headings":"","what":"Model Comparison using Bayes Factors","title":"OU-models","text":"using Direct Effect Adaptive model driven biological hypotheses tested, simple compare different models using Bayes Factors. use bridgesampling R package (CITATION). find data 5.2 likely model assumes direct effect model rather af adaptive model.","code":"lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.adaptive<-bridge_sampler(fit.adaptive,silent=TRUE) BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.adaptive) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.adaptive: 33.57691"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"brownian-model","dir":"Articles","previous_headings":"","what":"Brownian Model","title":"OU-models","text":"Blouch can also fit Brownian motion model data, can compared models using Bayes Factors. Note possible Blouch, assuming data follows model evolution, rather testing using Direct Effect Adaptive models . use stan_constraint_data type new Stan function. Note priors intercept slope set previously, sigma2_y longer upper range values declaration. explore trance density plots   Looking Good!","code":"fit.BM<- rstan::sampling(stanmodels$blouchBM_v1,data = stan_constraint_data,chains = 2,iter = 4000,control=list(adapt_delta=0.95),show_messages=FALSE) print(fit.BM,pars = c(\"alpha\",\"beta\",\"r_squared\",\"sigma2_y\")) #> Inference for Stan model: blouchBM_v1. #> 2 chains, each with iter=4000; warmup=2000; thin=1;  #> post-warmup draws per chain=2000, total post-warmup draws=4000. #>  #>           mean se_mean   sd 2.5%  25%  50%  75% 97.5% n_eff Rhat #> alpha     5.05       0 0.08 4.88 5.00 5.05 5.10  5.22  3397    1 #> beta[1]   0.56       0 0.02 0.51 0.54 0.56 0.57  0.60  2500    1 #> r_squared 0.99       0 0.01 0.98 0.99 0.99 0.99  0.99  2495    1 #> sigma2_y  0.03       0 0.01 0.01 0.02 0.02 0.03  0.05  2888    1 #>  #> Samples were drawn using NUTS(diag_e) at Sat Dec 11 21:05:03 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1).  #For downstream analysis and plots ext.fit.BM <- rstan::extract(fit.BM) par(mfrow = c(1,3))  traceplot(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) stan_dens(fit.adaptive,c(\"a\",\"hl\",\"alpha\",\"beta\",\"beta_evol\",\"vy\",\"sigma2_y\")) #3X8"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-vs--bm-model-comparison-using-bf","dir":"Articles","previous_headings":"","what":"Direct vs. BM Model Comparison using BF","title":"OU-models","text":"direct fit model Bayes Factor 0.7 BM model, makes sense data estimated phylogenetic half life quite long, 65% length phylogeny.","code":"library(bridgesampling) lml.fit.direct<-bridge_sampler(fit.direct,silent=TRUE) lml.fit.BM<-bridge_sampler(fit.BM,silent=TRUE)  BF_att <- bridgesampling::bf(lml.fit.direct, lml.fit.BM) BF_att #> Estimated Bayes factor in favor of lml.fit.direct over lml.fit.BM: 1.28686"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"OU-models","text":"Let’s make plots results","code":"library(ggsci) library(ggplot2)"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"direct-effect-plot","dir":"Articles","previous_headings":"","what":"Direct Effect Plot","title":"OU-models","text":"","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.direct$alpha),slope = mean(ext.fit.direct$beta[,1]),lty=1)+   geom_point(size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Direct Effect Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/articles/OU-Models.html","id":"adaptive-plot","dir":"Articles","previous_headings":"","what":"Adaptive Plot","title":"OU-models","text":"","code":"ggplot(data=ruminant.trdata$dat,aes(y=brain_mass_g_log_mean,x=bodycentered))+   #geom_abline(intercept=intercept_test,slope=slope_test,alpha=0.25)+   geom_abline(intercept=mean(ext.fit.adaptive$alpha),slope = mean(ext.fit.adaptive$beta[,1]),lty=1)+   geom_abline(intercept=mean(ext.fit.adaptive$alpha),slope = mean(ext.fit.adaptive$beta_evol[,2]),lty=2)+   geom_point(size=2.0,alpha=0.8)+   theme_bw()+   theme(legend.position=\"bottom\")+   ggtitle(\"Adaptive Model\")+   ylab(\"log Brain Mass (g)\") + xlab(\"log Body Mass (g)\")+   scale_color_npg()"},{"path":"https://github.com/mark-grabowski/blouch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Grabowski. Author, maintainer.","code":""},{"path":"https://github.com/mark-grabowski/blouch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grabowski M (2021). blouch: Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH). R package version 1.0.0, https://github.com/mark-grabowski/blouch.","code":"@Manual{,   title = {blouch: Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)},   author = {Mark Grabowski},   year = {2021},   note = {R package version 1.0.0},   url = {https://github.com/mark-grabowski/blouch}, }"},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"blouch","dir":"","previous_headings":"","what":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH) fits adaptive models continuous trait evolution Bayesian framework based categorical continuous predictors, incorporates measurement error following approach Hansen et al. (2008). Blouch can also make phylogenetically informed predictions known unknown traits clade, given dataset comparative measurements phylogeny including taxa interest. Blouch Bayesian version frequentist brother, Slouch (Kopperud et al. 2020), available . front-end component Blouch written R (R Core Team, 2015), nuts bolts written language Stan (Carpenter et al., 2017), allows estimation Bayesian models using Markov chain Monte Carlo (MCMC) methods based Hamilton Monte Carlo sampler.","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"just getting started blouch recommend starting tutorial vignettes available package website. Blouch based article currently review: Grabowski, M (review). Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH).","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"instalation-instructions","dir":"","previous_headings":"","what":"Instalation Instructions","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"install R Stan functions associated Blouch github, first install package devtools: install blouch","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"mark-grabowski/blouch\") library(blouch)"},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Please visit package website .","code":""},{"path":"https://github.com/mark-grabowski/blouch/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian Linear Ornstein-Uhlenbeck models for Comparative Hypotheses (BLOUCH)","text":"Carpenter, B., . Gelman, M. D. Hoffman, D. Lee, B. Goodrich, M. Betancourt, M. Brubaker, J. Guo, P. Li, . Riddell. 2017. Stan: Probabilistic Programming Language. Journal Statistical Software 76:1–32. Hansen, T. F., J. Pienaar, S. H. Orzack. 2008. comparative method studying adaptation randomly evolving environment. Evolution 62:1965–1977. Kopperud, B. T., J. Pienaar, K. L. Voje, S. H. Orzack, T. F. Hansen. 2020. Slouch: Stochastic Linear Ornstein-Uhlenbeck Comparative Hypotheses. R package version 2.1.4.","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'blouch' package. — blouch-package","title":"The 'blouch' package. — blouch-package","text":"Bayesian Linear Ornstein-Uhlenbeck models Comparative Hypotheses (BLOUCH)","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouch-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'blouch' package. — blouch-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.26.4. https://mc-stan.org","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOU.setup.v1","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOU.setup.v1","text":"R setup file blouchOU_v1.stan includes function sigma.X.estimate, taken R Pacakge Slouch (Kopperud et al. 2020).","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOU.setup.v1","text":"","code":"blouchOU.setup.v1(trdata, names.traits)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOU.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr names.traits Vector trait names","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOU.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOU.setup.v1","text":"object class list use blouchOU_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOUPredict_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUPredict.setup.v1","title":"This is the R setup file for blouchOUPredict_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUPredict.setup.v1","text":"R setup file blouchOUPredict_v1.stan includes function sigma.X.estimate, taken R Pacakge Slouch (Kopperud et al. 2020).","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOUPredict_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUPredict.setup.v1","text":"","code":"blouchOUPredict.setup.v1(trdata, trdata.fos, names.traits, classical)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOUPredict_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUPredict.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr - extant species trdata.fos Data formatted make.treedata function R Pacakge treeplyr - extant fossil names.traits Vector trait names classical Numeric denoting whether classical regression (=1) inverse regression (=0) used prediction","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUPredict.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOUPredict_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUPredict.setup.v1","text":"object class list use blouchOUPredict_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOUReg_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUReg.setup.v1","title":"This is the R setup file for blouchOUReg_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUReg.setup.v1","text":"R setup file blouchOUReg_v1.stan includes function sigma.X.estimate, taken R Pacakge Slouch (Kopperud et al. 2020).","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOUReg_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUReg.setup.v1","text":"","code":"blouchOUReg.setup.v1(trdata, names.traits)"},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOUReg_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUReg.setup.v1","text":"trdata Data formatted make.treedata function R Pacakge treeplyr names.traits Vector trait names","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/blouchOUReg.setup.v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOUReg_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — blouchOUReg.setup.v1","text":"object class list use blouchOUReg_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/sigma.X.estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — sigma.X.estimate","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — sigma.X.estimate","text":"R setup file blouchOU_v1.stan includes function sigma.X.estimate, taken R Pacakge Slouch (Kopperud et al. 2020). R setup file blouchOUPredict_v1.stan includes function sigma.X.estimate, taken R Pacakge Slouch (Kopperud et al. 2020).","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/sigma.X.estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — sigma.X.estimate","text":"","code":"# S3 method for X.estimate sigma(phy, ta, predictor, mv.predictor)  # S3 method for X.estimate sigma(phy, ta, predictor, mv.predictor)"},{"path":"https://github.com/mark-grabowski/blouch/reference/sigma.X.estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — sigma.X.estimate","text":"trdata Data formatted make.treedata function R Pacakge treeplyr - extant species trdata.fos Data formatted make.treedata function R Pacakge treeplyr - extant fossil names.traits Vector trait names classical Numeric denoting whether classical regression (=1) inverse regression (=0) used prediction","code":""},{"path":"https://github.com/mark-grabowski/blouch/reference/sigma.X.estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is the R setup file for blouchOU_v1.stan\nIt includes the function sigma.X.estimate, taken from the R Pacakge Slouch (Kopperud et al. 2020). — sigma.X.estimate","text":"object class list use blouchOU_v1.stan object class list use blouchOU_v1.stan","code":""},{"path":"https://github.com/mark-grabowski/blouch/news/index.html","id":"blouch-100","dir":"Changelog","previous_headings":"","what":"blouch 1.0.0","title":"blouch 1.0.0","text":"Added NEWS.md file track changes package.","code":""}]
