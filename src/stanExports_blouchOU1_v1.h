// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_blouchOU1_v1_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'blouchOU1_v1', line 96, column 2 to column 36)",
                                                      " (in 'blouchOU1_v1', line 99, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 100, column 2 to column 29)",
                                                      " (in 'blouchOU1_v1', line 153, column 2 to column 28)",
                                                      " (in 'blouchOU1_v1', line 154, column 2 to column 21)",
                                                      " (in 'blouchOU1_v1', line 156, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 157, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 158, column 2 to column 11)",
                                                      " (in 'blouchOU1_v1', line 159, column 2 to column 11)",
                                                      " (in 'blouchOU1_v1', line 160, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 161, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 163, column 2 to column 23)",
                                                      " (in 'blouchOU1_v1', line 164, column 2 to column 31)",
                                                      " (in 'blouchOU1_v1', line 165, column 2 to column 32)",
                                                      " (in 'blouchOU1_v1', line 166, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 169, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 173, column 2 to column 91)",
                                                      " (in 'blouchOU1_v1', line 176, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 179, column 2 to line 180, column 85)",
                                                      " (in 'blouchOU1_v1', line 181, column 2 to column 82)",
                                                      " (in 'blouchOU1_v1', line 183, column 2 to column 33)",
                                                      " (in 'blouchOU1_v1', line 184, column 2 to column 77)",
                                                      " (in 'blouchOU1_v1', line 185, column 2 to column 66)",
                                                      " (in 'blouchOU1_v1', line 186, column 2 to column 64)",
                                                      " (in 'blouchOU1_v1', line 187, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 111, column 2 to column 9)",
                                                      " (in 'blouchOU1_v1', line 113, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 114, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 114, column 2 to column 15)",
                                                      " (in 'blouchOU1_v1', line 115, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 115, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 115, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 118, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 118, column 11 to column 22)",
                                                      " (in 'blouchOU1_v1', line 118, column 2 to column 26)",
                                                      " (in 'blouchOU1_v1', line 119, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 119, column 12 to column 13)",
                                                      " (in 'blouchOU1_v1', line 119, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 127, column 2 to column 21)",
                                                      " (in 'blouchOU1_v1', line 131, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 132, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 136, column 2 to line 137, column 85)",
                                                      " (in 'blouchOU1_v1', line 139, column 2 to column 84)",
                                                      " (in 'blouchOU1_v1', line 143, column 2 to column 30)",
                                                      " (in 'blouchOU1_v1', line 146, column 2 to column 14)",
                                                      " (in 'blouchOU1_v1', line 147, column 2 to column 38)",
                                                      " (in 'blouchOU1_v1', line 70, column 2 to column 8)",
                                                      " (in 'blouchOU1_v1', line 71, column 2 to column 8)",
                                                      " (in 'blouchOU1_v1', line 72, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 72, column 2 to column 14)",
                                                      " (in 'blouchOU1_v1', line 73, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 73, column 2 to column 24)",
                                                      " (in 'blouchOU1_v1', line 74, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 74, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 74, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 75, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 75, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 76, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 76, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 76, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 77, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 77, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 77, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 78, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 78, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 78, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 81, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 82, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 83, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 84, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 84, column 20 to column 35)",
                                                      " (in 'blouchOU1_v1', line 84, column 2 to column 43)",
                                                      " (in 'blouchOU1_v1', line 85, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 85, column 20 to column 35)",
                                                      " (in 'blouchOU1_v1', line 85, column 2 to column 48)",
                                                      " (in 'blouchOU1_v1', line 86, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 86, column 20 to column 35)",
                                                      " (in 'blouchOU1_v1', line 86, column 2 to column 43)",
                                                      " (in 'blouchOU1_v1', line 87, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 87, column 20 to column 35)",
                                                      " (in 'blouchOU1_v1', line 87, column 2 to column 49)",
                                                      " (in 'blouchOU1_v1', line 88, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 88, column 20 to column 35)",
                                                      " (in 'blouchOU1_v1', line 88, column 2 to column 49)",
                                                      " (in 'blouchOU1_v1', line 89, column 21 to column 31)",
                                                      " (in 'blouchOU1_v1', line 89, column 32 to column 47)",
                                                      " (in 'blouchOU1_v1', line 89, column 2 to column 49)",
                                                      " (in 'blouchOU1_v1', line 100, column 9 to column 22)",
                                                      " (in 'blouchOU1_v1', line 156, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 161, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 161, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 163, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 163, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 164, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 164, column 11 to column 22)",
                                                      " (in 'blouchOU1_v1', line 165, column 9 to column 20)",
                                                      " (in 'blouchOU1_v1', line 8, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 8, column 20 to column 37)",
                                                      " (in 'blouchOU1_v1', line 8, column 2 to column 105)",
                                                      " (in 'blouchOU1_v1', line 9, column 9 to column 19)",
                                                      " (in 'blouchOU1_v1', line 9, column 20 to column 29)",
                                                      " (in 'blouchOU1_v1', line 9, column 2 to column 84)",
                                                      " (in 'blouchOU1_v1', line 10, column 26 to column 36)",
                                                      " (in 'blouchOU1_v1', line 10, column 38 to column 55)",
                                                      " (in 'blouchOU1_v1', line 10, column 56 to column 65)",
                                                      " (in 'blouchOU1_v1', line 10, column 2 to column 124)",
                                                      " (in 'blouchOU1_v1', line 18, column 8 to column 84)",
                                                      " (in 'blouchOU1_v1', line 19, column 8 to column 62)",
                                                      " (in 'blouchOU1_v1', line 17, column 25 to line 20, column 7)",
                                                      " (in 'blouchOU1_v1', line 17, column 6 to line 20, column 7)",
                                                      " (in 'blouchOU1_v1', line 16, column 31 to line 21, column 5)",
                                                      " (in 'blouchOU1_v1', line 16, column 4 to line 21, column 5)",
                                                      " (in 'blouchOU1_v1', line 15, column 24 to line 22, column 3)",
                                                      " (in 'blouchOU1_v1', line 15, column 2 to line 22, column 3)",
                                                      " (in 'blouchOU1_v1', line 27, column 6 to column 34)",
                                                      " (in 'blouchOU1_v1', line 29, column 8 to column 60)",
                                                      " (in 'blouchOU1_v1', line 28, column 15 to line 30, column 7)",
                                                      " (in 'blouchOU1_v1', line 28, column 6 to line 30, column 7)",
                                                      " (in 'blouchOU1_v1', line 26, column 31 to line 31, column 5)",
                                                      " (in 'blouchOU1_v1', line 26, column 4 to line 31, column 5)",
                                                      " (in 'blouchOU1_v1', line 25, column 24 to line 32, column 3)",
                                                      " (in 'blouchOU1_v1', line 25, column 2 to line 32, column 3)",
                                                      " (in 'blouchOU1_v1', line 38, column 8 to column 59)",
                                                      " (in 'blouchOU1_v1', line 36, column 33 to line 39, column 7)",
                                                      " (in 'blouchOU1_v1', line 36, column 6 to line 39, column 7)",
                                                      " (in 'blouchOU1_v1', line 35, column 26 to line 40, column 5)",
                                                      " (in 'blouchOU1_v1', line 35, column 4 to line 40, column 5)",
                                                      " (in 'blouchOU1_v1', line 34, column 23 to line 41, column 3)",
                                                      " (in 'blouchOU1_v1', line 34, column 2 to line 41, column 3)",
                                                      " (in 'blouchOU1_v1', line 42, column 0 to column 22)",
                                                      " (in 'blouchOU1_v1', line 6, column 187 to line 43, column 1)",
                                                      " (in 'blouchOU1_v1', line 51, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 51, column 11 to column 20)",
                                                      " (in 'blouchOU1_v1', line 51, column 2 to column 28)",
                                                      " (in 'blouchOU1_v1', line 52, column 2 to column 142)",
                                                      " (in 'blouchOU1_v1', line 54, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 50, column 44 to line 55, column 3)",
                                                      " (in 'blouchOU1_v1', line 60, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 60, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 60, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 62, column 2 to column 70)",
                                                      " (in 'blouchOU1_v1', line 64, column 2 to column 13)",
                                                      " (in 'blouchOU1_v1', line 59, column 135 to line 65, column 3)"};
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<stan::value_type_t<T8__>>>, -1, -1>
calc_optima(const T0__& a, const int& n_regimes, const int& n_lineages,
            const int& max_node_length, const T4__& nodes_arg__,
            const T5__& nodes_time_arg__, const T6__& t_end_arg__,
            const T7__& t_beginning_arg__, const T8__& regime_time_arg__,
            const std::vector<std::vector<int>>& regimes_matrix,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>, stan::promote_args_t<stan::value_type_t<T8__>>>;
  const auto& nodes = to_ref(nodes_arg__);
  const auto& nodes_time = to_ref(nodes_time_arg__);
  const auto& t_end = to_ref(t_end_arg__);
  const auto& t_beginning = to_ref(t_beginning_arg__);
  const auto& regime_time = to_ref(regime_time_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 97;
    validate_non_negative_index("weights_seg_matrix", "n_lineages",
                                n_lineages);
    current_statement__ = 98;
    validate_non_negative_index("weights_seg_matrix", "max_node_length + 1",
                                (max_node_length + 1));
    Eigen::Matrix<local_scalar_t__, -1, -1> weights_seg_matrix;
    weights_seg_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(n_lineages, 
      (max_node_length + 1));
    stan::math::fill(weights_seg_matrix, DUMMY_VAR__);
    
    current_statement__ = 99;
    assign(weights_seg_matrix, nil_index_list(),
      rep_matrix(0.0, n_lineages, (max_node_length + 1)),
      "assigning variable weights_seg_matrix");
    current_statement__ = 100;
    validate_non_negative_index("optima_matrix", "n_lineages", n_lineages);
    current_statement__ = 101;
    validate_non_negative_index("optima_matrix", "n_regimes", n_regimes);
    Eigen::Matrix<local_scalar_t__, -1, -1> optima_matrix;
    optima_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(n_lineages, n_regimes);
    stan::math::fill(optima_matrix, DUMMY_VAR__);
    
    current_statement__ = 102;
    assign(optima_matrix, nil_index_list(),
      rep_matrix(0.0, n_lineages, n_regimes),
      "assigning variable optima_matrix");
    current_statement__ = 103;
    validate_non_negative_index("regimes_matrix_sep", "n_lineages",
                                n_lineages);
    current_statement__ = 104;
    validate_non_negative_index("regimes_matrix_sep", "max_node_length + 1",
                                (max_node_length + 1));
    current_statement__ = 105;
    validate_non_negative_index("regimes_matrix_sep", "n_regimes", n_regimes);
    std::vector<std::vector<std::vector<local_scalar_t__>>> regimes_matrix_sep;
    regimes_matrix_sep = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_lineages, std::vector<std::vector<local_scalar_t__>>(
      (max_node_length + 1), std::vector<local_scalar_t__>(n_regimes, DUMMY_VAR__)));
    
    current_statement__ = 106;
    assign(regimes_matrix_sep, nil_index_list(),
      rep_array(0.0, n_lineages, (max_node_length + 1), n_regimes),
      "assigning variable regimes_matrix_sep");
    current_statement__ = 114;
    for (int i = 1; i <= n_lineages; ++i) {
      current_statement__ = 112;
      for (int j = 1; j <= max_node_length; ++j) {
        current_statement__ = 110;
        if (logical_neq(
              rvalue(t_end,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "t_end"), 0)) {
          current_statement__ = 107;
          assign(weights_seg_matrix,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            (stan::math::exp(
               (-a *
                 rvalue(t_beginning,
                   cons_list(index_uni(i),
                     cons_list(index_uni(j), nil_index_list())),
                   "t_beginning"))) -
              stan::math::exp(
                (-a *
                  rvalue(t_end,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())), "t_end")))),
            "assigning variable weights_seg_matrix");
          current_statement__ = 108;
          assign(weights_seg_matrix,
            cons_list(index_uni(i),
              cons_list(index_uni((j + 1)), nil_index_list())),
            stan::math::exp(
              (-a *
                rvalue(nodes_time,
                  cons_list(index_uni(i),
                    cons_list(index_uni(1), nil_index_list())), "nodes_time"))),
            "assigning variable weights_seg_matrix");
        } }}
    current_statement__ = 122;
    for (int i = 1; i <= n_lineages; ++i) {
      current_statement__ = 120;
      for (int j = 1; j <= max_node_length; ++j) {
        int z;
        z = std::numeric_limits<int>::min();
        
        current_statement__ = 115;
        z = regimes_matrix[(i - 1)][(j - 1)];
        current_statement__ = 118;
        if (logical_neq(z, 0)) {
          current_statement__ = 116;
          assign(regimes_matrix_sep,
            cons_list(index_uni(i),
              cons_list(index_uni(j),
                cons_list(index_uni(z), nil_index_list()))),
            rvalue(weights_seg_matrix,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              "weights_seg_matrix"), "assigning variable regimes_matrix_sep");
        } }}
    current_statement__ = 129;
    for (int z = 1; z <= n_regimes; ++z) {
      current_statement__ = 127;
      for (int i = 1; i <= n_lineages; ++i) {
        current_statement__ = 125;
        for (int j = 1; j <= max_node_length; ++j) {
          current_statement__ = 123;
          assign(optima_matrix,
            cons_list(index_uni(i),
              cons_list(index_uni(z), nil_index_list())),
            sum(
              rvalue(regimes_matrix_sep,
                cons_list(index_uni(i),
                  cons_list(index_omni(),
                    cons_list(index_uni(z), nil_index_list()))),
                "regimes_matrix_sep")), "assigning variable optima_matrix");}
      }}
    current_statement__ = 130;
    return optima_matrix;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_optima_functor__ {
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<stan::value_type_t<T8__>>>, -1, -1>
operator()(const T0__& a, const int& n_regimes, const int& n_lineages,
           const int& max_node_length, const T4__& nodes,
           const T5__& nodes_time, const T6__& t_end,
           const T7__& t_beginning, const T8__& regime_time,
           const std::vector<std::vector<int>>& regimes_matrix,
           std::ostream* pstream__)  const 
{
return calc_optima(a, n_regimes, n_lineages, max_node_length, nodes,
         nodes_time, t_end, t_beginning, regime_time, regimes_matrix,
         pstream__);
}
};
template <typename T2__, typename T3__, typename T8__, typename T9__,
typename T10__, typename T11__, typename T12__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T8__>, stan::value_type_t<T9__>,
stan::value_type_t<T10__>, stan::promote_args_t<stan::value_type_t<T11__>,
stan::value_type_t<T12__>>>, -1, -1>
design_matrix(const int& N, const int& evol, const T2__& a,
              const T3__& T_term_arg__, const int& Z, const int& n_regimes,
              const int& n_lineages, const int& max_node_length,
              const T8__& nodes_arg__, const T9__& nodes_time_arg__,
              const T10__& t_end_arg__, const T11__& t_beginning_arg__,
              const T12__& regime_time_arg__,
              const std::vector<std::vector<int>>& regimes_matrix,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>,
          stan::value_type_t<T10__>, stan::promote_args_t<stan::value_type_t<T11__>,
          stan::value_type_t<T12__>>>;
  const auto& T_term = to_ref(T_term_arg__);
  const auto& nodes = to_ref(nodes_arg__);
  const auto& nodes_time = to_ref(nodes_time_arg__);
  const auto& t_end = to_ref(t_end_arg__);
  const auto& t_beginning = to_ref(t_beginning_arg__);
  const auto& regime_time = to_ref(regime_time_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 132;
    validate_non_negative_index("X_reg", "N", N);
    current_statement__ = 133;
    validate_non_negative_index("X_reg", "n_regimes", n_regimes);
    Eigen::Matrix<local_scalar_t__, -1, -1> X_reg;
    X_reg = Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_regimes);
    stan::math::fill(X_reg, DUMMY_VAR__);
    
    current_statement__ = 135;
    assign(X_reg, nil_index_list(),
      calc_optima(a, n_regimes, n_lineages, max_node_length, nodes,
        nodes_time, t_end, t_beginning, regime_time,
        regimes_matrix, pstream__), "assigning variable X_reg");
    current_statement__ = 136;
    return X_reg;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct design_matrix_functor__ {
template <typename T2__, typename T3__, typename T8__, typename T9__,
typename T10__, typename T11__, typename T12__>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
stan::value_type_t<T8__>, stan::value_type_t<T9__>,
stan::value_type_t<T10__>, stan::promote_args_t<stan::value_type_t<T11__>,
stan::value_type_t<T12__>>>, -1, -1>
operator()(const int& N, const int& evol, const T2__& a, const T3__& T_term,
           const int& Z, const int& n_regimes, const int& n_lineages,
           const int& max_node_length, const T8__& nodes,
           const T9__& nodes_time, const T10__& t_end,
           const T11__& t_beginning, const T12__& regime_time,
           const std::vector<std::vector<int>>& regimes_matrix,
           std::ostream* pstream__)  const 
{
return design_matrix(N, evol, a, T_term, Z, n_regimes, n_lineages,
         max_node_length, nodes, nodes_time, t_end, t_beginning, regime_time,
         regimes_matrix, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T5__,
typename T6__, typename T7__, typename T8__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, T5__,
T6__, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>>>, -1, -1>
varcov_model(const int& N, const T1__& tij_arg__, const T2__& tja_arg__,
             const T3__& ta_arg__, const int& Z, const T5__& sigma2_y,
             const T6__& a, const T7__& beta1_arg__,
             const T8__& T_term_arg__, const int& n_regimes,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          T5__,
          T6__, stan::promote_args_t<stan::value_type_t<T7__>,
          stan::value_type_t<T8__>>>;
  const auto& tij = to_ref(tij_arg__);
  const auto& tja = to_ref(tja_arg__);
  const auto& ta = to_ref(ta_arg__);
  const auto& beta1 = to_ref(beta1_arg__);
  const auto& T_term = to_ref(T_term_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 138;
    validate_non_negative_index("Vt", "N", N);
    current_statement__ = 139;
    validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
    Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vt, DUMMY_VAR__);
    
    current_statement__ = 141;
    assign(Vt, nil_index_list(),
      multiply((sigma2_y / (2 * a)),
        elt_multiply(subtract(1, stan::math::exp(multiply((-2 * a), ta))),
          stan::math::exp(multiply(-a, tij)))), "assigning variable Vt");
    current_statement__ = 142;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct varcov_model_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T5__,
typename T6__, typename T7__, typename T8__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, T5__,
T6__, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>>>, -1, -1>
operator()(const int& N, const T1__& tij, const T2__& tja, const T3__& ta,
           const int& Z, const T5__& sigma2_y, const T6__& a,
           const T7__& beta1, const T8__& T_term, const int& n_regimes,
           std::ostream* pstream__)  const 
{
return varcov_model(N, tij, tja, ta, Z, sigma2_y, a, beta1, T_term,
         n_regimes, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_blouchOU1_v1 final : public model_base_crtp<model_blouchOU1_v1> {
 private:
  int N;
  int Z;
  Eigen::Matrix<double, -1, 1> Y;
  Eigen::Matrix<double, -1, 1> mv_response;
  Eigen::Matrix<double, -1, -1> ta;
  Eigen::Matrix<double, -1, 1> T_term;
  Eigen::Matrix<double, -1, -1> tia;
  Eigen::Matrix<double, -1, -1> tja;
  Eigen::Matrix<double, -1, -1> tij;
  int n_regimes;
  int n_lineages;
  int max_node_length;
  Eigen::Matrix<double, -1, -1> nodes;
  Eigen::Matrix<double, -1, -1> nodes_time;
  Eigen::Matrix<double, -1, -1> t_end;
  Eigen::Matrix<double, -1, -1> t_beginning;
  Eigen::Matrix<double, -1, -1> regime_time;
  std::vector<std::vector<int>> regimes_matrix;
  int beta_1dim__;
  int X_evol_2dim__;
  int beta_evol_1dim__;
 
 public:
  ~model_blouchOU1_v1() { }
  
  inline std::string model_name() const final { return "model_blouchOU1_v1"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_blouchOU1_v1(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_blouchOU1_v1_namespace::model_blouchOU1_v1";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","Z","int",
          context__.to_vec());
      Z = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      Z = context__.vals_i("Z")[(1 - 1)];
      current_statement__ = 49;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(N));
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 50;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 50;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 51;
      validate_non_negative_index("mv_response", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization","mv_response","double",
          context__.to_vec(N));
      mv_response = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mv_response, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mv_response_flat__;
        current_statement__ = 52;
        assign(mv_response_flat__, nil_index_list(),
          context__.vals_r("mv_response"),
          "assigning variable mv_response_flat__");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 52;
          assign(mv_response, cons_list(index_uni(sym1__), nil_index_list()),
            mv_response_flat__[(pos__ - 1)], "assigning variable mv_response");
          current_statement__ = 52;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 53;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 54;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization","ta","double",
          context__.to_vec(N, N));
      ta = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 55;
        assign(ta_flat__, nil_index_list(), context__.vals_r("ta"),
          "assigning variable ta_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 55;
            assign(ta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ta_flat__[(pos__ - 1)], "assigning variable ta");
            current_statement__ = 55;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 56;
      validate_non_negative_index("T_term", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization","T_term","double",
          context__.to_vec(N));
      T_term = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(T_term, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> T_term_flat__;
        current_statement__ = 57;
        assign(T_term_flat__, nil_index_list(), context__.vals_r("T_term"),
          "assigning variable T_term_flat__");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 57;
          assign(T_term, cons_list(index_uni(sym1__), nil_index_list()),
            T_term_flat__[(pos__ - 1)], "assigning variable T_term");
          current_statement__ = 57;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 58;
      validate_non_negative_index("tia", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("tia", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","tia","double",
          context__.to_vec(N, N));
      tia = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tia, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tia_flat__;
        current_statement__ = 60;
        assign(tia_flat__, nil_index_list(), context__.vals_r("tia"),
          "assigning variable tia_flat__");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 60;
            assign(tia,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tia_flat__[(pos__ - 1)], "assigning variable tia");
            current_statement__ = 60;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 61;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization","tja","double",
          context__.to_vec(N, N));
      tja = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tja, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tja_flat__;
        current_statement__ = 63;
        assign(tja_flat__, nil_index_list(), context__.vals_r("tja"),
          "assigning variable tja_flat__");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 63;
            assign(tja,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tja_flat__[(pos__ - 1)], "assigning variable tja");
            current_statement__ = 63;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 64;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 65;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 66;
      context__.validate_dims("data initialization","tij","double",
          context__.to_vec(N, N));
      tij = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tij, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 66;
        assign(tij_flat__, nil_index_list(), context__.vals_r("tij"),
          "assigning variable tij_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 66;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 66;
            assign(tij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tij_flat__[(pos__ - 1)], "assigning variable tij");
            current_statement__ = 66;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 67;
      context__.validate_dims("data initialization","n_regimes","int",
          context__.to_vec());
      n_regimes = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      n_regimes = context__.vals_i("n_regimes")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization","n_lineages","int",
          context__.to_vec());
      n_lineages = std::numeric_limits<int>::min();
      
      current_statement__ = 68;
      n_lineages = context__.vals_i("n_lineages")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","max_node_length","int",
          context__.to_vec());
      max_node_length = std::numeric_limits<int>::min();
      
      current_statement__ = 69;
      max_node_length = context__.vals_i("max_node_length")[(1 - 1)];
      current_statement__ = 70;
      validate_non_negative_index("nodes", "n_lineages", n_lineages);
      current_statement__ = 71;
      validate_non_negative_index("nodes", "max_node_length", max_node_length);
      current_statement__ = 72;
      context__.validate_dims("data initialization","nodes","double",
          context__.to_vec(n_lineages, max_node_length));
      nodes = Eigen::Matrix<double, -1, -1>(n_lineages, max_node_length);
      stan::math::fill(nodes, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nodes_flat__;
        current_statement__ = 72;
        assign(nodes_flat__, nil_index_list(), context__.vals_r("nodes"),
          "assigning variable nodes_flat__");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= max_node_length; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= n_lineages; ++sym2__) {
            current_statement__ = 72;
            assign(nodes,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              nodes_flat__[(pos__ - 1)], "assigning variable nodes");
            current_statement__ = 72;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 73;
      validate_non_negative_index("nodes_time", "n_lineages", n_lineages);
      current_statement__ = 74;
      validate_non_negative_index("nodes_time", "max_node_length",
                                  max_node_length);
      current_statement__ = 75;
      context__.validate_dims("data initialization","nodes_time","double",
          context__.to_vec(n_lineages, max_node_length));
      nodes_time = Eigen::Matrix<double, -1, -1>(n_lineages, max_node_length);
      stan::math::fill(nodes_time, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nodes_time_flat__;
        current_statement__ = 75;
        assign(nodes_time_flat__, nil_index_list(),
          context__.vals_r("nodes_time"),
          "assigning variable nodes_time_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= max_node_length; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= n_lineages; ++sym2__) {
            current_statement__ = 75;
            assign(nodes_time,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              nodes_time_flat__[(pos__ - 1)], "assigning variable nodes_time");
            current_statement__ = 75;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 76;
      validate_non_negative_index("t_end", "n_lineages", n_lineages);
      current_statement__ = 77;
      validate_non_negative_index("t_end", "max_node_length", max_node_length);
      current_statement__ = 78;
      context__.validate_dims("data initialization","t_end","double",
          context__.to_vec(n_lineages, max_node_length));
      t_end = Eigen::Matrix<double, -1, -1>(n_lineages, max_node_length);
      stan::math::fill(t_end, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_end_flat__;
        current_statement__ = 78;
        assign(t_end_flat__, nil_index_list(), context__.vals_r("t_end"),
          "assigning variable t_end_flat__");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= max_node_length; ++sym1__) {
          current_statement__ = 78;
          for (int sym2__ = 1; sym2__ <= n_lineages; ++sym2__) {
            current_statement__ = 78;
            assign(t_end,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              t_end_flat__[(pos__ - 1)], "assigning variable t_end");
            current_statement__ = 78;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 79;
      validate_non_negative_index("t_beginning", "n_lineages", n_lineages);
      current_statement__ = 80;
      validate_non_negative_index("t_beginning", "max_node_length",
                                  max_node_length);
      current_statement__ = 81;
      context__.validate_dims("data initialization","t_beginning","double",
          context__.to_vec(n_lineages, max_node_length));
      t_beginning = Eigen::Matrix<double, -1, -1>(n_lineages, max_node_length);
      stan::math::fill(t_beginning, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_beginning_flat__;
        current_statement__ = 81;
        assign(t_beginning_flat__, nil_index_list(),
          context__.vals_r("t_beginning"),
          "assigning variable t_beginning_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= max_node_length; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= n_lineages; ++sym2__) {
            current_statement__ = 81;
            assign(t_beginning,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              t_beginning_flat__[(pos__ - 1)],
              "assigning variable t_beginning");
            current_statement__ = 81;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 82;
      validate_non_negative_index("regime_time", "n_lineages", n_lineages);
      current_statement__ = 83;
      validate_non_negative_index("regime_time", "max_node_length",
                                  max_node_length);
      current_statement__ = 84;
      context__.validate_dims("data initialization","regime_time","double",
          context__.to_vec(n_lineages, max_node_length));
      regime_time = Eigen::Matrix<double, -1, -1>(n_lineages, max_node_length);
      stan::math::fill(regime_time, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> regime_time_flat__;
        current_statement__ = 84;
        assign(regime_time_flat__, nil_index_list(),
          context__.vals_r("regime_time"),
          "assigning variable regime_time_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= max_node_length; ++sym1__) {
          current_statement__ = 84;
          for (int sym2__ = 1; sym2__ <= n_lineages; ++sym2__) {
            current_statement__ = 84;
            assign(regime_time,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              regime_time_flat__[(pos__ - 1)],
              "assigning variable regime_time");
            current_statement__ = 84;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 85;
      validate_non_negative_index("regimes_matrix", "n_lineages", n_lineages);
      current_statement__ = 86;
      validate_non_negative_index("regimes_matrix", "max_node_length",
                                  max_node_length);
      current_statement__ = 87;
      context__.validate_dims("data initialization","regimes_matrix","int",
          context__.to_vec(n_lineages, max_node_length));
      regimes_matrix = std::vector<std::vector<int>>(n_lineages, std::vector<int>(max_node_length, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> regimes_matrix_flat__;
        current_statement__ = 87;
        assign(regimes_matrix_flat__, nil_index_list(),
          context__.vals_i("regimes_matrix"),
          "assigning variable regimes_matrix_flat__");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= max_node_length; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= n_lineages; ++sym2__) {
            current_statement__ = 87;
            assign(regimes_matrix,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              regimes_matrix_flat__[(pos__ - 1)],
              "assigning variable regimes_matrix");
            current_statement__ = 87;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 88;
      beta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      beta_1dim__ = (Z + n_regimes);
      current_statement__ = 88;
      validate_non_negative_index("beta", "Z + n_regimes", beta_1dim__);
      current_statement__ = 89;
      validate_non_negative_index("pred_mean", "N", N);
      current_statement__ = 90;
      validate_non_negative_index("V_final", "N", N);
      current_statement__ = 91;
      validate_non_negative_index("V_final", "N", N);
      current_statement__ = 92;
      validate_non_negative_index("Vt_final", "N", N);
      current_statement__ = 93;
      validate_non_negative_index("Vt_final", "N", N);
      current_statement__ = 94;
      validate_non_negative_index("X_evol", "N", N);
      current_statement__ = 95;
      X_evol_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 95;
      X_evol_2dim__ = (Z + n_regimes);
      current_statement__ = 95;
      validate_non_negative_index("X_evol", "Z + n_regimes", X_evol_2dim__);
      current_statement__ = 96;
      beta_evol_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      beta_evol_1dim__ = (Z + n_regimes);
      current_statement__ = 96;
      validate_non_negative_index("beta_evol", "Z + n_regimes",
                                  beta_evol_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += beta_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_blouchOU1_v1_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ hl;
      hl = DUMMY_VAR__;
      
      current_statement__ = 1;
      hl = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        hl = stan::math::lub_constrain(hl, 0, 1000, lp__);
      } else {
        current_statement__ = 1;
        hl = stan::math::lub_constrain(hl, 0, 1000);
      }
      local_scalar_t__ vy;
      vy = DUMMY_VAR__;
      
      current_statement__ = 2;
      vy = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        vy = stan::math::lb_constrain(vy, 0, lp__);
      } else {
        current_statement__ = 2;
        vy = stan::math::lb_constrain(vy, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(beta_1dim__);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 3;
      beta = in__.vector(beta_1dim__);
      {
        local_scalar_t__ a;
        a = DUMMY_VAR__;
        
        local_scalar_t__ sigma2_y;
        sigma2_y = DUMMY_VAR__;
        
        current_statement__ = 28;
        validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 30;
        validate_non_negative_index("V", "N", N);
        current_statement__ = 31;
        validate_non_negative_index("V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> V;
        V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(V, DUMMY_VAR__);
        
        current_statement__ = 33;
        validate_non_negative_index("X", "N", N);
        current_statement__ = 34;
        validate_non_negative_index("X", "Z + n_regimes", (Z + n_regimes));
        Eigen::Matrix<local_scalar_t__, -1, -1> X;
        X = Eigen::Matrix<local_scalar_t__, -1, -1>(N, (Z + n_regimes));
        stan::math::fill(X, DUMMY_VAR__);
        
        current_statement__ = 36;
        validate_non_negative_index("L_V", "N", N);
        current_statement__ = 37;
        validate_non_negative_index("L_V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_V;
        L_V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(L_V, DUMMY_VAR__);
        
        current_statement__ = 39;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, 2));
        current_statement__ = 40;
        a = (stan::math::log(2) / hl);
        current_statement__ = 41;
        sigma2_y = (vy * (2 * a));
        current_statement__ = 42;
        assign(X, nil_index_list(),
          design_matrix(N, 1, a, T_term, Z, n_regimes, n_lineages,
            max_node_length, nodes, nodes_time, t_end, t_beginning,
            regime_time, regimes_matrix, pstream__), "assigning variable X");
        current_statement__ = 43;
        assign(V, nil_index_list(),
          varcov_model(N, tij, tja, ta, Z, sigma2_y, a, beta, T_term,
            n_regimes, pstream__), "assigning variable V");
        current_statement__ = 44;
        assign(L_V, nil_index_list(), cholesky_decompose(V),
          "assigning variable L_V");
        current_statement__ = 45;
        assign(mu, nil_index_list(), multiply(X, beta),
          "assigning variable mu");
        current_statement__ = 46;
        lp_accum__.add(multi_normal_cholesky_lpdf<propto__>(Y, mu, L_V));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_blouchOU1_v1_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      hl = in__.scalar();
      current_statement__ = 1;
      hl = stan::math::lub_constrain(hl, 0, 1000);
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      vy = in__.scalar();
      current_statement__ = 2;
      vy = stan::math::lb_constrain(vy, 0);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(beta_1dim__);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      beta = in__.vector(beta_1dim__);
      vars__.emplace_back(hl);
      vars__.emplace_back(vy);
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> pred_mean;
      pred_mean = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(pred_mean, std::numeric_limits<double>::quiet_NaN());
      
      double grand_mean;
      grand_mean = std::numeric_limits<double>::quiet_NaN();
      
      double sst;
      sst = std::numeric_limits<double>::quiet_NaN();
      
      double sse;
      sse = std::numeric_limits<double>::quiet_NaN();
      
      double r_squared;
      r_squared = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, -1> V_final;
      V_final = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V_final, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Vt_final;
      Vt_final = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(Vt_final, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> X_evol;
      X_evol = Eigen::Matrix<double, -1, -1>(N, X_evol_2dim__);
      stan::math::fill(X_evol, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta_evol;
      beta_evol = Eigen::Matrix<double, -1, 1>(beta_evol_1dim__);
      stan::math::fill(beta_evol, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      a = (stan::math::log(2) / hl);
      current_statement__ = 16;
      sigma2_y = (vy * (2 * a));
      current_statement__ = 17;
      assign(Vt_final, nil_index_list(),
        varcov_model(N, tij, tja, ta, Z, sigma2_y, a, beta, T_term,
          n_regimes, pstream__), "assigning variable Vt_final");
      current_statement__ = 18;
      assign(V_final, nil_index_list(), Vt_final,
        "assigning variable V_final");
      current_statement__ = 19;
      assign(X_evol, nil_index_list(),
        design_matrix(N, 1, a, T_term, Z, n_regimes, n_lineages,
          max_node_length, nodes, nodes_time, t_end, t_beginning,
          regime_time, regimes_matrix, pstream__),
        "assigning variable X_evol");
      current_statement__ = 20;
      assign(beta_evol, nil_index_list(),
        multiply(
          multiply(
            multiply(
              inverse(
                multiply(multiply(transpose(X_evol), inverse(V_final)),
                  X_evol)), transpose(X_evol)), inverse(V_final)), Y),
        "assigning variable beta_evol");
      current_statement__ = 21;
      assign(pred_mean, nil_index_list(), multiply(X_evol, beta_evol),
        "assigning variable pred_mean");
      current_statement__ = 22;
      grand_mean = (multiply(
                      multiply(transpose(rep_vector(1, N)),
                        transpose(V_final)), Y) / sum(inverse(V_final)));
      current_statement__ = 23;
      sst = multiply(
              multiply(transpose(subtract(Y, grand_mean)), inverse(V_final)),
              subtract(Y, grand_mean));
      current_statement__ = 24;
      sse = multiply(
              multiply(transpose(subtract(Y, pred_mean)), inverse(V_final)),
              subtract(Y, pred_mean));
      current_statement__ = 25;
      r_squared = 0;
      current_statement__ = 4;
      current_statement__ = 4;
      check_greater_or_equal(function__, "sigma2_y", sigma2_y, 0);
      current_statement__ = 5;
      current_statement__ = 5;
      check_greater_or_equal(function__, "a", a, 0);
      vars__.emplace_back(sigma2_y);
      vars__.emplace_back(a);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(pred_mean[(sym1__ - 1)]);}
      vars__.emplace_back(grand_mean);
      vars__.emplace_back(sst);
      vars__.emplace_back(sse);
      vars__.emplace_back(r_squared);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V_final,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "V_final"));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(Vt_final,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Vt_final"));
        }}
      for (int sym1__ = 1; sym1__ <= X_evol_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(X_evol,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X_evol"));}
      }
      for (int sym1__ = 1; sym1__ <= beta_evol_1dim__; ++sym1__) {
        vars__.emplace_back(beta_evol[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      hl = context__.vals_r("hl")[(1 - 1)];
      double hl_free__;
      hl_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      hl_free__ = stan::math::lub_free(hl, 0, 1000);
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      vy = context__.vals_r("vy")[(1 - 1)];
      double vy_free__;
      vy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      vy_free__ = stan::math::lb_free(vy, 0);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(beta_1dim__);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(hl_free__);
      vars__.emplace_back(vy_free__);
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("hl");
    names__.emplace_back("vy");
    names__.emplace_back("beta");
    names__.emplace_back("sigma2_y");
    names__.emplace_back("a");
    names__.emplace_back("pred_mean");
    names__.emplace_back("grand_mean");
    names__.emplace_back("sst");
    names__.emplace_back("sse");
    names__.emplace_back("r_squared");
    names__.emplace_back("V_final");
    names__.emplace_back("Vt_final");
    names__.emplace_back("X_evol");
    names__.emplace_back("beta_evol");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(beta_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(X_evol_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(beta_evol_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "hl");
    param_names__.emplace_back(std::string() + "vy");
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_mean" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "grand_mean");
      param_names__.emplace_back(std::string() + "sst");
      param_names__.emplace_back(std::string() + "sse");
      param_names__.emplace_back(std::string() + "r_squared");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= X_evol_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_evol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= beta_evol_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_evol" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "hl");
    param_names__.emplace_back(std::string() + "vy");
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2_y");
      param_names__.emplace_back(std::string() + "a");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_mean" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "grand_mean");
      param_names__.emplace_back(std::string() + "sst");
      param_names__.emplace_back(std::string() + "sse");
      param_names__.emplace_back(std::string() + "r_squared");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt_final" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= X_evol_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X_evol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= beta_evol_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_evol" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << beta_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"pred_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"grand_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sst\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sse\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"r_squared\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"V_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Vt_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"X_evol\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << X_evol_2dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_evol\",\"type\":{\"name\":\"vector\",\"length\":" << beta_evol_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << beta_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"pred_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"grand_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sst\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sse\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"r_squared\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"V_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Vt_final\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"X_evol\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << X_evol_2dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_evol\",\"type\":{\"name\":\"vector\",\"length\":" << beta_evol_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_blouchOU1_v1_namespace::model_blouchOU1_v1;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU1_v1_namespace::profiles__;
}
#endif
#endif
