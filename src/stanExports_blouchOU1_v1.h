// Generated by rstantools.  Do not edit by hand.

/*
    blouch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blouch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blouch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_blouchOU1_v1_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'blouchOU1_v1', line 35, column 2 to column 41)",
                                                      " (in 'blouchOU1_v1', line 36, column 2 to column 28)",
                                                      " (in 'blouchOU1_v1', line 37, column 2 to column 13)",
                                                      " (in 'blouchOU1_v1', line 38, column 2 to column 23)",
                                                      " (in 'blouchOU1_v1', line 39, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 45, column 2 to column 15)",
                                                      " (in 'blouchOU1_v1', line 47, column 2 to column 26)",
                                                      " (in 'blouchOU1_v1', line 77, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 78, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 79, column 2 to column 14)",
                                                      " (in 'blouchOU1_v1', line 80, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 81, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 82, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 85, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 87, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 91, column 2 to column 67)",
                                                      " (in 'blouchOU1_v1', line 92, column 2 to column 36)",
                                                      " (in 'blouchOU1_v1', line 93, column 2 to column 30)",
                                                      " (in 'blouchOU1_v1', line 95, column 2 to column 41)",
                                                      " (in 'blouchOU1_v1', line 53, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 53, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 53, column 2 to column 16)",
                                                      " (in 'blouchOU1_v1', line 54, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 54, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 54, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 55, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 55, column 12 to column 13)",
                                                      " (in 'blouchOU1_v1', line 55, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 58, column 2 to column 25)",
                                                      " (in 'blouchOU1_v1', line 59, column 2 to column 29)",
                                                      " (in 'blouchOU1_v1', line 60, column 2 to column 22)",
                                                      " (in 'blouchOU1_v1', line 66, column 2 to column 67)",
                                                      " (in 'blouchOU1_v1', line 67, column 2 to column 36)",
                                                      " (in 'blouchOU1_v1', line 68, column 2 to column 30)",
                                                      " (in 'blouchOU1_v1', line 70, column 2 to column 24)",
                                                      " (in 'blouchOU1_v1', line 72, column 2 to column 38)",
                                                      " (in 'blouchOU1_v1', line 21, column 2 to column 8)",
                                                      " (in 'blouchOU1_v1', line 22, column 2 to column 8)",
                                                      " (in 'blouchOU1_v1', line 23, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 23, column 2 to column 14)",
                                                      " (in 'blouchOU1_v1', line 24, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 24, column 2 to column 24)",
                                                      " (in 'blouchOU1_v1', line 25, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 25, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 25, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 26, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 26, column 2 to column 19)",
                                                      " (in 'blouchOU1_v1', line 27, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 27, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 27, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 28, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 28, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 28, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 29, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 29, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 29, column 2 to column 18)",
                                                      " (in 'blouchOU1_v1', line 30, column 2 to column 14)",
                                                      " (in 'blouchOU1_v1', line 39, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 45, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 79, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 80, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 80, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 81, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 81, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 82, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 82, column 12 to column 13)",
                                                      " (in 'blouchOU1_v1', line 11, column 9 to column 10)",
                                                      " (in 'blouchOU1_v1', line 11, column 11 to column 12)",
                                                      " (in 'blouchOU1_v1', line 11, column 2 to column 17)",
                                                      " (in 'blouchOU1_v1', line 13, column 2 to column 70)",
                                                      " (in 'blouchOU1_v1', line 15, column 2 to column 13)",
                                                      " (in 'blouchOU1_v1', line 10, column 107 to line 16, column 3)"};
template <typename T1__, typename T2__, typename T3__, typename T5__,
typename T6__, typename T7__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, T5__,
T6__, stan::promote_args_t<stan::value_type_t<T7__>>>, -1, -1>
varcov_model(const int& N, const T1__& tij_arg__, const T2__& tja_arg__,
             const T3__& ta_arg__, const int& Z, const T5__& sigma2_y,
             const T6__& a, const T7__& T_term_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          T5__,
          T6__, stan::promote_args_t<stan::value_type_t<T7__>>>;
  const auto& tij = to_ref(tij_arg__);
  const auto& tja = to_ref(tja_arg__);
  const auto& ta = to_ref(ta_arg__);
  const auto& T_term = to_ref(T_term_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 67;
    validate_non_negative_index("Vt", "N", N);
    current_statement__ = 68;
    validate_non_negative_index("Vt", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
    Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(Vt, DUMMY_VAR__);
    
    current_statement__ = 70;
    assign(Vt, nil_index_list(),
      multiply((sigma2_y / (2 * a)),
        elt_multiply(subtract(1, stan::math::exp(multiply((-2 * a), ta))),
          stan::math::exp(multiply(-a, tij)))), "assigning variable Vt");
    current_statement__ = 71;
    return Vt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct varcov_model_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T5__,
typename T6__, typename T7__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, T5__,
T6__, stan::promote_args_t<stan::value_type_t<T7__>>>, -1, -1>
operator()(const int& N, const T1__& tij, const T2__& tja, const T3__& ta,
           const int& Z, const T5__& sigma2_y, const T6__& a,
           const T7__& T_term, std::ostream* pstream__)  const 
{
return varcov_model(N, tij, tja, ta, Z, sigma2_y, a, T_term, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_blouchOU1_v1 final : public model_base_crtp<model_blouchOU1_v1> {
 private:
  int N;
  int Z;
  Eigen::Matrix<double, -1, 1> Y;
  Eigen::Matrix<double, -1, 1> mv_response;
  Eigen::Matrix<double, -1, -1> ta;
  Eigen::Matrix<double, -1, 1> T_term;
  Eigen::Matrix<double, -1, -1> tia;
  Eigen::Matrix<double, -1, -1> tja;
  Eigen::Matrix<double, -1, -1> tij;
  double Y_mean;
 
 public:
  ~model_blouchOU1_v1() { }
  
  inline std::string model_name() const final { return "model_blouchOU1_v1"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_blouchOU1_v1(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_blouchOU1_v1_namespace::model_blouchOU1_v1";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 38;
      context__.validate_dims("data initialization","Z","int",
          context__.to_vec());
      Z = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      Z = context__.vals_i("Z")[(1 - 1)];
      current_statement__ = 39;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(N));
      Y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 40;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 40;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 40;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 41;
      validate_non_negative_index("mv_response", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","mv_response","double",
          context__.to_vec(N));
      mv_response = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mv_response, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mv_response_flat__;
        current_statement__ = 42;
        assign(mv_response_flat__, nil_index_list(),
          context__.vals_r("mv_response"),
          "assigning variable mv_response_flat__");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 42;
          assign(mv_response, cons_list(index_uni(sym1__), nil_index_list()),
            mv_response_flat__[(pos__ - 1)], "assigning variable mv_response");
          current_statement__ = 42;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 43;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("ta", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization","ta","double",
          context__.to_vec(N, N));
      ta = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ta_flat__;
        current_statement__ = 45;
        assign(ta_flat__, nil_index_list(), context__.vals_r("ta"),
          "assigning variable ta_flat__");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 45;
            assign(ta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ta_flat__[(pos__ - 1)], "assigning variable ta");
            current_statement__ = 45;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 46;
      validate_non_negative_index("T_term", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization","T_term","double",
          context__.to_vec(N));
      T_term = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(T_term, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> T_term_flat__;
        current_statement__ = 47;
        assign(T_term_flat__, nil_index_list(), context__.vals_r("T_term"),
          "assigning variable T_term_flat__");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 47;
          assign(T_term, cons_list(index_uni(sym1__), nil_index_list()),
            T_term_flat__[(pos__ - 1)], "assigning variable T_term");
          current_statement__ = 47;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 48;
      validate_non_negative_index("tia", "N", N);
      current_statement__ = 49;
      validate_non_negative_index("tia", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","tia","double",
          context__.to_vec(N, N));
      tia = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tia, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tia_flat__;
        current_statement__ = 50;
        assign(tia_flat__, nil_index_list(), context__.vals_r("tia"),
          "assigning variable tia_flat__");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 50;
            assign(tia,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tia_flat__[(pos__ - 1)], "assigning variable tia");
            current_statement__ = 50;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 51;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 52;
      validate_non_negative_index("tja", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization","tja","double",
          context__.to_vec(N, N));
      tja = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tja, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tja_flat__;
        current_statement__ = 53;
        assign(tja_flat__, nil_index_list(), context__.vals_r("tja"),
          "assigning variable tja_flat__");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 53;
            assign(tja,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tja_flat__[(pos__ - 1)], "assigning variable tja");
            current_statement__ = 53;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 54;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 55;
      validate_non_negative_index("tij", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization","tij","double",
          context__.to_vec(N, N));
      tij = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(tij, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tij_flat__;
        current_statement__ = 56;
        assign(tij_flat__, nil_index_list(), context__.vals_r("tij"),
          "assigning variable tij_flat__");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 56;
            assign(tij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tij_flat__[(pos__ - 1)], "assigning variable tij");
            current_statement__ = 56;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 57;
      context__.validate_dims("data initialization","Y_mean","double",
          context__.to_vec());
      Y_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 57;
      Y_mean = context__.vals_r("Y_mean")[(1 - 1)];
      current_statement__ = 58;
      validate_non_negative_index("mu_raw", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 63;
      validate_non_negative_index("Vt", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("Vt", "N", N);
      current_statement__ = 65;
      validate_non_negative_index("L_V", "N", N);
      current_statement__ = 66;
      validate_non_negative_index("L_V", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_blouchOU1_v1_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      current_statement__ = 1;
      a = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        a = stan::math::lub_constrain(a, 0.006931472, 10, lp__);
      } else {
        current_statement__ = 1;
        a = stan::math::lub_constrain(a, 0.006931472, 10);
      }
      local_scalar_t__ sigma2_y;
      sigma2_y = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma2_y = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma2_y = stan::math::lb_constrain(sigma2_y, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma2_y = stan::math::lb_constrain(sigma2_y, 0);
      }
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 3;
      alpha = in__.scalar();
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_raw;
      mu_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu_raw, DUMMY_VAR__);
      
      current_statement__ = 5;
      mu_raw = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(mu, nil_index_list(), add(alpha, multiply(sigma, mu_raw)),
        "assigning variable mu");
      {
        current_statement__ = 20;
        validate_non_negative_index("V", "N", N);
        current_statement__ = 21;
        validate_non_negative_index("V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> V;
        V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(V, DUMMY_VAR__);
        
        current_statement__ = 23;
        validate_non_negative_index("Vt", "N", N);
        current_statement__ = 24;
        validate_non_negative_index("Vt", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> Vt;
        Vt = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(Vt, DUMMY_VAR__);
        
        current_statement__ = 26;
        validate_non_negative_index("L_V", "N", N);
        current_statement__ = 27;
        validate_non_negative_index("L_V", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_V;
        L_V = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(L_V, DUMMY_VAR__);
        
        current_statement__ = 29;
        lp_accum__.add(lognormal_lpdf<propto__>(a, 1.0, 3.0));
        current_statement__ = 30;
        lp_accum__.add(normal_lpdf<propto__>(alpha, Y_mean, 1.0));
        current_statement__ = 31;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0, 5));
        current_statement__ = 32;
        assign(Vt, nil_index_list(),
          varcov_model(N, tij, tja, ta, Z, sigma2_y, a, T_term, pstream__),
          "assigning variable Vt");
        current_statement__ = 33;
        assign(V, nil_index_list(), add(Vt, diag_matrix(mv_response)),
          "assigning variable V");
        current_statement__ = 34;
        assign(L_V, nil_index_list(), cholesky_decompose(V),
          "assigning variable L_V");
        current_statement__ = 35;
        lp_accum__.add(std_normal_lpdf<propto__>(mu_raw));
        current_statement__ = 36;
        lp_accum__.add(multi_normal_cholesky_lpdf<propto__>(Y, mu, L_V));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_blouchOU1_v1_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = in__.scalar();
      current_statement__ = 1;
      a = stan::math::lub_constrain(a, 0.006931472, 10);
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma2_y = in__.scalar();
      current_statement__ = 2;
      sigma2_y = stan::math::lb_constrain(sigma2_y, 0);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = in__.scalar();
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      sigma = stan::math::lb_constrain(sigma, 0);
      Eigen::Matrix<double, -1, 1> mu_raw;
      mu_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      mu_raw = in__.vector(N);
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(a);
      vars__.emplace_back(sigma2_y);
      vars__.emplace_back(alpha);
      vars__.emplace_back(sigma);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(mu_raw[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(mu, nil_index_list(), add(alpha, multiply(sigma, mu_raw)),
        "assigning variable mu");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double vy;
      vy = std::numeric_limits<double>::quiet_NaN();
      
      double hl;
      hl = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> y;
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> V;
      V = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(V, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Vt;
      Vt = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(Vt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> L_V;
      L_V = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(L_V, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      hl = (stan::math::log(2) / a);
      current_statement__ = 15;
      vy = (sigma2_y / (2 * a));
      current_statement__ = 16;
      assign(Vt, nil_index_list(),
        varcov_model(N, tij, tja, ta, Z, sigma2_y, a, T_term, pstream__),
        "assigning variable Vt");
      current_statement__ = 17;
      assign(V, nil_index_list(), add(Vt, diag_matrix(mv_response)),
        "assigning variable V");
      current_statement__ = 18;
      assign(L_V, nil_index_list(), cholesky_decompose(V),
        "assigning variable L_V");
      current_statement__ = 19;
      assign(y, nil_index_list(),
        multi_normal_cholesky_rng(mu, L_V, base_rng__),
        "assigning variable y");
      current_statement__ = 8;
      current_statement__ = 8;
      check_greater_or_equal(function__, "vy", vy, 0);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "hl", hl, 0);
      vars__.emplace_back(vy);
      vars__.emplace_back(hl);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(V,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "V"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(Vt,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Vt"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_V,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L_V"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = context__.vals_r("a")[(1 - 1)];
      double a_free__;
      a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a_free__ = stan::math::lub_free(a, 0.006931472, 10);
      double sigma2_y;
      sigma2_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma2_y = context__.vals_r("sigma2_y")[(1 - 1)];
      double sigma2_y_free__;
      sigma2_y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma2_y_free__ = stan::math::lb_free(sigma2_y, 0);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      Eigen::Matrix<double, -1, 1> mu_raw;
      mu_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_raw_flat__;
        current_statement__ = 5;
        assign(mu_raw_flat__, nil_index_list(), context__.vals_r("mu_raw"),
          "assigning variable mu_raw_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(mu_raw, cons_list(index_uni(sym1__), nil_index_list()),
            mu_raw_flat__[(pos__ - 1)], "assigning variable mu_raw");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(a_free__);
      vars__.emplace_back(sigma2_y_free__);
      vars__.emplace_back(alpha);
      vars__.emplace_back(sigma_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(mu_raw[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("a");
    names__.emplace_back("sigma2_y");
    names__.emplace_back("alpha");
    names__.emplace_back("sigma");
    names__.emplace_back("mu_raw");
    names__.emplace_back("mu");
    names__.emplace_back("vy");
    names__.emplace_back("hl");
    names__.emplace_back("y");
    names__.emplace_back("V");
    names__.emplace_back("Vt");
    names__.emplace_back("L_V");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "sigma2_y");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_raw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "hl");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "sigma2_y");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_raw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "vy");
      param_names__.emplace_back(std::string() + "hl");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Vt" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_V" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Vt\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"L_V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"vy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hl\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Vt\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"L_V\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_blouchOU1_v1_namespace::model_blouchOU1_v1;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_blouchOU1_v1_namespace::profiles__;
}
#endif
#endif
