functions {
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Blouch Intercept only (OU1) Code
//02.11.2021
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Vt function
///////////////////////////////////////////////////////////////////////////////////////////////////////////
  matrix varcov_model(int N, matrix tij, matrix tja, matrix ta,int Z, real sigma2_y, real a, vector T_term){
  matrix[N,N] Vt;
  
  Vt = sigma2_y /( 2 * a) * ((1 - exp(-2 * a * ta)) .* exp(-a * tij));
  
  return(Vt);
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
data {
  //Extant data
  int N; //species number
  int Z; //number of traits
  vector[N] Y; //y variable
  vector[N] mv_response; //MV of Y model
  matrix[N,N] ta; //The following calculated in R based on the phylogeny
  vector[N] T_term; 
  matrix[N,N] tia;
  matrix[N,N] tja;
  matrix[N,N] tij;
  real Y_mean;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
parameters {
  real <lower = 0.006931472, upper=10> a;
  real <lower = 0> sigma2_y;
  real alpha; //OU Intercept Only Model
  real <lower=0> sigma; //Sigma of intercept
  vector[N] mu_raw;

  
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
transformed parameters {
  vector[N] mu;
  // implies: mu ~ normal(alpha, sigma)
  mu = alpha+sigma*mu_raw; //Non-centered parameterization
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
model {
//Declare variables
  matrix[N,N] V;
  matrix[N,N] Vt;
  matrix[N, N] L_V;
  
//Priors
  a ~ lognormal(1.0,3.0); //a = log(2)/half-life
  alpha ~ normal(Y_mean,1.0); //Intercept
  sigma ~ cauchy(0,5); //Intercept SD
  //sigma2_y ~ cauchy(0,5);
//////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////
//Regression

//Set up V matix
  Vt = varcov_model(N,  tij,  tja,  ta, Z,  sigma2_y,  a,  T_term);
  V = Vt + diag_matrix(mv_response);
  L_V = cholesky_decompose(V);
  
  mu_raw ~ std_normal();
  //mu ~ normal(alpha,sigma);
  Y ~ multi_normal_cholesky(mu , L_V);
  //print(mu);

////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

generated quantities {
  real <lower = 0> vy;
  real <lower = 0> hl;
  vector[N] y;
  matrix[N,N] V;
  matrix[N,N] Vt;
  matrix[N, N] L_V;
  

//////////////////////////////////
  hl = log(2)/a;
  //a = log(2)/hl;
  vy = sigma2_y/(2*a);
  //sigma2_y = vy*(2*a);
/////////////////////////////////

//Set up V matix
  Vt = varcov_model(N,  tij,  tja,  ta, Z,  sigma2_y,  a,  T_term);
  V = Vt + diag_matrix(mv_response);
  L_V = cholesky_decompose(V);

  // Generate test data.
  y = multi_normal_cholesky_rng(mu, L_V);

}
